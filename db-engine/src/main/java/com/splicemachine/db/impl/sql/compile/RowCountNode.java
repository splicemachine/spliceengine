/*
 * This file is part of Splice Machine.
 * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either
 * version 3, or (at your option) any later version.
 * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with Splice Machine.
 * If not, see <http://www.gnu.org/licenses/>.
 *
 * Some parts of this source code are based on Apache Derby, and the following notices apply to
 * Apache Derby:
 *
 * Apache Derby is a subproject of the Apache DB project, and is licensed under
 * the Apache License, Version 2.0 (the "License"); you may not use these files
 * except in compliance with the License. You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * Splice Machine, Inc. has modified the Apache Derby code in this file.
 *
 * All such Splice Machine modifications are Copyright 2012 - 2020 Splice Machine, Inc.,
 * and are licensed to you under the GNU Affero General Public License.
 */

package com.splicemachine.db.impl.sql.compile;

import com.splicemachine.db.iapi.error.StandardException;
import com.splicemachine.db.iapi.reference.ClassName;
import com.splicemachine.db.iapi.services.classfile.VMOpcode;
import com.splicemachine.db.iapi.services.compiler.MethodBuilder;
import com.splicemachine.db.iapi.services.sanity.SanityManager;
import com.splicemachine.db.iapi.sql.compile.C_NodeTypes;
import com.splicemachine.db.iapi.sql.compile.CostEstimate;
import com.splicemachine.db.iapi.sql.compile.Optimizer;
import com.splicemachine.db.iapi.sql.dictionary.DataDictionary;
import com.splicemachine.db.impl.ast.LimitOffsetVisitor;

/**
 * The result set generated by this node (RowCountResultSet) implements the
 * filtering of rows needed for the <result offset clause> and the <fetch first
 * clause>.  It sits on top of the normal SELECT's top result set, but under any
 * ScrollInsensitiveResultSet. The latter's positioning is needed for the correct
 * functioning of <result offset clause> and <fetch first clause> in the
 * presence of scrollable and/or updatable result sets and CURRENT OF cursors.
 */
public final class RowCountNode extends SingleChildResultSetNode{
    /**
     * If not null, this represents the value of a <result offset clause>.
     */
    public ValueNode offset;
    /**
     * If not null, this represents the value of a <fetch first clause>.
     */
    public ValueNode fetchFirst;
    /**
     * True if the offset/fetchFirst clauses were added by JDBC LIMIT syntax.
     */
    private boolean hasJDBClimitClause;


    /**
     * Initializer for a RowCountNode
     *
     * @throws StandardException
     */
    public void init(Object childResult,
                     Object rcl,
                     Object offset,
                     Object fetchFirst,
                     Object hasJDBClimitClause)
            throws StandardException{

        init(childResult,null);
        resultColumns=(ResultColumnList)rcl;
        this.offset=(ValueNode)offset;
        this.fetchFirst=(ValueNode)fetchFirst;
        this.hasJDBClimitClause=(hasJDBClimitClause!=null) && (Boolean)hasJDBClimitClause;
    }


    /**
     * Optimize this SingleChildResultSetNode.
     *
     * @param dataDictionary The DataDictionary to use for optimization
     * @param predicates     The PredicateList to optimize.  This should
     *                       be a join predicate.
     * @param outerRows      The number of outer joining rows
     * @param forSpark
     * @throws StandardException Thrown on error
     * @return ResultSetNode    The top of the optimized subtree
     */
    @Override
    public ResultSetNode optimize(DataDictionary dataDictionary,
                                  PredicateList predicates,
                                  double outerRows,
                                  boolean forSpark) throws StandardException{
        /* We need to implement this method since a NRSN can appear above a
         * SelectNode in a query tree.
         */
        childResult=childResult.optimize(
                dataDictionary,
                predicates,
                outerRows,
                forSpark);

        Optimizer optimizer=
                getOptimizer(
                        (FromList)getNodeFactory().getNode(
                                C_NodeTypes.FROM_LIST,
                                getNodeFactory().doJoinOrderOptimization(),
                                getContextManager()),
                        predicates,
                        dataDictionary,
                        null);
        optimizer.setForSpark(forSpark);
        costEstimate=optimizer.newCostEstimate();
        fixCost();
        return this;
    }

    public void fixCost() throws StandardException {
        // Nothing
    }

    /**
     * Get the final CostEstimate for this node.
     *
     * @return The final CostEstimate for this node, which is
     * the final cost estimate for the child node.
     */
    @Override
    public CostEstimate getFinalCostEstimate(boolean useSelf) throws StandardException{
        /*
        ** The cost estimate will be set here if either optimize() or
        ** optimizeIt() was called on this node.  It's also possible
        ** that optimization was done directly on the child node,
        ** in which case the cost estimate will be null here.
        */
        if(costEstimate==null) {
            costEstimate = childResult.getFinalCostEstimate(true).cloneMe();
            fixCost();
            return costEstimate;
        }
        else{
            return costEstimate;
        }
    }


    /**
     * Generate code.
     *
     * @param acb activation class builder
     * @param mb  method builder
     * @throws StandardException Thrown on error
     */
    @Override
    public void generate(ActivationClassBuilder acb, MethodBuilder mb) throws StandardException{

        /* Get the next ResultSet #, so that we can number this ResultSetNode,
         * its ResultColumnList and ResultSet.
         */
        assignResultSetNumber();

        costEstimate=getFinalCostEstimate(false);
        childResult.getFinalCostEstimate(true);

        acb.pushGetResultSetFactoryExpression(mb);

        childResult.generate(acb,mb); // arg1

        acb.pushThisAsActivation(mb);  // arg2
        mb.push(resultSetNumber);      // arg3

        // arg4
        if(offset!=null){
            generateExprFun(acb,mb,offset);
        }else{
            mb.pushNull(ClassName.GeneratedMethod);
        }

        // arg5
        if(fetchFirst!=null){
            generateExprFun(acb,mb,fetchFirst);
        }else{
            mb.pushNull(ClassName.GeneratedMethod);
        }

        mb.push(hasJDBClimitClause);  // arg6

        mb.push(costEstimate.rowCount()); // arg7
        mb.push(costEstimate.getEstimatedCost()); // arg8
        mb.push(printExplainInformationForActivation()); // arg9

        mb.callMethod(VMOpcode.INVOKEINTERFACE, null, "getRowCountResultSet", ClassName.NoPutResultSet, 9);
    }


    private void generateExprFun( ExpressionClassBuilder ecb, MethodBuilder mb, ValueNode vn) throws StandardException{

        // Generates:
        //     Object exprFun { }
        MethodBuilder exprFun=ecb.newExprFun();

        /* generates:
         *    return  <dynamic parameter.generate(ecb)>;
         * and adds it to exprFun
         */
        vn.generateExpression(ecb,exprFun);
        exprFun.methodReturn();

        // we are done modifying exprFun, complete it.
        exprFun.complete();

        // Pass in the method that will be used to evaluates the dynamic
        // parameter in RowCountResultSet.
        ecb.pushMethodReference(mb,exprFun);
    }


    /**
     * Convert this object to a String.  See comments in QueryTreeNode.java
     * for how this should be done for tree printing.
     *
     * @return This object as a String
     */
    @Override
    public String toString(){
        if(SanityManager.DEBUG){
            return "offset: "+offset+"\n"+
                    "fetchFirst:"+fetchFirst+"\n"+
                    super.toString();
        }else{
            return "";
        }
    }

    @Override
    public String printExplainInformation(String attrDelim) throws StandardException {
        StringBuilder sb = new StringBuilder();
        sb.append(spaceToLevel())
                .append("Limit(")
                .append("n=").append(getResultSetNumber())
                .append(attrDelim).append(getFinalCostEstimate(false).prettyProcessingString(attrDelim));
                if (offset != null && offset instanceof NumericConstantNode) {
                    sb.append(attrDelim).append("offset=").append( ((NumericConstantNode)offset).getValue());
                }
                if (fetchFirst != null && fetchFirst instanceof NumericConstantNode) {
                    sb.append(attrDelim).append("fetchFirst=").append( ((NumericConstantNode)fetchFirst).getValue());
                }
                sb.append(")");
        return sb.toString();
    }

    @Override
    boolean returnsAtMostOneRow() throws StandardException {
        return LimitOffsetVisitor.fetchNumericValue(fetchFirst) == 1;
    }

}
