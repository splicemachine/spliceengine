/*
 * This file is part of Splice Machine.
 * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either
 * version 3, or (at your option) any later version.
 * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with Splice Machine.
 * If not, see <http://www.gnu.org/licenses/>.
 *
 * Some parts of this source code are based on Apache Derby, and the following notices apply to
 * Apache Derby:
 *
 * Apache Derby is a subproject of the Apache DB project, and is licensed under
 * the Apache License, Version 2.0 (the "License"); you may not use these files
 * except in compliance with the License. You may obtain a copy of the License at:
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed
 * under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR
 * CONDITIONS OF ANY KIND, either express or implied. See the License for the
 * specific language governing permissions and limitations under the License.
 *
 * Splice Machine, Inc. has modified the Apache Derby code in this file.
 *
 * All such Splice Machine modifications are Copyright 2012 - 2019 Splice Machine, Inc.,
 * and are licensed to you under the GNU Affero General Public License.
 */

options
{
	STATIC = false;
	LOOKAHEAD = 1;
	DEBUG_PARSER = false;
	DEBUG_LOOKAHEAD = false;
	DEBUG_TOKEN_MANAGER = false;
	ERROR_REPORTING = true;
	USER_TOKEN_MANAGER = false;
	USER_CHAR_STREAM = true;
	COMMON_TOKEN_ACTION = true;
	CACHE_TOKENS = true;
	UNICODE_INPUT = true;
}

PARSER_BEGIN(SQLParser)

package com.splicemachine.db.impl.sql.compile;

import com.splicemachine.db.iapi.sql.Statement;
import com.splicemachine.db.iapi.sql.StatementType;

/* aggregates */
import com.splicemachine.db.impl.sql.compile.CountAggregateDefinition;
import com.splicemachine.db.impl.sql.compile.MaxMinAggregateDefinition;
import com.splicemachine.db.impl.sql.compile.SumAvgAggregateDefinition;

import com.splicemachine.db.impl.sql.compile.AggregateNode;
import com.splicemachine.db.impl.sql.compile.BinaryOperatorNode;
import com.splicemachine.db.impl.sql.compile.CallStatementNode;
import	com.splicemachine.db.impl.sql.compile.CharConstantNode;
import	com.splicemachine.db.impl.sql.compile.CastNode;
import com.splicemachine.db.impl.sql.compile.ColumnDefinitionNode;
import com.splicemachine.db.impl.sql.compile.ColumnReference;
import com.splicemachine.db.impl.sql.compile.CreateAliasNode;
import com.splicemachine.db.impl.sql.compile.CursorNode;
import com.splicemachine.db.impl.sql.compile.FromBaseTable;
import com.splicemachine.db.impl.sql.compile.FromList;
import com.splicemachine.db.impl.sql.compile.FromSubquery;
import com.splicemachine.db.impl.sql.compile.FromTable;
import com.splicemachine.db.impl.sql.compile.GroupByList;
import com.splicemachine.db.impl.sql.compile.HasNodeVisitor;
import com.splicemachine.db.impl.sql.compile.JavaToSQLValueNode;
import com.splicemachine.db.impl.sql.compile.JoinNode;
import com.splicemachine.db.impl.sql.compile.MethodCallNode;
import com.splicemachine.db.impl.sql.compile.QueryTreeNode;
import com.splicemachine.db.impl.sql.compile.ReplaceAggregatesWithCRVisitor;
import com.splicemachine.db.impl.sql.compile.ResultColumnList;
import com.splicemachine.db.impl.sql.compile.ResultColumn;
import com.splicemachine.db.impl.sql.compile.OrderByList;
import com.splicemachine.db.impl.sql.compile.OrderByColumn;
import com.splicemachine.db.impl.sql.compile.ResultSetNode;
import com.splicemachine.db.impl.sql.compile.SelectNode;
import com.splicemachine.db.impl.sql.compile.SubqueryNode;
import com.splicemachine.db.impl.sql.compile.TableName;
import com.splicemachine.db.impl.sql.compile.TernaryOperatorNode;
import com.splicemachine.db.impl.sql.compile.ParameterNode;
import com.splicemachine.db.impl.sql.compile.PrivilegeNode;
import com.splicemachine.db.impl.sql.compile.ConstraintDefinitionNode;
import com.splicemachine.db.impl.sql.compile.DMLModStatementNode;
import com.splicemachine.db.impl.sql.compile.RoutineDesignator;
import com.splicemachine.db.impl.sql.compile.StatementNode;
import com.splicemachine.db.impl.sql.compile.TableElementList;
import com.splicemachine.db.impl.sql.compile.TableElementNode;
import com.splicemachine.db.impl.sql.compile.TableOperatorNode;
import com.splicemachine.db.impl.sql.compile.BasicPrivilegesNode;
import com.splicemachine.db.impl.sql.compile.TransactionStatementNode;
import com.splicemachine.db.impl.sql.compile.TriggerReferencingStruct;
import com.splicemachine.db.impl.sql.compile.UnionNode;
import com.splicemachine.db.impl.sql.compile.IntersectOrExceptNode;
import com.splicemachine.db.impl.sql.compile.UnaryOperatorNode;
import com.splicemachine.db.impl.sql.compile.UntypedNullConstantNode;
import com.splicemachine.db.impl.sql.compile.UpdateNode;
import com.splicemachine.db.impl.sql.compile.UserTypeConstantNode;
import com.splicemachine.db.impl.sql.compile.ValueNode;
import com.splicemachine.db.impl.sql.compile.ValueNodeList;
import com.splicemachine.db.impl.sql.compile.GroupByColumn;
import com.splicemachine.db.impl.sql.compile.CurrentDatetimeOperatorNode;
import com.splicemachine.db.impl.sql.compile.DDLStatementNode;
import com.splicemachine.db.impl.sql.compile.AlterTableNode;

import com.splicemachine.db.impl.sql.compile.ParseException;
import com.splicemachine.db.impl.sql.compile.Token;
import com.splicemachine.db.impl.sql.compile.TokenMgrError;
import com.splicemachine.db.impl.sql.compile.SQLParserConstants;
import com.splicemachine.db.impl.sql.compile.CharStream;
import com.splicemachine.db.impl.sql.execute.BasicPrivilegeInfo;
import com.splicemachine.db.impl.sql.execute.TablePrivilegeInfo;
import com.splicemachine.db.impl.sql.execute.SchemaPrivilegeInfo;
import com.splicemachine.db.iapi.sql.dictionary.DataDictionary;
import com.splicemachine.db.iapi.sql.dictionary.PermDescriptor;
import com.splicemachine.db.iapi.sql.dictionary.TableDescriptor;
import com.splicemachine.db.iapi.sql.dictionary.TriggerDescriptor;
import com.splicemachine.db.iapi.sql.dictionary.ViewDescriptor;
import com.splicemachine.db.iapi.sql.dictionary.SchemaDescriptor;

import com.splicemachine.db.iapi.sql.conn.Authorizer;
import com.splicemachine.db.iapi.sql.execute.ConstantAction;
import com.splicemachine.db.iapi.sql.execute.ExecutionContext;
import com.splicemachine.db.impl.sql.execute.TriggerEventDML;

import com.splicemachine.db.iapi.types.DataTypeDescriptor;
import com.splicemachine.db.iapi.types.TypeId;
import com.splicemachine.db.iapi.sql.compile.TypeCompiler;
import com.splicemachine.db.iapi.sql.conn.LanguageConnectionContext;

import com.splicemachine.db.iapi.types.DateTimeDataValue;
import com.splicemachine.db.iapi.types.DataTypeDescriptor;
import com.splicemachine.db.iapi.types.DataTypeUtilities;
import com.splicemachine.db.iapi.types.StringDataValue;
import com.splicemachine.db.iapi.types.DataValueDescriptor;

import com.splicemachine.db.iapi.error.StandardException;

import com.splicemachine.db.iapi.reference.Property;
import com.splicemachine.db.iapi.reference.SQLState;
import com.splicemachine.db.iapi.reference.JDBC30Translation;
import com.splicemachine.db.iapi.reference.JDBC40Translation;
import com.splicemachine.db.iapi.reference.Limits;

import com.splicemachine.db.iapi.sql.compile.CompilerContext;
import com.splicemachine.db.iapi.sql.compile.C_NodeTypes;

import com.splicemachine.db.iapi.services.context.ContextManager;

import com.splicemachine.db.iapi.sql.compile.NodeFactory;

import com.splicemachine.db.iapi.services.sanity.SanityManager;

import com.splicemachine.db.catalog.AliasInfo;
import com.splicemachine.db.catalog.TypeDescriptor;
import com.splicemachine.db.catalog.types.RoutineAliasInfo;

import com.splicemachine.db.iapi.services.io.FormatableProperties;
import com.splicemachine.db.iapi.services.io.StoredFormatIds;
import com.splicemachine.db.iapi.util.ReuseFactory;
import com.splicemachine.db.iapi.services.io.FormatableBitSet;
import com.splicemachine.db.iapi.util.StringUtil;
import com.splicemachine.db.iapi.util.IdUtil;
import com.splicemachine.utils.Pair;
import com.splicemachine.utils.ModifiableBoolean;

import java.sql.Types;
import java.util.List;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.Properties;
import java.util.StringTokenizer;
import java.util.Vector;
import java.util.Arrays;
import java.lang.Character;

public class SQLParser
{
	private static final String[] SAVEPOINT_CLAUSE_NAMES = {"UNIQUE", "ON ROLLBACK RETAIN LOCKS", "ON ROLLBACK RETAIN CURSORS"};

    /* Keep in synch with CreateAliasNode's index constants */
    private static final String[] ROUTINE_CLAUSE_NAMES =
        {null,
         "SPECIFIC",
         "RESULT SET",
         "LANGUAGE",
         "EXTERNAL NAME",
         "PARAMETER STYLE",
         "SQL",
         "DETERMINISTIC",
         "ON NULL INPUT",
         "RETURN TYPE",
         "EXTERNAL SECURITY"};
	/**
	   Clauses required for Java routines. Numbers correspond
	   to offsets in ROUTINE_CLAUSE_NAMES.
	   3 - "LANGUAGE"
	   4 - "EXTERNAL NAME"
	   5 - "PARAMETER STYLE"
	*/
	private static final int[] JAVA_ROUTINE_CLAUSES = {CreateAliasNode.LANGUAGE,CreateAliasNode.EXTERNAL_NAME,CreateAliasNode.PARAMETER_STYLE};
	private static final String[] TEMPORARY_TABLE_CLAUSE_NAMES = {"NOT LOGGED", "ON COMMIT", "ON ROLLBACK"};
	/* The default length of a char or bit if the length is omitted */
	private static final int	DEFAULT_STRING_COLUMN_LENGTH = 1;

	// Defines for ON or USING clauses
	private static final int	ON_OR_USING_CLAUSE_SIZE = 2;
	private static final int	ON_CLAUSE = 0;
	private static final int	USING_CLAUSE = 1;

	// Defines for optional table clauses
	private static final int	OPTIONAL_TABLE_CLAUSES_SIZE = 3;
	private static final int	OPTIONAL_TABLE_CLAUSES_TABLE_PROPERTIES = 0;
	private static final int	OPTIONAL_TABLE_CLAUSES_DERIVED_RCL = 1;
	private static final int	OPTIONAL_TABLE_CLAUSES_CORRELATION_NAME = 2;

	// Define for UTF8 max
	private static final int	MAX_UTF8_LENGTH = 65535;

    // Constants for set operator types
    private static final int NO_SET_OP = 0;
    private static final int UNION_OP = 1;
    private static final int UNION_ALL_OP = 2;
    private static final int EXCEPT_OP = 3;
    private static final int EXCEPT_ALL_OP = 4;
    private static final int INTERSECT_OP = 5;
    private static final int INTERSECT_ALL_OP = 6;

    // indexes into array of optional clauses for CREATE SEQUENCE statement
    private static final int IDX_DATA_TYPE = 0;
    private static final int IDX_START_WITH_OPTION = IDX_DATA_TYPE + 1;
    private static final int IDX_INCREMENT_BY_OPTION = IDX_START_WITH_OPTION + 1;
    private static final int IDX_MAX_VALUE_OPTION = IDX_INCREMENT_BY_OPTION + 1;
    private static final int IDX_MIN_VALUE_OPTION = IDX_MAX_VALUE_OPTION + 1;
    private static final int IDX_CYCLE_OPTION = IDX_MIN_VALUE_OPTION + 1;
    private static final int IDX_OPTION_COUNT = IDX_CYCLE_OPTION + 1;

    // indexes into array of clauses for OFFSET FETCH NEXT
    private static final int OFFSET_CLAUSE = 0;
    private static final int FETCH_FIRST_CLAUSE = OFFSET_CLAUSE + 1;
    private static final int OFFSET_CLAUSE_COUNT = FETCH_FIRST_CLAUSE + 1;

	private Object[]					paramDefaults;
	private String						statementSQLText;
	private NodeFactory					nodeFactory;
	private ContextManager				cm;
	private CompilerContext				compilerContext;

	/* The number of the next ? parameter */
	private int			parameterNumber;

	/* The list of ? parameters */
	private Vector			parameterList;

	/* Remember if the last identifier or keyword was a
	 * delimited identifier.  This is used for remembering
	 * if the xxx in SERIALIZE(xxx) was a delimited identifier
	 * because we need to know whether or not we can convert
	 * xxx to upper case if we try to resolve it as a class
	 * alias at bind time.
	 */
	private Boolean lastTokenDelimitedIdentifier = Boolean.FALSE;
	private Boolean	nextToLastTokenDelimitedIdentifier = Boolean.FALSE;


	/*
	** Remember the last token we got that was an identifier
	*/
	private Token	lastIdentifierToken;
	private Token	nextToLastIdentifierToken;

	static final String SINGLEQUOTES = "\'\'";
	static final String DOUBLEQUOTES = "\"\"";

	static final String DEFAULT_INDEX_TYPE = "BTREE";

	//the following 2 booleans are used to make sure only null or not null is
	//defined for a column while creating a table or altering a table. Defining
	//both at the same time will be an error case.
        boolean explicitNotNull = false;
        boolean explicitNull = false;

	//this vector keeps a list of explicitly nullable columns, so that if they
	//get used in the table level primary key constraint, it will result in an
	//exception.
        Vector explicitlyNullableColumnsList = new Vector();


	final void setCompilerContext(CompilerContext cc) {
		this.compilerContext = cc;
		this.cm = cc.getContextManager();
	}

	/**
	  *	Get the NodeFactory for this database.
	  *
	  *	@return	The NodeFactory for this database.
	  * @exception StandardException		Thrown on error
	  */
	private	final NodeFactory	getNodeFactory()	throws StandardException
	{
		if ( nodeFactory == null )
		{
			nodeFactory = getCompilerContext().getNodeFactory();
		}

		return	nodeFactory;
	}

	private final CompilerContext getCompilerContext()
	{
		return compilerContext;
	}

	private DataTypeDescriptor getDataTypeServices(int type, int precision, int scale,
			int length)
        throws StandardException
	{
		return new DataTypeDescriptor(
					TypeId.getBuiltInTypeId(type),
					precision,
					scale,
					true, /* assume nullable for now, change it if not nullable */
					length
				);
	}

	private DataTypeDescriptor getJavaClassDataTypeDescriptor(TableName typeName)
        throws StandardException
	{
		return new DataTypeDescriptor
            (
                TypeId.getUserDefinedTypeId( typeName.getSchemaName(), typeName.getTableName(), null ),
                true
            );
	}
	private LanguageConnectionContext getLanguageConnectionContext()
	{
		return (LanguageConnectionContext) getContextManager().getContext(
										LanguageConnectionContext.CONTEXT_ID);
	}

	/**
		Utility method for checking that the underlying database has been
		upgraded to the required level to use this functionality. Used to
		disallow SQL statements that would leave on-disk formats that would
		not be understood by a engine that matches the current upgrade level
		of the database. Throws an exception if the database is not a the required level.
		<P>
		Typically used for CREATE statements at the parser level. Called usually just
		before the node is created, or can be called in just a partial syntax fragment

		@param version Data Dictionary major version (DataDictionary.DD_ constant)
		@param feature SQL Feature name, for error text.
	*/
	private boolean checkVersion(int version, String feature) throws StandardException
	{
		return getLanguageConnectionContext()
				.getDataDictionary().checkVersion(version, feature);
	}

    /**
		Utility method for checking that the underlying database uses SQL standard
		permission checking (GRANT/REVOKE).

		@param command "GRANT", "REVOKE", "CREATE/DROP/SET ROLE" or CURRENT_ROLE
    */
	private void checkSqlStandardAccess( String command) throws StandardException
	{
		if( getLanguageConnectionContext().usesSqlAuthorization())
			return;

		throw StandardException.newException(SQLState.LANG_GRANT_REVOKE_WITH_LEGACY_ACCESS,
											command,
											Property.SQL_AUTHORIZATION_PROPERTY,
											"TRUE");
	}

    /**
		Prevent NEXT VALUE FOR clauses when we get to the bind() phase.
    */
	private void forbidNextValueFor()
	{
        CompilerContext cc = getCompilerContext();

        cc.setReliability( cc.getReliability() | CompilerContext.NEXT_VALUE_FOR_ILLEGAL );
	}

	/**
		Check that the current mode supports internal extensions.

		@param feature Description of feature for exception.

		@exception StandardException current mode does not support statement
	*/
	private void checkInternalFeature(String feature) throws StandardException
	{
		CompilerContext cc = getCompilerContext();
//		if ((cc.getReliability() & CompilerContext.INTERNAL_SQL_ILLEGAL) != 0)
//			throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, feature);
	}

	/**
	 * check if the type length is ok for the given type.
	 */
	private void checkTypeLimits(int type, int length)
		throws StandardException
	{
	boolean valid = true;


	switch (type) {
		case Types.BINARY:
		case Types.CHAR:
			if (length  > Limits.DB2_CHAR_MAXWIDTH)
				valid = false;
			break;

		case Types.VARBINARY:
		case Types.VARCHAR:
			if (length  > Limits.DB2_VARCHAR_MAXWIDTH)
				valid = false;

			break;
		default:
			break;
	}
	if (!valid)  // If these limits are too big
		{
			DataTypeDescriptor charDTD =
				DataTypeDescriptor.getBuiltInDataTypeDescriptor(type, length);

			throw StandardException.newException(SQLState.LANG_DB2_LENGTH_PRECISION_SCALE_VIOLATION, charDTD.getSQLstring());
		}
	}



	// Get the current ContextManager
	private final ContextManager getContextManager()
	{
		return cm;
	}

	private static void verifyImageLength(String image) throws StandardException
		{
		// beetle 2758.  For right now throw an error for literals > 64K
		if (image.length() > MAX_UTF8_LENGTH)
			{
	   	throw StandardException.newException(SQLState.LANG_INVALID_LITERAL_LENGTH);
			}
		}

	/*
	** Converts a delimited id to a canonical form.
	** Post process delimited identifiers to eliminate leading and
	** trailing " and convert all occurrences of "" to ".
	*/
	private static String normalizeDelimitedID(String str)
	{
		str = StringUtil.compressQuotes(str, DOUBLEQUOTES);
		return str;
	}
	private static boolean isDATETIME(int val)
	{
		if (val == DATE || val == TIME || val == TIMESTAMP)
			return true;
		else
			return false;
	}

	/*
	 * Generate a multiplicative operator node, if necessary.
	 *
	 * If there are two operands, generate the multiplicative operator
	 * that corresponds to the multiplicativeOperator parameter.  If there
	 * is no left operand, just return the right operand.
	 *
	 * @param leftOperand	The left operand, null if no operator
	 * @param rightOperand	The right operand
	 * @param multiplicativeOperator	An identifier from BinaryOperatorNode
	 *									telling what operator to generate.
	 *
	 * @return	The multiplicative operator, or the right operand if there is
	 *			no operator.
	 *
	 * @exception StandardException		Thrown on error
	 */

	ValueNode multOp(ValueNode leftOperand,
							ValueNode rightOperand,
							int multiplicativeOperator)
					throws StandardException
	{
		if (leftOperand == null)
		{
			return rightOperand;
		}

		switch (multiplicativeOperator)
		{
		  case BinaryOperatorNode.TIMES:
			return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.BINARY_TIMES_OPERATOR_NODE,
									leftOperand,
									rightOperand,
									getContextManager());

		  case BinaryOperatorNode.DIVIDE:
			return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.BINARY_DIVIDE_OPERATOR_NODE,
									leftOperand,
									rightOperand,
									getContextManager());
		  case BinaryOperatorNode.CONCATENATE:
			return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.CONCATENATION_OPERATOR_NODE,
									leftOperand,
									rightOperand,
									getContextManager());

		  default:
			if (SanityManager.DEBUG)
			SanityManager.THROWASSERT("Unexpected multiplicative operator " +
										multiplicativeOperator);
			return null;
		}
	}

	/**
	 * Set up and like the parameters to the descriptors.
	 * Set all the ParameterNodes to point to the array of
	 * parameter descriptors.
	 *
	 *	@exception	StandardException
	 */
	 private void setUpAndLinkParameters()
			throws StandardException
	 {
		CompilerContext cc = getCompilerContext();
		cc.setParameterList(parameterList);
		/* Link the untyped parameters to the array of parameter descriptors */

		DataTypeDescriptor[] descriptors = cc.getParameterTypes();

		ParameterNode				newNode;
		int							paramCount;

		/*
		** Iterate through the list of untyped parameter nodes, set each one
		** to point to the array of parameter descriptors.
		*/
		paramCount = -1;
		int plSize = parameterList.size();
		for (int index = 0; index < plSize; index++)
		{
			paramCount++;

			newNode = (ParameterNode) parameterList.elementAt(index);
			newNode.setDescriptors(descriptors );
		}
	}

	/**
	 *  Initializes the list of unnamed parameters, i.e., "?" parameters
	 *
	 *	Usually, this routine just gets an empty list for the unnamed parameters.
	 *
	 *
	 */
	void	initUnnamedParameterList()
	{
		parameterList = new Vector();
	}

	/**
	 * Makes a new unnamed ParameterNode and chains it onto parameterList.
	 *
	 *	@return	new unnamed parameter.
	 *
	 *	@exception	StandardException
	 */
	ParameterNode	makeParameterNode(  )
					throws StandardException
	{
		ParameterNode	parm;
		DataValueDescriptor sdv = null;

		if ((paramDefaults != null) && (parameterNumber < paramDefaults.length))
		{
			sdv = (DataValueDescriptor) paramDefaults[parameterNumber];
		}

		parm = (ParameterNode) nodeFactory.getNode(
								C_NodeTypes.PARAMETER_NODE,
								ReuseFactory.getInteger(parameterNumber),
								sdv,
								getContextManager());

		parameterNumber++;
		parameterList.addElement(parm);

		return parm;
	}

	/**
	 * Looks up an unnamed parameter given its parameter number.
	 *
	 *	@param	paramNumber		Number of parameter in unnamed
	 *							parameter list.
	 *
	 *	@return	corresponding unnamed parameter.
	 *
	 */
	ParameterNode	lookupUnnamedParameter( int paramNumber )
	{
		ParameterNode		unnamedParameter;

		unnamedParameter = (ParameterNode) parameterList.elementAt( paramNumber );
		return unnamedParameter;
	}

	/**
	 * Translate a String containing a number into the appropriate type
	 * of Numeric node.
	 *
	 * @param num      the string containing the number
	 * @param intsOnly accept only integers (not decimal)
	 *
	 * @exception StandardException		Thrown on error
	 */
	NumericConstantNode getNumericNode(String num, boolean intsOnly)
		throws StandardException
	{
		ContextManager cm = getContextManager();

		// first, see if it might be an integer
		try
		{
			return (NumericConstantNode) nodeFactory.getNode(
										C_NodeTypes.INT_CONSTANT_NODE,
										new Integer(num),
										cm);
		}
		catch (NumberFormatException nfe)
		{
			// we catch because we want to continue on below
		}

		// next, see if it might be a long
		try
		{
			return (NumericConstantNode) nodeFactory.getNode(
										C_NodeTypes.LONGINT_CONSTANT_NODE,
										new Long(num),
										cm);
		}
		catch (NumberFormatException nfe)
		{
			if (intsOnly) {
				throw nfe;
			}
			// else we want to continue on below
		}

        NumericConstantNode ncn =
        (NumericConstantNode) nodeFactory.getNode(
                            C_NodeTypes.DECIMAL_CONSTANT_NODE,
                            num,
                            cm);
        if (ncn != null) {
            int precision = ncn.getTypeServices().getPrecision();
            if (precision > TypeCompiler.MAX_DECIMAL_PRECISION_SCALE)
				throw StandardException.newException(SQLState.DECIMAL_TOO_MANY_DIGITS);
        }
		return ncn;

	}
	/**
	 * Determine whether the current token represents one of
	 * the built-in aliases.
	 *
	 * @return	TRUE iff the current token names a built-in alias
	 */
	private boolean isBuiltInAlias()
	{
		boolean retval = false;

		switch (token.kind)
		{
		  case UCASE:
		  case LCASE:
		  case SQRT:
		  case LOCATE:
		  case ABS:
		  case ABSVAL:
		  case SUBSTR:
		  case MOD:
			retval = true;
			break;

		  default:
			retval = false;
			break;
		}


		return retval;
	}


	/**
	 * Determine whether the next sequence of tokens represents one of
	 * the common (built-in) datatypes.
	 *
	 * @param checkFollowingToken true if additonal token for NATIONAL
	 *        or LONG should be checked
	 * @return	TRUE iff the next set of tokens names a common datatype
	 */
	boolean commonDatatypeName(boolean checkFollowingToken)
	{
	    return commonDatatypeName(1, checkFollowingToken);
	}

	/**
	 * Determine whether the next sequence of tokens represents
	 * a datatype (could be a common datatype or a schema qualified UDT name).
	 *
	 * @return	TRUE iff the next set of tokens names a datatype
	 */
	boolean dataTypeCheck(int start)
	{
        if ( commonDatatypeName( start, false ) ) { return true; }

        boolean retval = true;

		switch (getToken(start).kind)
		{
		  case COMMA:
		  case LEFT_PAREN:
		  case RIGHT_PAREN:
			retval = false;
            break;
        }

        return retval;
    }

	/**
	 * Determine whether a sequence of tokens represents one of
	 * the common (built-in) datatypes.
	 *
	 * @param checkFollowingToken true if additonal token for NATIONAL
	 *        or LONG should be checked
	 * @param start starting token index of the sequence
	 * @return	TRUE iff the next set of tokens names a common datatype
	 */
	boolean commonDatatypeName(int start, boolean checkFollowingToken)
	{
		boolean retval = false;

		switch (getToken(start).kind)
		{
		  case CHARACTER:
		  case CHAR:
		  case VARCHAR:
		  case NVARCHAR:
		  case NCHAR:
		  case BIT:
		  case NUMERIC:
		  case DECIMAL:
		  case DEC:
		  case INTEGER:
		  case INT:
		  case SMALLINT:
		  case TINYINT:
		  case LONGINT:
		  case FLOAT:
		  case REAL:
		  case DATE:
		  case TIME:
		  case TIMESTAMP:
		  case BOOLEAN:
		  case DOUBLE:
		  case BLOB:
		  case CLOB:
		  case NCLOB:
		  case BINARY: // LARGE OBJECT
		  case XML:
		  case TEXT:
			retval = true;
			break;

		  case LONG:
			if (checkFollowingToken == true)
			{
				switch (getToken(start+1).kind)
				{
				  case VARCHAR:
				  case NVARCHAR:
				  case BINARY:
				  case VARBINARY:
				  case BIT:
					retval = true;
					break;
				}
				break;
			}
			else
			{
				retval = true;
				break;
			}

		  case NATIONAL:
			if (checkFollowingToken == true)
			{
				switch (getToken(start+1).kind)
				{
				  case CHAR:
				  case CHARACTER:
					retval = true;
					break;
				}
				break;
			}
			else
			{
				retval = true;
				break;
			}
		}

		return retval;
	}

	/**
	 * Get a DELETE node given the pieces.
	 *
	 *
	 *	@exception	StandardException
	 */
	 private StatementNode getDeleteNode(FromTable fromTable,
										 TableName tableName,
										 ValueNode whereClause,
										 Properties targetProperties)
		throws StandardException
	{
		FromList   fromList = (FromList) nodeFactory.getNode(
								C_NodeTypes.FROM_LIST,
								getContextManager());

		fromList.addFromTable(fromTable);

		SelectNode resultSet = (SelectNode) nodeFactory.getNode(
										C_NodeTypes.SELECT_NODE,
										null,
										null, 	/* AGGREGATE list */
										fromList, /* FROM list */
					  					whereClause, /* WHERE clause */
										null, /* GROUP BY list */
										null, /* having clause */
										null, /* window list */
										getContextManager());

		StatementNode retval =
			(StatementNode) nodeFactory.getNode(
							C_NodeTypes.DELETE_NODE,
							tableName,
							resultSet,
							targetProperties,
							getContextManager());

		setUpAndLinkParameters();

		return retval;
	}

	/**
	 * Get an UPDATE node given the pieces.
	 *
	 *
	 *	@exception	StandardException
	 */
	 private StatementNode getUpdateNode(FromTable fromTable,
										 TableName tableName,
										 ResultColumnList setClause,
										 ValueNode whereClause)
		throws StandardException
	{
		FromList   fromList = (FromList) nodeFactory.getNode(
								C_NodeTypes.FROM_LIST,
								getContextManager());

		fromList.addFromTable(fromTable);

		SelectNode resultSet = (SelectNode) nodeFactory.getNode(
										C_NodeTypes.SELECT_NODE,
										setClause, /* SELECT list */
										null, 	/* AGGREGATE list */
										fromList, /* FROM list */
					  					whereClause, /* WHERE clause */
										null, /* GROUP BY list */
										null, /* having clause */
										null, /* window list */
										getContextManager());

		StatementNode retval =
			(StatementNode) nodeFactory.getNode(
							C_NodeTypes.UPDATE_NODE,
							tableName,
							resultSet,
							getContextManager());

		setUpAndLinkParameters();

		return retval;
	}

     private StatementNode getUpdateNodeWithSub(FromTable fromTable, /* table to be updated */
                                         TableName tableName, /* table to be updated */
                                         ResultColumnList setClause, /* new values to ue for the update */
                                         ValueNode whereClause, /* where clause for outer update */
                                         ValueNode subQuery) /* inner source subquery for multi column syntax */
        throws StandardException
    {
        FromList   fromList = (FromList) nodeFactory.getNode(
                                C_NodeTypes.FROM_LIST,
                                getContextManager());

        fromList.addFromTable(fromTable);

        // Bring the subquery table(s) to the outer from list
        SelectNode innerSelect = (SelectNode)((SubqueryNode)subQuery).getResultSet();
        FromList innerFrom = innerSelect.getFromList();
        List innerFromEntries = innerFrom.getNodes();
        for (Object obj : innerFromEntries) {
            assert obj instanceof FromTable;
            fromList.addFromTable((FromTable)obj);
        }

        // Bring the subquery where clause to outer where clause
        ValueNode innerWhere = innerSelect.getWhereClause();
        ValueNode alteredWhereClause;
        if (whereClause != null) {
            alteredWhereClause = (ValueNode) getNodeFactory().getNode(
                C_NodeTypes.AND_NODE,
                whereClause, /* the one passed into this method */
                innerWhere,  /* the one pulled from subquery */
                getContextManager());
        } else {
            alteredWhereClause = innerWhere;
        }

        // Alter the passed in setClause to give it non-null expressions
        // and to point to subqjuery table.
        ResultColumnList innerRCL = innerSelect.getResultColumns();
        int inputSize = setClause.size();
        for (int index = 0; index < inputSize; index++)
        {
            ResultColumn rc = ((ResultColumn) setClause.elementAt(index));
            // String columnName = rc.getName();
            ResultColumn innerResultColumn = ((ResultColumn)innerRCL.elementAt(index));
            String innerColumnName = innerResultColumn.getName();
            if (innerColumnName != null) {
               // source is a case of single column
               ValueNode colRef = (ValueNode) getNodeFactory().getNode(
                    C_NodeTypes.COLUMN_REFERENCE,
                    innerColumnName,
                    ((FromTable)innerFromEntries.get(0)).getTableName(),
                    getContextManager());
               rc.setExpression(colRef);
            } else {
               // source is an expression
               rc.setExpression(innerResultColumn.getExpression());
            }
        }

        SelectNode resultSet = (SelectNode) nodeFactory.getNode(
            C_NodeTypes.SELECT_NODE,
            setClause, /* SELECT list */
            null,   /* AGGREGATE list */
            fromList, /* FROM list */
            alteredWhereClause, /* WHERE clause */
            null, /* GROUP BY list */
            null, /* having clause */
            null, /* window list */
            getContextManager());

        StatementNode retval =
            (StatementNode) nodeFactory.getNode(
                C_NodeTypes.UPDATE_NODE,
                tableName, /* target table for update */
                resultSet, /* SelectNode just created */
                getContextManager());

        ((UpdateNode)retval).setUpdateWithSubquery(true);

        setUpAndLinkParameters();

        return retval;
    }

    /**
     * Generate a trim operator node
     * @param trimSpec one of Leading, Trailing or Both.
     * @param trimChar the character to trim. Can be null in which case it defaults
     * to ' '.
     * @param trimSource expression to be trimmed.
     */
    private ValueNode getTrimOperatorNode(Integer trimSpec, ValueNode trimChar,
        ValueNode trimSource, ContextManager cm) throws StandardException
    {
        if (trimChar == null)
        {
        	trimChar = (CharConstantNode) nodeFactory.getNode(
							C_NodeTypes.CHAR_CONSTANT_NODE,
							" ",
							getContextManager());
        }
        return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.TRIM_OPERATOR_NODE,
							trimSource, // receiver
							trimChar,   // leftOperand.
							null,
							ReuseFactory.getInteger(TernaryOperatorNode.TRIM),
							trimSpec,
							cm == null ? getContextManager() : cm);
    }

    private boolean ansiTrimSpecFollows()
    {
        Token tPre = getToken(1);
        Token t = getToken(2);
        Token tPost = getToken(3);

        // In TRIM() function
        if (tPre.kind == LEFT_PAREN)
        {
            if (t.kind == LEADING || t.kind == TRAILING || t.kind == BOTH)
                return true;
            else if ((t.kind == L || t.kind == T || t.kind == B ) && tPost.kind != RIGHT_PAREN && tPost.kind != PERIOD)
                return true;
            else
                return false;
        }
        // In STRIP() function
        else if (tPre.kind == COMMA)
        {
            return (getToken(2).kind == LEADING || getToken(2).kind == L || getToken(2).kind == TRAILING || getToken(2).kind == T
                || getToken(2).kind == BOTH || getToken(2).kind == B);
        }
        else
            return false;
    }

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a remainingPredicate() rule.
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			remainingPredicate()
	 */
	private boolean remainingPredicateFollows()
	{
		boolean retval = false;

		switch (getToken(1).kind)
		{
		  case EQUALS_OPERATOR:
		  case NOT_EQUALS_OPERATOR:
		  case NOT_EQUALS_OPERATOR2: // !=
		  case LESS_THAN_OPERATOR:
		  case GREATER_THAN_OPERATOR:
		  case LESS_THAN_OR_EQUALS_OPERATOR:
		  case GREATER_THAN_OR_EQUALS_OPERATOR:
		  case IN:
		  case LIKE:
		  case BETWEEN:
		  	retval = true;
			break;

		  case NOT:
		  	switch (getToken(2).kind)
			{
			  case IN:
			  case LIKE:
			  case BETWEEN:
			  	retval = true;
			}
			break;
		}

		return retval;
	}


	/**
	 * Determine whether the next token is a DROP
	 *
	 * @return	TRUE iff the next token is DROP
	 */
	private boolean dropFollows()
	{
		if (getToken(1).kind == DROP)
		{ return true; }
		else { return false; }
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a escapedValueFunction().
	 *
	 * We check only for the punctuation here, because identifiers are
	 * very hard to check for in semantic lookahead.
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			escapedValueFunction()
	 */
	private boolean escapedValueFunctionFollows()
	{
		if (getToken(1).kind != LEFT_BRACE)
		{
			return false;
		}

		return getToken(2).kind == FN;
	}


    /**
       List of JDBC escape functions that map directly onto
       a function in the SYSFUN schema.
    */
	private static final String[] ESCAPED_SYSFUN_FUNCTIONS =
        {"ACOS", "ASIN", "ATAN", "ATAN2", "COS", "SIN", "TAN", "PI",
         "DEGREES", "RADIANS", "EXP", "LOG", "LOG10", "CEILING", "FLOOR",
         "SIGN", "RAND", "ROUND", "COT" };

    /**
       Convert a JDBC escaped function name to a function
       name in the SYSFUN schema. Returns null if no such
       function exists.
    */
	private String getEscapedSYSFUN(String name)
	{
	    name = StringUtil.SQLToUpperCase(name);

	    for (int i = 0; i < ESCAPED_SYSFUN_FUNCTIONS.length; i++)
	    {
	        if (ESCAPED_SYSFUN_FUNCTIONS[i].equals(name))
	            return name;
	    }
	    return null;
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a columnInvocation() rule.  columnInvocations start with
	 * [ [ id . ] id . ] id . id (
	 *
	 * We check only for the punctuation here, because identifiers are
	 * very hard to check for in semantic lookahead.
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			columnInvocation()
	 */
	private boolean columnMethodInvocationFollows()
	{
		int tokKind;

		// First token must not be a built-in function name that can be
		// followed immediately by a PERIOD. There are only a few of
		// these - most built-in functions have a LEFT_PAREN following
		// the function name.

		// if we run out of token, it's probably a syntax error,
		// in fact
		tokKind = getToken(1).kind;
		if ( tokKind == EOF ) { return false; }

		// disambiguate from named parameter reference
		if ( getToken(1).image.charAt(0) == '?' ) { return false; }

		if (tokKind == CURRENT_DATE ||
			tokKind == CURRENT_TIME ||
			tokKind == CURRENT_TIMESTAMP ||
			tokKind == NOW ||
			tokKind == CURRENT && (isDATETIME(getToken(2).kind)) )
		{
			return false;
		}

		// Second token must be a PERIOD
		if (getToken(2).kind != PERIOD)
		{
			return false;
		}

		// We have established that we start with " id . "
		tokKind = getToken(4).kind;
		if (tokKind == LEFT_PAREN)
		{
			// id.id(
			return true;
		}

		// Not id.id(, so 4th token must be PERIOD
		if (tokKind != PERIOD)
		{
			return false;
		}

		tokKind = getToken(6).kind;
		if (tokKind == LEFT_PAREN)
		{
			// id.id.id(
			return true;
		}

		// Not id.id.id(, so 6th token must be PERIOD
		if (tokKind != PERIOD)
		{
			return false;
		}

		tokKind = getToken(8).kind;
		if (tokKind == LEFT_PAREN)
		{
			// id.id.id.id(
			return true;
		}

		return false;
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of an aggregateNode()() rule.  aggregateNodes() start with one
	 * of the built-in aggregate names, or with an identifier followed
	 * by "( DISTINCT". A non-distinct user-defined aggregate invocation
	 * is treated as a staticMethodInvocationAlias() by the parser,
	 * and the binding phase figures out what it really is by looking
	 * at the data dictionary.
	 *
	 * We check only for the punctuation here, because identifiers are
	 * very hard to check for in semantic lookahead.
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			aggregateNode()
	 */
	private boolean aggregateFollows()
	{
		boolean retval = false;

		switch (getToken(1).kind)
		{
		  case MAX:
		  case AVG:
		  case MIN:
		  case SUM:
			// This is a built-in aggregate
			retval = true;
			break;

		  case COUNT:
			// COUNT is not a reserved word
			// This may eclipse use of COUNT as a function or a procedure that is probably what we want
		  	if (getToken(2).kind == LEFT_PAREN)
				retval = true;
		  default:
			// Not a built-in aggregate - assume the first token is an
			// identifier, and see whether it is followed by " ( DISTINCT "
		  	if (getToken(2).kind == LEFT_PAREN && getToken(3).kind == DISTINCT)
				retval = true;
			break;
		}

		return retval;
	}

    /**
	 * Return true if a builtin aggregate follows.
	 */
    private    boolean builtinAggregateFollows()
    {
		switch (getToken(1).kind)
		{
		  case MAX:
		  case AVG:
		  case MIN:
		  case SUM:
		  case COUNT:
			// This is a built-in aggregate
			return true;

		  default:
			return false;
		}
     }

	/**
	 * Return true if the following tokens are the start of a
     * distinct user defined aggregate invocation. These have
     * the form
     *
     * aggName( distinct
     *
     * or
     *
     *  schemaName.aggName( distinct
	 *
	 */
	private boolean distinctUDAFollows()
	{
        if ( builtinAggregateFollows() ) { return false; }

        if (
           (getToken(2).kind == LEFT_PAREN) &&
           (getToken(3).kind == DISTINCT)
           )
        { return true; }
        else if (
           (getToken(2).kind == PERIOD) &&
           (getToken(4).kind == LEFT_PAREN) &&
           (getToken(5).kind == DISTINCT)
           )
        { return true; }

		return false;
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning of a
	 * window or aggregate function.
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			window or aggregate function
	 */
	private boolean windowOrAggregateFunctionFollows()
	{
	    if ( distinctUDAFollows() ) { return false; }

		boolean retval = false;

		switch (getToken(1).kind) {

		case ROWNUMBER:
		case RANK:
		case DENSERANK:
		case LASTVALUE:
		case FIRSTVALUE:
		case LEAD:
		case LAG:

		// case PERCENT_RANK:
		// case CUME_DIST:

			retval = true;
			break;

		default:
			retval = aggregateFollows();
			break;
		}

		return retval;
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a miscBuiltins().
	 *
	 * We check only for the punctuation here, because identifiers are
	 * very hard to check for in semantic lookahead.
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			aggregateNode()
	 */
	private boolean miscBuiltinFollows()
	{
		boolean retval = false;
		int tokKind = getToken(1).kind;

		if (getToken(0).kind == CALL)
			retval = true;

		switch (tokKind)
		{
		  case GET_CURRENT_CONNECTION:
		  case CURRENT_DATE:
		  case CURRENT_TIME:
		  case CURRENT_TIMESTAMP:
		  case NOW:
		  	retval = true;
			break;

		  case CURRENT:
			if (isDATETIME(getToken(2).kind))
		  		retval = true;
			break;

		  case CAST:
		  case LEFT_PAREN:
		  	retval = false;
			break;

		  default:
		    if (getToken(2).kind == LEFT_PAREN)
				retval = true;
			break;
		}

		return retval;
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a subquery. A subquery can begin with an arbitrary number of
	 * left parentheses, followed by either SELECT or VALUES.
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			subquery.
	 */
	private boolean subqueryFollows()
	{
		int tokKind;
		boolean retval = false;

		for (int i = 1; true; i++)
		{
			tokKind = getToken(i).kind;
			if (tokKind == LEFT_PAREN)
			{
				// A subquery can start with an arbitrary number of left
				// parentheses.
				continue;
			}
			else if (tokKind == SELECT || tokKind == VALUES)
			{
				// If the first token we find after all the left parentheses
				// is SELECT or VALUES, it's a subquery.
				retval = true;
				break;
			}
			else
			{
				// If the first token we find after all the left parentheses
				// is neither SELECT nor VALUES, it's not a subquery.
				break;
			}
		}

		return retval;
	}



    /**
     * Determine if we are seeing an offsetClause or the identifier OFFSET
     * (Derby does not make it a reserved word).  "n" must be an integer
     * literal or a dynamic parameter specification.
     *
     * @return true if it is an offsetClause.
     */
    private boolean seeingOffsetClause()
    {
        int nesting = 0;

        // Token number, i == 1: OFFSET
        int i = 2;

        int tokKind = getToken(i).kind;

        // check for integer literal or ? followed by ROW(S)
        if (tokKind == PLUS_SIGN ||
            tokKind == MINUS_SIGN) {

            tokKind = getToken(++i).kind;

            if (tokKind == EXACT_NUMERIC) {

                tokKind = getToken(++i).kind;

                return (tokKind == ROW ||
                        tokKind == ROWS);
            }
        } else if (tokKind == EXACT_NUMERIC ||
                   tokKind == QUESTION_MARK) {

            tokKind = getToken(++i).kind;

            return (tokKind == ROW ||
                    tokKind == ROWS);
        }

        return false;
    }


	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a rowValueConstructorList. A rowValueConstructorList is a comma-
	 * separated list of expressions enclosed in parentheses. This presents
	 * special problems, because an expression be nested within an
	 * arbitrary number of parentheses. To determine whether a left
	 * parenthesis introduces a rowValueConstructorList or an expression,
	 * we need to find the closing parenthesis, and determine whether
	 * the next token is a comma.
	 *
	 * For example, the following is a rowValueConstructorList:
	 *
	 *		(((1)), 2)
	 *
	 * and the following is just an expression:
	 *
	 *		(((1)))
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			subquery.
	 */
	private boolean rowValueConstructorListFollows()
	{
		int nesting;
		int bracketNesting = 0;
		boolean retval = false;

		// A rowValueConstructorList starts with a left parenthesis
		if (getToken(1).kind == LEFT_PAREN)
		{
			// Keep track of the nesting of parens while looking ahead
			nesting = 1;
			for (int i = 2; true; i++)
			{
				int tokKind = getToken(i).kind;

				// Special case for NULL/DEFAULT because they are not allowed in
				// a parenthesized expression, so (null)/(default) must be seen
				// as a rowValueConstructorList with one element.
				if (i == 2 && (tokKind == NULL || tokKind == _DEFAULT))
				{
					retval = true;
					break;
				}

				// There must be a COMMA at nesting level 1 (i.e. outside of
				// the first expression) for it to be a rowValueConstructorList
				if (nesting == 1 && tokKind == COMMA && bracketNesting == 0)
				{
					retval = true;
					break;
				}

				// If we run out of tokens before finding the last closing
				// parenthesis, it's not a rowValueConstructorList (it's
				// probably a syntax error, in fact)
				if (tokKind == EOF)
				{
					break;
				}

				// Increase the nesting for each (, and decrease it for each )
				if (tokKind == LEFT_PAREN)
				{
					nesting++;
				}
				else if (tokKind == RIGHT_PAREN)
				{
					nesting--;
				}

                // Increase the nesting for each (, and decrease it for each )
                if (tokKind == LEFT_BRACKET)
                {
                    bracketNesting++;
                }
                else if (tokKind == RIGHT_BRACKET)
                {
                    bracketNesting--;
                }


				// Don't look any farther than the last closing parenthesis
				if (nesting == 0)
				{
					break;
				}
			}
		}

		return retval;
	}

	/**
	 * Determine whether the next token is the beginning of a propertyList().
	 * A properties list is the comment "--db-properties" followed by a
	 * dot-separated list, followed by an =, followed by a value all on that
	 * comment line. This means that the comment should start with the word
	 * "db-properties".
	 *
	 * @return	TRUE iff the next token is db-properties
	 */
	private boolean splicePropertiesListFollows()
	{
		return
			getToken(1).kind == SPLICEDASHPROPERTIES;
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a newInvocation(). A newInvocation() begins with the word "new"
	 * followed by a dot-separated list of identifiers, followed
	 * by a left parenthesis.
	 *
	 * @param startToken	Token to look for new at
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			newInvocation().
	 */
	private boolean newInvocationFollows(int startToken)
	{
		boolean retval = false;

		// newInvocation() starts with the word "new"
		if (getToken(startToken).kind == NEW)
		{
			// Look at every other token. Ignore the identifiers, because
			// they are hard to test for.
			for (int i = 2 + startToken; true; i += 2)
			{
				int tokKind = getToken(i).kind;

				// If we find a left parenthesis without any intervening
				// cruft, we have found a newInvocation()
				if (tokKind == LEFT_PAREN)
				{
					retval = true;
					break;
				}
				else if (tokKind != PERIOD)
				{
					// Anything other than a PERIOD is "cruft"
					break;
				}
			}
		}

		return retval;
	}
	/**
	 * Determine whether the next sequence of tokens is a class name
	 *
	 * @return	TRUE iff the next set of tokens is the java class name
	 */
	boolean javaClassFollows()
	{
		boolean retval = false;

		// Look at every other token. Ignore the identifiers, because
		// they are hard to test for.
		for (int i = 2; true; i += 2)
		{
			int tokKind = getToken(i).kind;

			// If we find a '::' without any intervening
			// cruft, we have found a javaClass
			if (tokKind == DOUBLE_COLON)
			{
				retval = true;
				break;
			}
			else if (tokKind != PERIOD)
			{
				// Anything other than a PERIOD is "cruft"
				break;
			}
		}

		return retval;
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a FROM newInvocation(). A FROM newInvocation() begins with the words "from new"
	 * followed by a dot-separated list of identifiers, followed
	 * by a left parenthesis.
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			FROM newInvocation().
	 */
	private boolean fromNewInvocationFollows()
	{
		boolean retval = false;

		// FROM newInvocation() starts with the words "from new"
		return (getToken(1).kind == FROM && newInvocationFollows(2));
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of a joinedTableExpression(). A joinedTableExpression() begins
	 * with one of:
	 *
	 *	JOIN
	 *	INNER JOIN
	 *	CROSS JOIN
	 *	LEFT OUTER JOIN
	 *	RIGHT OUTER JOIN
	 *	NATURAL [ { RIGHT | LEFT } [ OUTER ] | INNER ] JOIN
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			joinedTableExpression().
	 */
	private boolean joinedTableExpressionFollows()
	{
		boolean retval = false;

		int tokKind1 = getToken(1).kind;
		int tokKind2 = getToken(2).kind;

		if (tokKind1 == JOIN)
		{
			retval = true;
		}
		else if (tokKind1 == INNER && tokKind2 == JOIN)
		{
			retval = true;
		}
		else if (tokKind1 == CROSS && tokKind2 == JOIN)
		{
			retval = true;
		}
		else if (tokKind1 == NATURAL)
		{
			retval = true;
		}
		else if ((tokKind1 == LEFT || tokKind1 == RIGHT) && tokKind2 == OUTER)
		{
			if (getToken(3).kind == JOIN)
			{
				retval = true;
			}
		}
		else if ((tokKind1 == LEFT || tokKind1 == RIGHT) && tokKind2 == JOIN)
		{
			retval = true;
		}

		return retval;
	}

	/**
	 * Translate a token for the name of a built-in aggregate to a String
	 * containing an aggregate name.
	 */
	private static String aggName(Token token)
	{
		String	retval = null;

		switch (token.kind)
		{
		  case MAX:
		  	retval = "MAX";
			break;

		  case AVG:
		    retval = "AVG";
			break;

		  case MIN:
		    retval = "MIN";
			break;

		  case SUM:
		    retval = "SUM";
			break;

		  case COUNT:
		    retval = "COUNT";
			break;

		  default:
		  	if (SanityManager.DEBUG)
			{
				SanityManager.THROWASSERT("Unexpected token type in aggName: " +
											token.kind);
			}
			break;
		}

		return retval;
	}

	/**
	 * Translate a token for the name of a built-in aggregate to an
	 * aggregate definition class.
	 */
	private static Class aggClass(Token token)
	{
		Class	retval = null;

		switch (token.kind)
		{
		  case MAX:
		  case MIN:
		  	retval = MaxMinAggregateDefinition.class;
			break;

		  case AVG:
		  case SUM:
		  	retval = SumAvgAggregateDefinition.class;
			break;

		  case COUNT:
		    retval = CountAggregateDefinition.class;
			break;

		  default:
		  	if (SanityManager.DEBUG)
			{
				SanityManager.THROWASSERT("Unexpected token type in aggClass: "
											+ token.kind);
			}
			break;
		}

		return retval;
	}

	/**
	 * Determine whether the next sequence of tokens can be the beginning
	 * of another element in a PROPERTY list. These elements are of the
	 * form:
	 *
	 *		COMMA dot.separated.list = ...
	 *
	 * Look for the COMMA, the dots in the dot-separated list, and the =
	 *
	 * @return	TRUE iff the next set of tokens is the beginning of a
	 *			another element in a PROPERTY list.
	 */
	private boolean anotherPropertyFollows()
	{
		boolean retval = false;

		// Element must start with COMMA
		if (getToken(1).kind == COMMA)
		{
			// Rest of element is dot-separated list with = at end
			int i = 3;
			int tokKind;
			do
			{
				tokKind = getToken(i).kind;

				// If we've found nothing but PERIODs until the EQUALS_OPERATOR
				// it is the beginning of another property list element.
				if (tokKind == EQUALS_OPERATOR)
				{
					retval = true;
					break;
				}

				i += 2;
			} while (tokKind == PERIOD);
		}

		return retval;
	}

    /**
     * Get one of the several types of create alias nodes.
     *
     * @param aliasName	The name of the alias
     * @param targetName TableName for target, or the full path/method name
     * @param aliasSpecificInfo	 Information specific to the type of alias being created.
     * @param aliasType	The type of alias to create
     * @return      A CreateAliasNode matching the given parameters
     *
     * @exception StandardException		Thrown on error
     */
     StatementNode
     getCreateAliasNode(
        TableName aliasName,
    	Object targetName,
    	Object aliasSpecificInfo,
        char aliasType) throws StandardException
     {
        String methodName = null;

        if (
            (aliasType != AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR) &&
            (aliasType != AliasInfo.ALIAS_TYPE_UDT_AS_CHAR) &&
            (aliasType != AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR)
            )
        {
            int lastPeriod;
            String fullStaticMethodName = (String) targetName;
            int paren = fullStaticMethodName.indexOf('(');
            if (paren == -1) {
                // not a Java signature - split based on last period
                lastPeriod = fullStaticMethodName.lastIndexOf('.');
            } else {
                // a Java signature - split on last period before the '('
                lastPeriod = fullStaticMethodName.substring(0, paren).lastIndexOf('.');
            }
            if (lastPeriod == -1 || lastPeriod == fullStaticMethodName.length()-1) {
                throw StandardException.newException(SQLState.LANG_INVALID_FULL_STATIC_METHOD_NAME, fullStaticMethodName);
            }
            String javaClassName = fullStaticMethodName.substring(0, lastPeriod);
            methodName = fullStaticMethodName.substring(lastPeriod + 1);
            targetName = javaClassName;
        }

        return new CreateAliasNode(
            aliasName,
            targetName,
            methodName,
            aliasSpecificInfo,
            aliasType,
            cm );
    }
	/**
	 * Get one of the several types of create alias nodes.
	 *
	 * @param aliasName	The name of the alias
	 * @param targetName TableName for target, or the full path/method name
	 * @param aliasSpecificInfo	 Information specific to the type of alias being created.
	 * @param aliasType	The type of alias to create
	 * @param delimitedIdentifier	Whether or not to treat the class name
	 *								as a delimited identifier if trying to
	 *								resolve it as a class alias.
	 *
	 * @return	A CreateAliasNode matching the given parameters
	 *
	 * @exception StandardException		Thrown on error
	 */
	StatementNode
	getCreateAliasNode( // Used for Stored Procedure
		Object aliasName,
		Object targetName,
		Object aliasSpecificInfo,
		char aliasType,
		Boolean delimitedIdentifier)
		throws StandardException
	{
        int nodeType = C_NodeTypes.CREATE_ALIAS_NODE;
        String methodName = null;

        if (
            (aliasType != AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR) &&
            (aliasType != AliasInfo.ALIAS_TYPE_UDT_AS_CHAR) &&
            (aliasType != AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR)
            )
        {
            if (((String)((Object[]) aliasSpecificInfo)[CreateAliasNode.LANGUAGE]).equals("PYTHON"))
            {
                // For Python Stored Procedure
                methodName = "INVALID_METHOD_NAME";
                targetName = (String) targetName;  // The script is stored inside targetName
            }
            else
            {
                // For Original Java Stored Procedure
                int lastPeriod;
                String fullStaticMethodName = (String) targetName;
                int paren = fullStaticMethodName.indexOf('(');
                if (paren == -1) {
                    // not a Java signature - split based on last period
                    lastPeriod = fullStaticMethodName.lastIndexOf('.');
                } else {
                    // a Java signature - split on last period before the '('
                    lastPeriod = fullStaticMethodName.substring(0, paren).lastIndexOf('.');
                }
                if (lastPeriod == -1 || lastPeriod == fullStaticMethodName.length()-1) {
                    throw StandardException.newException(SQLState.LANG_INVALID_FULL_STATIC_METHOD_NAME, fullStaticMethodName);
                }
                String javaClassName = fullStaticMethodName.substring(0, lastPeriod);
                methodName = fullStaticMethodName.substring(lastPeriod + 1);
                targetName = javaClassName;
            }
        }

        return (StatementNode) getNodeFactory().getNode(
            nodeType,
            aliasName,
            targetName,
            methodName,
            aliasSpecificInfo,
            new Character(aliasType),
            delimitedIdentifier,
            cm );
	}

	/**
		Create a node for the drop alias/procedure call.
	*/
	StatementNode
	dropAliasNode(Object aliasName, char type) throws StandardException
	{

		StatementNode stmt = (StatementNode) nodeFactory.getNode(
								C_NodeTypes.DROP_ALIAS_NODE,
								aliasName,
								new Character(type),
								getContextManager());

		return stmt;
	}

    /**
     * Get a substring node from
     *      - the string
     *      - the start position
     *      - the length
     *      - a boolean values for specifying the kind of substring function
     * @exception StandardException  Thrown on error
     */
    ValueNode getSubstringNode( ValueNode stringValue, ValueNode startPosition,
                         ValueNode length, Boolean boolVal ) throws StandardException
    {
        return (ValueNode) nodeFactory.getNode(
	    					C_NodeTypes.SUBSTRING_OPERATOR_NODE,
		    				stringValue,
			    			startPosition,
				    		length,
				    		ReuseFactory.getInteger(TernaryOperatorNode.SUBSTRING),
					    	null,
						    getContextManager());
    }

    ValueNode getRightOperatorNode(ValueNode stringValue, ValueNode length) throws StandardException
    {
        return (ValueNode) nodeFactory.getNode(
                C_NodeTypes.RIGHT_OPERATOR_NODE,
                stringValue,
                length,
                null,
                ReuseFactory.getInteger(TernaryOperatorNode.RIGHT),
                null,
                getContextManager());
    }

    /**
     * Gets a left() node from
     *      - the string
     *      - the length to take
     *      - the padding character
     * @exception StandardException  Thrown on error
     */
    ValueNode getLeftOperatorNode(ValueNode stringValue, ValueNode length) throws StandardException
    {
        return (ValueNode) nodeFactory.getNode(
                C_NodeTypes.LEFT_OPERATOR_NODE,
                stringValue,
                length,
                null,
                ReuseFactory.getInteger(TernaryOperatorNode.LEFT),
                null,
                getContextManager());
    }

    /**
     * Gets a replace node based on the specified arguments.
     * @param stringValue the input string
     * @param the from sub string
     * @param the to string
     * @exception StandardException thrown on error
     */
    ValueNode getReplaceNode(
        ValueNode stringValue,
        ValueNode fromString,
        ValueNode toString) throws StandardException
    {
        return (ValueNode) nodeFactory.getNode(
	    					C_NodeTypes.REPLACE_OPERATOR_NODE,
		    				stringValue,
			    			fromString,
			    			toString,
				    		ReuseFactory.getInteger(TernaryOperatorNode.REPLACE),
					    	null,
						    getContextManager());
    }

    final public TableName
    qualifiedName(int id_length_limit) throws ParseException, StandardException
    {
	return qualifiedName( C_NodeTypes.TABLE_NAME, id_length_limit);
    }

    private void initStatement( String statementSQLText, Object[] paramDefaults)
        throws StandardException
    {
        /* Do per-statement initialization here */
        parameterNumber = 0;
       this.statementSQLText = statementSQLText;
        this.paramDefaults = paramDefaults;
        nodeFactory = getNodeFactory();
        initUnnamedParameterList();
    } // End of initStatement

    private ValueNode getJdbcIntervalNode( int intervalType) throws StandardException
    {
        return (ValueNode) nodeFactory.getNode( C_NodeTypes.INT_CONSTANT_NODE,
                                                ReuseFactory.getInteger( intervalType),
                                                getContextManager());
    }

    /**
        Check to see if the required claues have been added
        to a procedure or function defintion.

        @param required int array of require clauses
        @param  clauses the array of declared clauses.
    */
    void checkRequiredRoutineClause(int[] required, Object[] clauses)
        throws StandardException
    {
        for (int i = 0; i < required.length; i++)
        {
            int re = required[i];
            if (clauses[re] == null)
            {
                throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR,
				 ROUTINE_CLAUSE_NAMES[re]);
		    }
		}
    }

	boolean isPrivilegeKeywordExceptTrigger(int tokenKind) {
		return (tokenKind == SELECT ||
				tokenKind == DELETE ||
				tokenKind == INSERT ||
				tokenKind == UPDATE ||
				tokenKind == REFERENCES ||
				tokenKind == MODIFY ||
				tokenKind == ACCESS ||
				tokenKind == EXECUTE ||
				tokenKind == USAGE ||
				tokenKind == ALL);
	}


	/**
	 * Construct a TableElementNode of type
	 * C_NodeTypes.MODIFY_COLUMN_DEFAULT_NODE.
	 *
	 * @param defaultNode the new default value node
	 * @param columnName  the name of the column to be altered
	 * @param autoIncrementInfo autoincrement information collected, if any.
	 *
	 * @return the new node constructed
	 * @exception StandardException standard error policy
	 */
	TableElementNode wrapAlterColumnDefaultValue(
		ValueNode defaultNode,
		String columnName,
		long[] autoIncrementInfo) throws StandardException {

		if (autoIncrementInfo
				[QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX] == 0) {
			autoIncrementInfo = null;
		}

		return (TableElementNode) nodeFactory.getNode(
			C_NodeTypes.MODIFY_COLUMN_DEFAULT_NODE,
			columnName,
			defaultNode,
			null,
			autoIncrementInfo,
			getContextManager());
	}

	private boolean
		isTableValueConstructor(ResultSetNode expression)
			throws StandardException {

		return expression instanceof RowResultSetNode ||
			(expression instanceof UnionNode &&
			 ((UnionNode)expression).tableConstructor());
	}

    /**
     * Construct a new join node.
     *
     * @param leftRSN the left side of the join
     * @param rightRSN the right side of the join
     * @param onClause the ON clause, or null if there is no ON clause
     * @param usingClause the USING clause, or null if there is no USING clause
     * @param joinType the type of the join (one of the constants INNERJOIN,
     *                 LEFTOUTERJOIN or RIGHTOUTERJOIN in JoinNode)
     * @return a new join node
     */
    private JoinNode newJoinNode(ResultSetNode leftRSN, ResultSetNode rightRSN,
                         ValueNode onClause, ResultColumnList usingClause,
                         int joinType)
    throws StandardException
    {
        switch(joinType)
        {
            case JoinNode.INNERJOIN:
                return (JoinNode) nodeFactory.getNode(
                        C_NodeTypes.JOIN_NODE,
                        leftRSN,
                        rightRSN,
                        onClause,
                        usingClause,
                        null,
                        null,
                        null,
                        getContextManager());

            case JoinNode.LEFTOUTERJOIN:
                return (JoinNode) nodeFactory.getNode(
                        C_NodeTypes.HALF_OUTER_JOIN_NODE,
                        leftRSN,
                        rightRSN,
                        onClause,
                        usingClause,
                        Boolean.FALSE,
                        null,
                        getContextManager());

            case JoinNode.RIGHTOUTERJOIN:
                return (JoinNode) nodeFactory.getNode(
                        C_NodeTypes.HALF_OUTER_JOIN_NODE,
                        leftRSN,
                        rightRSN,
                        onClause,
                        usingClause,
                        Boolean.TRUE,
                        null,
                        getContextManager());

            default:
                if (SanityManager.DEBUG)
                {
                    SanityManager.THROWASSERT("Unexpected joinType: " + joinType);
                }
                return null;
        }
    }

    private void setWindowFrameMode(QueryTreeNode node, WindowFrameDefinition.FrameMode mode) {
        WindowDefinitionNode wdn = (WindowDefinitionNode) node;
        WindowFrameDefinition frame = wdn.getFrameExtent();
        frame.setFrameMode(mode);

    }

    /**
     * For temporary table validation and creation.
     */
	private StatementNode verifySyntaxAndCreate(Object[] declareTableClauses,
												TableName tableName,
												TableElementList tableElementList) throws StandardException {
		// NOT LOGGED is allways true
		// if ON COMMIT behavior not explicitly specified in DECLARE command, default to ON COMMIT PRESERVE ROWS
		if (declareTableClauses[1] == null) {
            declareTableClauses[1] = Boolean.FALSE;
		} else if (declareTableClauses[1] == Boolean.TRUE) {
		    // ON COMMIT DELETE ROWS is not supported
		    throw StandardException.newException(SQLState.LANG_TEMP_TABLE_DELETE_ROWS_NO_SUPPORTED, "COMMIT");
		}
		// if ON ROLLBACK behavior not explicitly specified in DECLARE command, default to ON ROLLBACK DELETE ROWS
		if (declareTableClauses[2] == Boolean.TRUE) {
            // ON ROLLBACK DELETE ROWS is not supported
            throw StandardException.newException(SQLState.LANG_TEMP_TABLE_DELETE_ROWS_NO_SUPPORTED, "ROLLBACK");
        } else {
            // set it to TRUE anyway. too much expects is to be so dispite it never working
            declareTableClauses[2] = Boolean.TRUE;
        }
		return (StatementNode) nodeFactory.getNode(
								C_NodeTypes.CREATE_TABLE_NODE,
								tableName,
								tableElementList,
								(Properties)null,
								(Boolean) declareTableClauses[1],
								(Boolean) declareTableClauses[2],
								getContextManager());
	}

	private ValueNode createTruncateTypeNode(ValueNode operandNode, ValueNode truncValue) throws StandardException {
        ValueNode truncateOperand = null;
        if (operandNode == null) {
            throw StandardException.newException(SQLState.LANG_TRUNCATE_NULL_OPERAND);
        } else if (operandNode instanceof UnaryOperatorNode) {
            // date... probably
            String opStr = ((UnaryOperatorNode)operandNode).getOperatorString();
            if ("date".equals(opStr)) {
                truncateOperand = (ValueNode) nodeFactory.getNode(
                                                                C_NodeTypes.UNARY_DATE_TIMESTAMP_OPERATOR_NODE,
                                                                operandNode,
                                                                DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.DATE),
                                                                getContextManager());
            } else if ("timestamp".equals(opStr)) {
                truncateOperand = (ValueNode) nodeFactory.getNode(
                                                                C_NodeTypes.UNARY_DATE_TIMESTAMP_OPERATOR_NODE,
                                                                operandNode,
                                                                DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.TIMESTAMP),
                                                                getContextManager());
            }
        } else if (operandNode instanceof BinaryOperatorNode) {
            // timestamp... likely
            String opStr = ((BinaryOperatorNode)operandNode).getOperatorString();
            if ("timestamp".equals(opStr)) {
                truncateOperand = (ValueNode) nodeFactory.getNode(
                                                                C_NodeTypes.UNARY_DATE_TIMESTAMP_OPERATOR_NODE,
                                                                operandNode,
                                                                DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.TIMESTAMP),
                                                                getContextManager());
            }
        } else if (operandNode instanceof NumericConstantNode) {
            // truncate numberic
            // must have 2 numeric args - 1st is decimal operand, not null; 2nd is integer truncValue, not null

            // default to zero if truncValue null or not numeric
            if (! (truncValue instanceof NumericConstantNode)) {
                truncValue = (NumericConstantNode) nodeFactory.getNode(C_NodeTypes.INT_CONSTANT_NODE,
                                                                    0,  // default to zero
                                                                    getContextManager());
            }

            truncateOperand = operandNode;
        } else if (operandNode instanceof ColumnReference) {
            // truncating a column in a table. could be type date, timestamp or decimal
            // this is enforced in TruncateOperatorNode after binding so that we know all types
            truncateOperand = operandNode;
        } else if (operandNode instanceof CurrentDatetimeOperatorNode) {
            truncateOperand = operandNode;
        }

        if (truncateOperand == null) {
            throw StandardException.newException(SQLState.LANG_TRUNCATE_UNKNOWN_TYPE_OPERAND, operandNode);
        }

        return (ValueNode) nodeFactory.getNode(
                                              C_NodeTypes.TRUNC_NODE,
                                              truncateOperand,
                                              truncValue,
                                              getContextManager());
	}

    /**
     * Used by create table with data, this method parses the table population query. We pull out what's between
     * the square brackets below []
     * CREATE TABLE X AS [SELECT A, B, C FROM Y] WITH DATA
     */
   public String parseQueryString(String src) {
        boolean inSection = false;
        StringBuilder buf = new StringBuilder();

        // Use a non-printable character as an end-of-hint marker.
        char endOfHintMarker = 0x01;

        // Strip out C-style comments:   /* This type of comment */
        src = src.replaceAll("(/\\*.*?\\*/)", " ");

        // Strip out comments starting with --, except --splice-properties hints.
        src = src.replaceAll("(--)(?i)(?!splice-properties)(.*?)(\\n|\\r|\\r\\n)", " ");

        // Add an end-of-hint marker to a --splice-properties hint, so we know where to
        // place the newline later on.
        src = src.replaceAll("(--)(?i)(?=splice-properties)(.*?)(\\n|\\r|\\r\\n)",
                               "$1$2$3"+Character.toString(endOfHintMarker));

        for (String part : src.split("\\s+")) {
            if (part.charAt(0) == endOfHintMarker)
                part = "\n" + part.substring(1);
            if (inSection && part.equalsIgnoreCase("with")) {
                inSection = false;
            } else if (inSection) {
                buf.append(part).append(" ");
            } else if (! inSection && part.equalsIgnoreCase("as")) {
                inSection = true;
            }
        }
        if (buf.length() > 1) {
            // remove the trailing space
            buf.setLength(buf.length()-1);
        }
           return buf.toString();
   }

}

PARSER_END(SQLParser)

TOKEN_MGR_DECLS :
{
	void	CommonTokenAction(Token t)
	{
		t.beginOffset = input_stream.getBeginOffset();
		t.endOffset = input_stream.getEndOffset();
	}

	int commentNestingDepth = 0;
}

SKIP :
{	/* white space */
	  " "
	| "\t"
	| "\n"
	| "\r"
}

MORE :
{
	"/*" : IN_BRACKETED_COMMENT
}

<IN_BRACKETED_COMMENT> MORE :
{
	"/*" { commentNestingDepth = 1; } : IN_NESTED_BRACKETED_COMMENT
}

<IN_BRACKETED_COMMENT> SKIP :
{
	"*/" : DEFAULT
}

<IN_NESTED_BRACKETED_COMMENT> MORE :
{
	"/*" { commentNestingDepth++; }
}

<IN_NESTED_BRACKETED_COMMENT> MORE :
{
	"*/"
	{ commentNestingDepth--; SwitchTo(commentNestingDepth == 0 ? IN_BRACKETED_COMMENT : IN_NESTED_BRACKETED_COMMENT); }
}

<IN_BRACKETED_COMMENT,IN_NESTED_BRACKETED_COMMENT> MORE :
{
	< ~[] >
}

SKIP :
{	/* comments */
	"--" : IN_COMMENT
}

<IN_COMMENT> SKIP :
{	/* white space */
	  " "
	| "\t"
}

/*
	Check if the comment characters -- are followed by DERBY-PROPERTIES
	token.

	If yes, then this comment is providing user-supplied optimizer
	overrides. There should be keyname=value [,keyname=value] pairs
	after -- DERBY-PROPERTIES otherwise throw an exception. These
	optimier overrides should be used in correct context only,
	otherwise, the parser will throw an exception.

	If this comment does not start with DERBY-PROPERTOIES, then it is
	just a regular comment. Skip the comment and move on to the next line.
 */
<IN_COMMENT> MORE [IGNORE_CASE]:
{
"S" : LOOKFOR_SP
|
<("\n"|"\r"|"\r\n")?> : DEFAULT
|
<NOT_S : (~["S"])> : IT_IS_NOT_SPLICEPROPERTIES_COMMENT
}

<LOOKFOR_SP> MORE [IGNORE_CASE]:
{
"P" : LOOKFOR_SPL
|
<("\n"|"\r"|"\r\n")?> : DEFAULT
|
<NOT_SP : (~["P"])> : IT_IS_NOT_SPLICEPROPERTIES_COMMENT
}

<LOOKFOR_SPL> MORE [IGNORE_CASE]:
{
"L" : LOOKFOR_SPLI
|
<("\n"|"\r"|"\r\n")?> : DEFAULT
|
<NOT_SPL : (~["L"])> : IT_IS_NOT_SPLICEPROPERTIES_COMMENT
}

<LOOKFOR_SPLI> MORE [IGNORE_CASE]:
{
"I" : LOOKFOR_SPLIC
|
<("\n"|"\r"|"\r\n")?> : DEFAULT
|
<NOT_SPLI : (~["I"])> : IT_IS_NOT_SPLICEPROPERTIES_COMMENT
}

<LOOKFOR_SPLIC> MORE [IGNORE_CASE]:
{
"C" : LOOKFOR_SPLICE
|
<("\n"|"\r"|"\r\n")?> : DEFAULT
|
<NOT_SPLIC : (~["C"])> : IT_IS_NOT_SPLICEPROPERTIES_COMMENT
}

<LOOKFOR_SPLICE> MORE [IGNORE_CASE]:
{
"E" : LOOKFOR_SPLICEDASH
|
<("\n"|"\r"|"\r\n")?> : DEFAULT
|
<NOT_SPLICE : (~["E"])> : IT_IS_NOT_SPLICEPROPERTIES_COMMENT
}

<LOOKFOR_SPLICEDASH> MORE [IGNORE_CASE]:
{
"-" : LOOKFOR_SPLICEDASHP
|
<("\n"|"\r"|"\r\n")?> : DEFAULT
|
<NOT_SPLICEDASH : (~["-"])> : IT_IS_NOT_SPLICEPROPERTIES_COMMENT
}

<LOOKFOR_SPLICEDASHP> MORE [IGNORE_CASE]:
{
"P" : LOOKFOR_SPLICEDASHPR
|
<("\n"|"\r"|"\r\n")?> : DEFAULT
|
<NOT_SPLICEDASHP : (~["P"])> : IT_IS_NOT_SPLICEPROPERTIES_COMMENT
}

<LOOKFOR_SPLICEDASHPR> MORE [IGNORE_CASE]:
{
"R" : LOOKFOR_SPLICEDASHPRO
|
<("\n"|"\r"|"\r\n")?> : DEFAULT
|
<NOT_SPLICEDASHPR : (~["R"])> : IT_IS_NOT_SPLICEPROPERTIES_COMMENT
}

<LOOKFOR_SPLICEDASHPRO> MORE [IGNORE_CASE]:
{
"O" : LOOKFOR_SPLICEDASHPROP
|
<("\n"|"\r"|"\r\n")?> : DEFAULT
|
<NOT_SPLICEDASHPRO : (~["O"])> : IT_IS_NOT_SPLICEPROPERTIES_COMMENT
}

<LOOKFOR_SPLICEDASHPROP> MORE [IGNORE_CASE]:
{
"P" : LOOKFOR_SPLICEDASHPROPE
|
<("\n"|"\r"|"\r\n")?> : DEFAULT
|
<NOT_SPLICEDASHPROP : (~["P"])> : IT_IS_NOT_SPLICEPROPERTIES_COMMENT
}

<LOOKFOR_SPLICEDASHPROPE> MORE [IGNORE_CASE]:
{
"E" : LOOKFOR_SPLICEDASHPROPER
|
<("\n"|"\r"|"\r\n")?> : DEFAULT
|
<NOT_SPLICEDASHPROPE : (~["E"])> : IT_IS_NOT_SPLICEPROPERTIES_COMMENT
}

<LOOKFOR_SPLICEDASHPROPER> MORE [IGNORE_CASE]:
{
"R" : LOOKFOR_SPLICEDASHPROPERT
|
<("\n"|"\r"|"\r\n")?> : DEFAULT
|
<NOT_SPLICEDASHPROPER : (~["R"])> : IT_IS_NOT_SPLICEPROPERTIES_COMMENT
}

<LOOKFOR_SPLICEDASHPROPERT> MORE [IGNORE_CASE]:
{
"T" : LOOKFOR_SPLICEDASHPROPERTI
|
<("\n"|"\r"|"\r\n")?> : DEFAULT
|
<NOT_SPLICEDASHPROPERT : (~["T"])> : IT_IS_NOT_SPLICEPROPERTIES_COMMENT
}

<LOOKFOR_SPLICEDASHPROPERTI> MORE [IGNORE_CASE]:
{
"I" : LOOKFOR_SPLICEDASHPROPERTIE
|
<("\n"|"\r"|"\r\n")?> : DEFAULT
|
<NOT_SPLICEDASHPROPERTI : (~["I"])> : IT_IS_NOT_SPLICEPROPERTIES_COMMENT
}

<LOOKFOR_SPLICEDASHPROPERTIE> MORE [IGNORE_CASE]:
{
"E" : LOOKFOR_SPLICEDASHPROPERTIES
|
<("\n"|"\r"|"\r\n")?> : DEFAULT
|
<NOT_SPLICEDASHPROPERTIE : (~["E"])> : IT_IS_NOT_SPLICEPROPERTIES_COMMENT
}

<LOOKFOR_SPLICEDASHPROPERTIES> TOKEN [IGNORE_CASE] :
{
	<SPLICEDASHPROPERTIES : "SPLICEDASHPROPERTIES">
}

//once we find comment starting with -- DERBY-PROPERTIES, we want to switch
//from SKIP mode to the TOKEN mode in the parser so the rest of the characters
//on the comment line can be treated as part of one big token so we can get
//keyname=value pairs from that token. The reason for treating them as one big
//token is that the existing code in parser allows newline characters between
//individual token but with optimizer overrides, all the properties have to
//be specified on the -- DERBY-PROPERTIES comment line.
<LOOKFOR_SPLICEDASHPROPERTIES> TOKEN [IGNORE_CASE]:
{
"S" { matchedToken.kind = SPLICEDASHPROPERTIES; } : PROPERTIES_LIST
}

//We found -- DERBY-PROPERTIE? where ? is a character other than S
//and hence we should the rest of the characters on this line as
//a regular comment
<LOOKFOR_SPLICEDASHPROPERTIES> SKIP :
{
<("\n"|"\r"|"\r\n")?> : DEFAULT
|
<NOT_PROPERTIES : (~["S","s"])> : IT_IS_NOT_SPLICEPROPERTIES_COMMENT
}

<IT_IS_NOT_SPLICEPROPERTIES_COMMENT> SKIP :
{
	<SINGLE_LINE_SQLCOMMENT: (~["\n","\r"])* ("\n"|"\r"|"\r\n")?> : DEFAULT
}

//found -- DERBY-PROPERTIES. Treat rest of the characters on the line
//as one big token and then fetch keyname=value pairs from that token.
<PROPERTIES_LIST> TOKEN :
{
	<CHECK_PROPERTIES: (~["\n","\r"])* ("\n"|"\r"|"\r\n")?> : DEFAULT
}

/*
	This list should contain only and all SQL92 keywords that are reserved.
	Reserved keywords can be used as identifiers in the language only
	as delimited identifiers.
 */
/* NOTE - If you add a keyword, then you must add it to reservedKeyword()
 *	      or nonReservedKeyword() as well!
 */
TOKEN [IGNORE_CASE] :
{	/* SQL92 reserved Keywords */
	<ADD: "add">
|	<ALL: "all">
|	<ALLOCATE: "allocate">
|	<ALTER: "alter">
|	<AND: "and">
|	<ANY: "any">
|	<ARE: "are">
|	<ARRAY: "array">
|	<AS: "as">
|	<ASC: "asc">
|	<ASSERTION: "assertion">
|	<AT: "at">
|	<AUTHORIZATION: "authorization">
|	<AVG: "avg">
|	<BEGIN: "begin">
|	<BETWEEN: "between">
|	<BINARY: "binary">
|	<BIT: "bit">
|	<BOTH: "both">
|	<BY: "by">
|	<CASCADE: "cascade">
|	<CASCADED: "cascaded">
|	<CASE: "case">
|	<CAST: "cast">
|	<CHAR: "char">
|	<CHARACTER: "character">
|	<CHARACTER_LENGTH: "character_length">
|	<CHECK: "check">
|	<CLOSE: "close">
|	<COALESCE: "coalesce">
|	<NVL: "nvl">
|	<COLLATE: "collate">
|	<COLLATION: "collation">
|	<COLUMN: "column">
|	<COMMIT: "commit">
|	<CONNECT: "connect">
|	<CONNECTION: "connection">
|	<CONSTRAINT: "constraint">
|	<CONSTRAINTS: "constraints">
|	<CONTINUE: "continue">
|	<CONVERT: "convert">
|	<CORRESPONDING: "corresponding">
|	<COUNT: "count">
|	<CREATE: "create">
|	<CROSS: "cross">
|	<CURRENT: "current">
|	<CURRENT_DATE: "current_date">
|	<CURRENT_TIME: "current_time">
|	<CURRENT_TIMESTAMP: "current_timestamp">
|	<CURRENT_USER: "current_user">
|	<CURSOR: "cursor">
|	<D: "d">
|	<DEALLOCATE: "deallocate">
|	<DEC: "dec">
|	<DECIMAL: "decimal">
|	<DECLARE: "declare">
|	<_DEFAULT: "default">
|	<DEFERRABLE: "deferrable">
|	<DEFERRED: "deferred">
|	<DELETE: "delete">
|	<DESC: "desc">
|	<DESCRIBE: "describe">
|	<DIAGNOSTICS: "diagnostics">
|	<DISCONNECT: "disconnect">
|	<DISTINCT: "distinct">
|	<DOUBLE: "double">
|	<DROP: "drop">
|	<ELSE: "else">
|	<END: "end">
|	<ENDEXEC: "end-exec">
|	<ESCAPE: "escape">
|	<EXCEPT: "except">
|	<EXCEPTION: "exception">
|	<EXEC: "exec">
|	<EXECUTE: "execute">
|	<EXISTS: "exists">
|	<EXTERNAL: "external">
|	<FALSE: "false">
|	<FETCH: "fetch">
|	<FIRST: "first">
|	<FLOAT: "float">
|   <FOLLOWING: "following">
|	<FOR: "for">
|	<FOREIGN: "foreign">
|	<FOUND: "found">
|	<FROM: "from">
|	<FULL: "full">
|	<FUNCTION: "function">
|	<GET: "get">
|	<GLOBAL: "global">
|	<GO: "go">
|	<GOTO: "goto">
|	<GRANT: "grant">
|	<GROUP: "group">
|	<HAVING: "having">
|	<HOUR: "hour">
|	<IDENTITY: "identity">
|	<IF: "if">
|	<IMMEDIATE: "immediate">
|	<IN: "in">
|	<INDICATOR: "indicator">
|	<INITIALLY: "initially">
|	<INNER: "inner">
|	<INPUT: "input">
|	<INSENSITIVE: "insensitive">
|	<INSERT: "insert">
|	<INT: "int">
|	<INTEGER: "integer">
|	<INTERSECT: "intersect">
|	<INTO: "into">
|	<IS: "is">
|	<ISOLATION: "isolation">
|	<JOIN: "join">
|	<KEY: "key">
|	<LAST: "last">
|	<LEADING: "leading">
|	<LEFT: "left">
|	<LIKE: "like">
|	<LOCAL: "local">
|	<LOWER: "lower">
|	<MATCH: "match">
|	<MAX: "max">
|	<MIN: "min">
|	<MINUTE: "minute">
|	<MODULE: "module">
|	<NATIONAL: "national">
|	<NATURAL: "natural">
|	<NCHAR: "nchar">
|	<NEXT: "next">
|	<NO: "no">
|	<NOLOGGING: "nologging">
|	<NOT: "not">
|	<NOW: "now">
|	<NULL: "null">
|	<NULLIF: "nullif">
|	<NUMERIC: "numeric">
|	<OF: "of">
|	<ON: "on">
|	<ONLY: "only">
|	<OPEN: "open">
|	<OPTION: "option">
|	<OR: "or">
|	<ORDER: "order">
|	<OUTER: "outer">
|	<OUTPUT: "output">
|	<OVERLAPS: "overlaps">
|	<PAD: "pad">
|	<PARTIAL: "partial">
|	<PARTITION: "partition">
|	<PREPARE: "prepare">
|   <PRECEDING: "preceding">
|	<PRESERVE: "preserve">
|	<PRIMARY: "primary">
|	<PRIOR: "prior">
|	<PRIVILEGES: "privileges">
|	<PROCEDURE: "procedure">
|	<PUBLIC: "public">
|	<READ: "read">
|	<REAL: "real">
|	<REFERENCES: "references">
|	<RELATIVE: "relative">
|	<REPLACE: "replace">
|	<RESTRICT: "restrict">
|	<REVOKE: "revoke">
|	<RIGHT: "right">
|	<ROLLBACK: "rollback">
|   <RANGE: "range">
|	<ROWS: "rows">
|	<SCHEMA: "schema">
|	<SCROLL: "scroll">
|	<SECOND: "second">
|	<SELECT: "select">
|	<SESSION_USER: "session_user">
|   <SESSION_PROPERTY: "session_property">
|	<SET: "set">
|	<SMALLINT: "smallint">
|	<SOME: "some">
|	<SPACE: "space">
|	<SQL: "sql">
|	<SQLCODE: "sqlcode">
|	<SQLERROR: "sqlerror">
|	<SQLSTATE: "sqlstate">
|	<STRIP: "strip">
|	<SUBSTRING: "substring">
|	<SUM: "sum">
|	<SYSTEM_USER: "system_user">
|	<TABLE: "table">
|	<TEMPORARY: "temporary">
|	<TIMEZONE_HOUR: "timezone_hour">
|	<TIMEZONE_MINUTE: "timezone_minute">
|	<TINYINT: "tinyint">
|	<TO: "to">
|	<TOP: "top">
|	<TRANSACTION: "transaction">
|	<TRANSLATE: "translate">
|	<TRANSLATION: "translation">
|	<TRAILING: "trailing">
|	<TRIM: "trim">
|	<TRUE: "true">
|	<TS: "ts">
|   <UNBOUNDED: "unbounded">
|	<UNION: "union">
|	<UNIQUE: "unique">
|	<UNKNOWN: "unknown">
|	<UPDATE: "update">
|	<UPPER: "upper">
|	<USER: "user">
|	<USING: "using">
|	<VALUE: "value">
|	<VALUES: "values">
|	<VARBINARY: "varbinary">
|	<VARCHAR: "varchar">
|	<VARYING: "varying">
|	<VIEW: "view">
|	<WHENEVER: "whenever">
|	<WHERE: "where">
|   <WINDOW: "window">
|	<WITH: "with">
|	<WORK: "work">
|	<WRITE: "write">
|	<YEAR: "year">
}

/*
	This list should contain only and all SQL92 keywords that are non-reserved.
	Non-reserved keywords can be used as identifiers in the language.
	To make that happen, the individual tokens have to be repeated in
	the nonReservedKeyword() rule -- unless there's some other JavaCC shorthand?

	NOTE: I've commented out most of these because we won't be using them
	right away and the grammar is taking forever to process.
 */
/* NOTE - If you add a keyword, then you must add it to reservedKeyword()
 *	      or nonReservedKeyword() as well!
 */
TOKEN [IGNORE_CASE] :
{	/* SQL92 non-reserved Keywords */
    <ABS: "abs">
|    <ABSVAL: "absval">
|   <ACCESS: "access">
|	<ACTION: "action">
|	<ALWAYS: "always">
|   <AUTO: "auto">
|	<B: "b">
|	<BLOB: "blob">
|	<C: "c">
|   <CALLED: "called">
|   <CHARACTERDELIMITER: "characterDelimiter">
|	<CLOB: "clob">
|	<COBOL: "cobol">
|   <COLUMNDELIMITER: "columnDelimiter">
|	<COMMITTED: "committed">
|   <CONCAT: "concat">
|	<CONTAINS: "contains">
|	<CYCLE: "cycle">
|	<DATA: "data">
|	<DATE: "date">
|	<DATEFORMAT: "dateFormat">
|	<DAY: "day">
|	<DAYOFYEAR: "dayofyear">
|	<DEFINER: "definer">
|	<DETERMINISTIC: "deterministic">
|	<DIGITS: "digits">
|   <DYNAMIC: "dynamic">
|   <EXCLUDE: "exclude">
|   <EXTRACT: "extract">
|	<FORTRAN: "fortran">
|   <GENERATED: "generated">
|   <GROUPING: "grouping">
|   <GROUP_USER: "group_user">
|   <HFILE: "hfile">
|	<IDENTITY_VAL_LOCAL: "identity_val_local">
|	<IGNORE: "ignore">
|	<INCREMENT: "increment">
|	<INITIAL: "initial">
|   <INOUT: "inout">
|	<INTERVAL: "interval">
|	<INVOKER: "invoker">
|	<KEYS: "keys">
|	<L: "l">
|	<LANGUAGE: "language">
|	<LARGE: "large">
|	<LENGTH: "length">
|	<LEVEL: "level">
|	<LIMIT: "limit">
|	<LOCKS: "locks">
|	<LOCKSIZE: "locksize">
|	<LOGGED: "logged">
|   <LOGICAL: "logical">
|	<MAXVALUE: "maxvalue">
|	<MINVALUE: "minvalue">
|   <MOD: "mod">
|	<MODIFIES: "modifies">
|	<MODIFY: "modify">
|	<MONTH: "month">
|	<MONTHNAME: "monthname">
|	<_MORE: "more">
|	<MUMPS: "mumps">
|	<NAME: "name">
|	<NCLOB: "nclob">
|	<NULLABLE: "nullable">
|	<NULLS: "nulls">
|	<NUMBER: "number">
|	<OBJECT: "object">
|	<OFFSET: "offset">
|	<PASCAL: "pascal">
|   <PHYSICAL: "physical">
|	<PLI: "pli">
|	<PRECISION: "precision">
|   <RECURSIVE: "recursive">
|	<RELEASE: "release">
|	<QUARTER: "quarter">
|   <REPEAT: "repeat">
|	<REPEATABLE: "repeatable">
|	<RESPECT: "respect">
|	<RESTART: "restart">
|	<RETURNS: "returns">
|	<ROLLUP: "rollup">
|	<ROW: "row">
|	<FORMAT: "format">
|	<DELIMITED: "delimited">
|	<FIELDS: "fields">
|	<TERMINATED: "terminated">
|	<ESCAPED: "escaped">
|	<LINES: "lines">
|	<PARTITIONED: "partitioned">
|	<COMPRESSED: "compressed">
|	<SNAPPY: "snappy">
|	<ZLIB: "zlib">
|	<STORED: "stored">
|	<LOCATION: "location">
|	<PIN: "pin">
|	<UNPIN: "unpin">
|	<TEXTFILE: "textfile">
|   <TIMEFORMAT: "timeFormat">
|   <TIMESTAMPFORMAT: "timestampFormat">
|	<PARQUET: "parquet">
|   <AVRO: "avro">
|	<ORC: "orc">
|	<SAVEPOINT: "savepoint">
|	<SCALE: "scale">
|	<SECURITY: "security">
|	<SERIALIZABLE: "serializable">
|   <SPLITKEYS: "splitKeys">
|	<SQL_TSI_FRAC_SECOND: "sql_tsi_frac_second">
|	<SQL_TSI_SECOND: "sql_tsi_second">
|	<SQL_TSI_MINUTE: "sql_tsi_minute">
|	<SQL_TSI_HOUR: "sql_tsi_hour">
|	<SQL_TSI_DAY: "sql_tsi_day">
|	<SQL_TSI_WEEK: "sql_tsi_week">
|	<SQL_TSI_MONTH: "sql_tsi_month">
|	<SQL_TSI_QUARTER: "sql_tsi_quarter">
|	<SQL_TSI_YEAR: "sql_tsi_year">
|	<START: "start">
|	<STATEMENT: "statement">
|	<SYNONYM: "synonym">
|	<T: "t">
|	<THEN: "then">
|	<TIME: "time">
|	<TIMESTAMP: "timestamp">
|	<TIMESTAMPADD: "timestampadd">
|	<TIMESTAMPDIFF: "timestampdiff">
|	<TRUNC: "trunc">
|	<TRUNCATE: "truncate">
|	<TYPE: "type">
|	<UNCOMMITTED: "uncommitted">
|	<USAGE: "usage">
|	<WEEK: "week">
|	<WEEKDAY: "weekday">
|	<WEEKDAYNAME: "weekdayname">
|	<WHEN: "when">
|   <MERGE: "merge">
}

/*
	The next lists should contain non-SQL92 keywords, and should
	specify whether their keywords are reserved or non-reserved.
	If they are non-reserved, they need to be added to the identifier() rule.

	NOTE: XML, XMLPARSE, XMLSERIALIZE, and XMLEXISTS are considered reserved
	words to comply with the SQL/XML (2003) standard, section 5.1.  Similarly,
	XMLQUERY is a reserved word per SQL/XML (2006).
 */

/* NOTE - If you add a keyword, then you must add it to reservedKeyword()
 *	      or nonReservedKeyword() as well!
 */
TOKEN [IGNORE_CASE] :
{	/* Additional JSQL reserved keywords -- non-SQL92 reserved Keywords */
  <ANALYZE: "analyze">
|	<BOOLEAN: "boolean">
|	<CALL: "call">
|	<CURDATE: "curdate">
|	<CURRENT_ROLE: "current_role">
|	<CURTIME: "curtime">
|   <DATABASE: "database">
|	<DENSERANK: "dense_rank">
|	<GET_CURRENT_CONNECTION: "getCurrentConnection">
|	<EXPLAIN: "explain">
|	<EXPORT: "export">
|	<EXPORT_BINARY: "export_binary">
|	<FIRSTVALUE: "first_value">
|	<LAG: "lag">
|	<LASTVALUE: "last_value">
|	<LEAD: "lead">
|	<LONGINT: "bigint">
|	<LONG: "long">
|	<LTRIM: "ltrim">
|	<NONE: "none">
|	<OVER: "over">
|	<RANK: "rank">
|	<ROLE: "role">
|	<ROWNUMBER: "row_number">
|	<RTRIM: "rtrim">
|	<SUBSTR:	"substr">
|	<XML:	"xml">
|   <TEXT:	"text">
|	<XMLEXISTS:	"xmlexists">
|	<XMLPARSE:	"xmlparse">
|	<XMLQUERY:	"xmlquery">
|	<XMLSERIALIZE:	"xmlserialize">
}

/* NOTE - If you add a keyword, then you must add it to reservedKeyword()
 *	      or nonReservedKeyword() as well!
 *
 * NOTE: CONTENT, DOCUMENT, STRIP, WHITESPACE and PASSING are considered NON-
 * reserved words to comply with the SQL/XML (2003) standard, section 5.1.
 * Similarly, EMPTY, RETURNING, and SEQUENCE are all considered NON-reserved
 * words per SQL/XML (2006).  PRESERVE is also listed as non-reserved in the
 * SQL/XML spec, but since that word is already reserved, we leave it alone.
 */
TOKEN [IGNORE_CASE] :
{	/* Additional JSQL keywords -- non-SQL92 non-reserved Keywords */
	<AFTER: "after">
|	<AGGREGATE: "aggregate">
|	<BEFORE: "before">
|	<CLASS: "class">
|	<COMPRESS: "compress">
|	<CONTENT: "content">
|   <CS: "cs">
|	<CURSORS: "cursors">
|	<DB2SQL: "db2sql">
|   <DERBY: "derby">
|	<SPLICE_JDBC_RESULT_SET: "splice_jdbc_result_set">
|	<DEFRAGMENT: "defragment">
|       <DIRTY: "dirty">
|	<DOCUMENT: "document">
|	<EACH: "each">
|	<EMPTY: "empty">
|   <ESTIMATE: "estimate">
|	<EXCLUSIVE: "exclusive">
|	<FN: "fn">
|   <FRACTION: "fraction">
|	<INDEX: "index">
|	<INPLACE: "inplace">
|	<JAVA: "java">
|   <LCASE: "lcase">
|   <LOCATE: "locate">
|	<LOCK: "lock">
|	<MESSAGE_LOCALE: "message_locale">
|	<METHOD: "method">
|	<MODE: "mode">
|	<NEW: "new">
|   <NEW_TABLE: "new_table">
|	<NVARCHAR: "nvarchar">
|	<OJ: "oj">
|	<OFF: "off">
|	<OLD: "old">
|   <OLD_TABLE: "old_table">
|   <OUT: "out">
|	<PARAMETER: "parameter">
|	<PASSING: "passing">
|   <PERCENTWORD: "percent">
|	<PROPERTIES: "properties">
|	<PURGE: "purge">
|   <PYTHON: "python">  // To Support Python Stored Procedure
|	<READS: "reads">
|	<REF: "ref">
|	<REFERENCING: "referencing">
|	<RENAME: "rename">
|       <RESET: "reset">
|	<RESULT: "result">
|	<RETAIN: "retain">
|	<RETURNING: "returning">
|   <RR: "rr">
|   <RS: "rs">
|   <SAMPLE: "sample">
|	<SEQUENCE: "sequence">
|	<SEQUENTIAL: "sequential">
|	<SETS: "sets">
|	<SHARE: "share">
|	<SQLID: "sqlid">
|	<SPECIFIC: "specific">
|   <SQRT: "sqrt">
|       <STABILITY: "stability">
|	<STATISTICS: "statistics">
|   <STYLE: "style">
|	<TRIGGER: "trigger">
|	<TRUNCATE_END: "truncate_end">
|   <UCASE: "ucase">
|   <UR: "ur">
|   <WHITESPACE: "whitespace">
}

TOKEN :
{	/* Operators and punctuation */
	<DOUBLE_QUOTE: "\"">
|	<PERCENT: "%">
|	<AMPERSAND: "&">
|	<QUOTE: "'">
|	<LEFT_BRACE: "{">
|	<RIGHT_BRACE: "}">
|	<LEFT_PAREN: "(">
|	<RIGHT_PAREN: ")">
|	<ASTERISK: "*">
|	<PLUS_SIGN: "+">
|	<COMMA: ",">
|	<MINUS_SIGN: "-">
|	<PERIOD: ".">
|	<SOLIDUS: "/">
|	<COLON: ":">
|	<DOUBLE_COLON: "::">
|	<SEMICOLON: ";">
|	<LESS_THAN_OPERATOR: "<">
|	<LESS_THAN_OR_EQUALS_OPERATOR: "<=">
|	<EQUALS_OPERATOR: "=">
|	<NOT_EQUALS_OPERATOR: "<>">
|	<NOT_EQUALS_OPERATOR2: "!=">
|	<GREATER_THAN_OPERATOR: ">">
|	<GREATER_THAN_OR_EQUALS_OPERATOR: ">=">
|	<QUESTION_MARK: "?">
|	<UNDERSCORE: "_">
|	<VERTICAL_BAR: "|">
|	<LEFT_BRACKET: "[">
|	<RIGHT_BRACKET: "]">
|	<CONCATENATION_OPERATOR: "||">
|	<FIELD_REFERENCE: "->">
}

TOKEN :
{	/* Identifiers */
	<IDENTIFIER: ( <LETTER> ) (<LETTER> | "_" | <DIGIT>)* >
}

TOKEN: {	<K: "K" >	 }
TOKEN: {	<M: "M" >	 }
TOKEN: {	<G: "G" >	 }

TOKEN:
{
	<#LETTER: [
				"a"-"z",
				"A"-"Z",
				"\u00aa",
				"\u00b5",
				"\u00ba",
				"\u00c0" - "\u00d6",
				"\u00d8" - "\u00f6",
				"\u00f8" - "\u01f5",
				"\u01fa" - "\u0217",
				"\u0250" - "\u02a8",
				"\u02b0" - "\u02b8",
				"\u02bb" - "\u02c1",
				"\u02d0" - "\u02d1",
				"\u02e0" - "\u02e4",
				"\u037a",
				"\u0386",
				"\u0388" - "\u038a",
				"\u038c",
				"\u038e" - "\u03a1",
				"\u03a3" - "\u03ce",
				"\u03d0" - "\u03d6",
				"\u03da",
				"\u03dc",
				"\u03de",
				"\u03e0",
				"\u03e2" - "\u03f3",
				"\u0401" - "\u040c",
				"\u040e" - "\u044f",
				"\u0451" - "\u045c",
				"\u045e" - "\u0481",
				"\u0490" - "\u04c4",
				"\u04c7" - "\u04c8",
				"\u04cb" - "\u04cc",
				"\u04d0" - "\u04eb",
				"\u04ee" - "\u04f5",
				"\u04f8" - "\u04f9",
				"\u0531" - "\u0556",
				"\u0559",
				"\u0561" - "\u0587",
				"\u05d0" - "\u05ea",
				"\u05f0" - "\u05f2",
				"\u0621" - "\u063a",
				"\u0640" - "\u064a",
				"\u0671" - "\u06b7",
				"\u06ba" - "\u06be",
				"\u06c0" - "\u06ce",
				"\u06d0" - "\u06d3",
				"\u06d5",
				"\u06e5" - "\u06e6",
				"\u0905" - "\u0939",
				"\u093d",
				"\u0958" - "\u0961",
				"\u0985" - "\u098c",
				"\u098f" - "\u0990",
				"\u0993" - "\u09a8",
				"\u09aa" - "\u09b0",
				"\u09b2",
				"\u09b6" - "\u09b9",
				"\u09dc" - "\u09dd",
				"\u09df" - "\u09e1",
				"\u09f0" - "\u09f1",
				"\u0a05" - "\u0a0a",
				"\u0a0f" - "\u0a10",
				"\u0a13" - "\u0a28",
				"\u0a2a" - "\u0a30",
				"\u0a32" - "\u0a33",
				"\u0a35" - "\u0a36",
				"\u0a38" - "\u0a39",
				"\u0a59" - "\u0a5c",
				"\u0a5e",
				"\u0a72" - "\u0a74",
				"\u0a85" - "\u0a8b",
				"\u0a8d",
				"\u0a8f" - "\u0a91",
				"\u0a93" - "\u0aa8",
				"\u0aaa" - "\u0ab0",
				"\u0ab2" - "\u0ab3",
				"\u0ab5" - "\u0ab9",
				"\u0abd",
				"\u0ae0",
				"\u0b05" - "\u0b0c",
				"\u0b0f" - "\u0b10",
				"\u0b13" - "\u0b28",
				"\u0b2a" - "\u0b30",
				"\u0b32" - "\u0b33",
				"\u0b36" - "\u0b39",
				"\u0b3d",
				"\u0b5c" - "\u0b5d",
				"\u0b5f" - "\u0b61",
				"\u0b85" - "\u0b8a",
				"\u0b8e" - "\u0b90",
				"\u0b92" - "\u0b95",
				"\u0b99" - "\u0b9a",
				"\u0b9c",
				"\u0b9e" - "\u0b9f",
				"\u0ba3" - "\u0ba4",
				"\u0ba8" - "\u0baa",
				"\u0bae" - "\u0bb5",
				"\u0bb7" - "\u0bb9",
				"\u0c05" - "\u0c0c",
				"\u0c0e" - "\u0c10",
				"\u0c12" - "\u0c28",
				"\u0c2a" - "\u0c33",
				"\u0c35" - "\u0c39",
				"\u0c60" - "\u0c61",
				"\u0c85" - "\u0c8c",
				"\u0c8e" - "\u0c90",
				"\u0c92" - "\u0ca8",
				"\u0caa" - "\u0cb3",
				"\u0cb5" - "\u0cb9",
				"\u0cde",
				"\u0ce0" - "\u0ce1",
				"\u0d05" - "\u0d0c",
				"\u0d0e" - "\u0d10",
				"\u0d12" - "\u0d28",
				"\u0d2a" - "\u0d39",
				"\u0d60" - "\u0d61",
				"\u0e01" - "\u0e2e",
				"\u0e30",
				"\u0e32" - "\u0e33",
				"\u0e40" - "\u0e46",
				"\u0e81" - "\u0e82",
				"\u0e84",
				"\u0e87" - "\u0e88",
				"\u0e8a",
				"\u0e8d",
				"\u0e94" - "\u0e97",
				"\u0e99" - "\u0e9f",
				"\u0ea1" - "\u0ea3",
				"\u0ea5",
				"\u0ea7",
				"\u0eaa" - "\u0eab",
				"\u0ead" - "\u0eae",
				"\u0eb0",
				"\u0eb2" - "\u0eb3",
				"\u0ebd",
				"\u0ec0" - "\u0ec4",
				"\u0ec6",
				"\u0edc" - "\u0edd",
				"\u0f40" - "\u0f47",
				"\u0f49" - "\u0f69",
				"\u10a0" - "\u10c5",
				"\u10d0" - "\u10f6",
				"\u1100" - "\u1159",
				"\u115f" - "\u11a2",
				"\u11a8" - "\u11f9",
				"\u1e00" - "\u1e9b",
				"\u1ea0" - "\u1ef9",
				"\u1f00" - "\u1f15",
				"\u1f18" - "\u1f1d",
				"\u1f20" - "\u1f45",
				"\u1f48" - "\u1f4d",
				"\u1f50" - "\u1f57",
				"\u1f59",
				"\u1f5b",
				"\u1f5d",
				"\u1f5f" - "\u1f7d",
				"\u1f80" - "\u1fb4",
				"\u1fb6" - "\u1fbc",
				"\u1fbe",
				"\u1fc2" - "\u1fc4",
				"\u1fc6" - "\u1fcc",
				"\u1fd0" - "\u1fd3",
				"\u1fd6" - "\u1fdb",
				"\u1fe0" - "\u1fec",
				"\u1ff2" - "\u1ff4",
				"\u1ff6" - "\u1ffc",
				"\u207f",
				"\u2102",
				"\u2107",
				"\u210a" - "\u2113",
				"\u2115",
				"\u2118" - "\u211d",
				"\u2124",
				"\u2126",
				"\u2128",
				"\u212a" - "\u2131",
				"\u2133" - "\u2138",
				"\u3005",
				"\u3031" - "\u3035",
				"\u3041" - "\u3094",
				"\u309b" - "\u309e",
				"\u30a1" - "\u30fa",
				"\u30fc" - "\u30fe",
				"\u3105" - "\u312c",
				"\u3131" - "\u318e",
				"\u4e00" - "\u9fa5",
				"\uac00" - "\ud7a3",
				"\uf900" - "\ufa2d",
				"\ufb00" - "\ufb06",
				"\ufb13" - "\ufb17",
				"\ufb1f" - "\ufb28",
				"\ufb2a" - "\ufb36",
				"\ufb38" - "\ufb3c",
				"\ufb3e",
				"\ufb40" - "\ufb41",
				"\ufb43" - "\ufb44",
				"\ufb46" - "\ufbb1",
				"\ufbd3" - "\ufd3d",
				"\ufd50" - "\ufd8f",
				"\ufd92" - "\ufdc7",
				"\ufdf0" - "\ufdfb",
				"\ufe70" - "\ufe72",
				"\ufe74",
				"\ufe76" - "\ufefc",
				"\uff21" - "\uff3a",
				"\uff41" - "\uff5a",
				"\uff66" - "\uffbe",
				"\uffc2" - "\uffc7",
				"\uffca" - "\uffcf",
				"\uffd2" - "\uffd7",
				"\uffda" - "\uffdc"
			]>
}

TOKEN :
{
	<#DIGIT: [
				"0" - "9",
				"\u0660" - "\u0669",
				"\u06f0" - "\u06f9",
				"\u0966" - "\u096f",
				"\u09e6" - "\u09ef",
				"\u0a66" - "\u0a6f",
				"\u0ae6" - "\u0aef",
				"\u0b66" - "\u0b6f",
				"\u0be7" - "\u0bef",
				"\u0c66" - "\u0c6f",
				"\u0ce6" - "\u0cef",
				"\u0d66" - "\u0d6f",
				"\u0e50" - "\u0e59",
				"\u0ed0" - "\u0ed9",
				"\u0f20" - "\u0f29",
				"\uff10" - "\uff19"
			]>
}

TOKEN :
{	/* Delimited Identifiers - NOTE: this does not allow zero-length identifiers */
	<DELIMITED_IDENTIFIER: "\""
		(
			("\"\"") |
			(~["\""])
		) +
		"\"">
}

TOKEN :
{	/* Literals */
	<EXACT_NUMERIC: ( <UINT> ( "." ( <UINT> )? )? | "." <UINT> )>
|	<UINT: (["0" - "9"])+ >/* This is for an unsigned exact numeric */
|	<LENGTH_MODIFIER: ( <UINT> ["K","M","G","k","m","g"] )>
|	<STRING: "'"
		(
			"''" |
			~["'"]
		) *
		"'">
|	<HEX_STRING: ["X","x"] "'" (["0"-"9","a"-"f","A"-"F"])*"'"> /* RESOLVE: does not allow separators */
|	<APPROXIMATE_NUMERIC: <EXACT_NUMERIC> ["e","E"] ( ("+" | "-") )? ( ["0" - "9"] )+ >
/*****
	The tokenizer can't handle the date/time literals because
	they are constructed of two tokens with arbitrary whitespace between them.
	INTERVAL_LITERAL will also have to be upgraded at some point.
|	<DATE_LITERAL: "DATE" "'" <DATE_VALUE> "'" >
|	<#DATE_VALUE: <UINT> "-" <UINT> "-" <UINT> >
|	<TIME_LITERAL: "TIME" "'" <TIME_VALUE> ( <TIMEZONE_INTERVAL> ) ? "'" >
|	<#TIME_VALUE: <UINT> ":" <UINT> ":" <SECONDS_VALUE> >
|	<#TIMEZONE_INTERVAL: ("+" | "-") <UINT> ":" <UINT> >
|	<TIMESTAMP_LITERAL: "TIMESTAMP" "'" <DATE_VALUE> " " <TIME_VALUE> ( <TIMEZONE_INTERVAL> ) ? "'" >
*****/
|	<INTERVAL_LITERAL: "INTERVAL" "'" (["+","-"])? <INTERVAL_STRING> <INTERVAL_QUALIFIER> >
|	<#INTERVAL_STRING: "'" ( <YEAR_MONTH_LITERAL> | <DAY_TIME_LITERAL> ) "'" >
|	<#INTERVAL_QUALIFIER: <SINGLE_DATETIME_FIELD> | ( <START_FIELD> <TO> <END_FIELD> ) >
|	<#SINGLE_DATETIME_FIELD: <NON_SECOND_DATETIME_FIELD> ( <LEFT_PAREN> <UINT> <RIGHT_PAREN> ) ? >
|	<#START_FIELD: <NON_SECOND_DATETIME_FIELD> ( <LEFT_PAREN> <UINT> <RIGHT_PAREN> ) ? >
|	<#END_FIELD: <NON_SECOND_DATETIME_FIELD> >
|	<#NON_SECOND_DATETIME_FIELD: <YEAR> | <MONTH> | <DAY> | <HOUR> | <MINUTE> >
|	<#YEAR_MONTH_LITERAL: (<UINT> | ( <UINT> "-" ) )? <UINT> >
|	<#DAY_TIME_LITERAL:  ( <DAY_TIME_INTERVAL> | <TIME_INTERVAL> ) >
|	<#DAY_TIME_INTERVAL: <UINT> ( " " <UINT> ( ":" <UINT> ( ":" <SECONDS_VALUE> ) ? ) ? ) ? >
|	<#SECONDS_VALUE: <UINT> ( "." ( <UINT> ) ? ) ? >
|	<#TIME_INTERVAL: <UINT> ( ":" <UINT> ( ":" <SECONDS_VALUE> ) ? ) ?
		|	 <UINT> ( ":" <SECONDS_VALUE> ) ?
		|	<SECONDS_VALUE> >
}



/*
 * <A NAME="Statement">Statement</A>
 */
StatementNode
Statement( String statementSQLText, Object[] paramDefaults) throws StandardException :
{
	StatementNode	statementNode;

        initStatement(statementSQLText, paramDefaults);
}
{
	statementNode = StatementPart(null) <EOF>
	{
		return statementNode;
	}
}

StatementNode
proceduralStatement(Token[] tokenHolder) throws StandardException :
{
	StatementNode statementNode;
	tokenHolder[0] = getToken(1);
}
{
(
	statementNode = insertStatement()
|
	statementNode = preparableUpdateStatement()
|
	statementNode = preparableDeleteStatement()
|
	statementNode =  preparableSelectStatement(true)
|
	statementNode =  callStatement()
)
	{
		return statementNode;
	}
}

/*
 * <A NAME="StatementPart">StatementPart</A>
 *
 * @param tokenHolder returns the token that starts
 * the statement.  If null, ignored.
 */
StatementNode
StatementPart(Token[] tokenHolder) throws StandardException :
{
	StatementNode	statementNode;
	//before starting new statements, initialize this variables. Otherwise, the left
	//over values from previously failed sql will affect the next sql.
        explicitNotNull = false;
        explicitNull = false;
	explicitlyNullableColumnsList = new Vector();

	/*
	** Grab the token preceding this production
	*/
	if (tokenHolder != null)
	{
		tokenHolder[0] = getToken(1);
	}
}
{
	/*
	 * The present method of invoking the parser is
	 * via JDBC, which uses preparable SQL statements only.
	 * the only place this makes a difference from other
	 * flavors of SQL (direct SQL, embedded SQL, dynamic SQL)
	 * is in the select and positioned update/delete statements,
	 * and in whether transaction and connection statements are
	 * allowed.
	 *
	 * When it becomes necessary to differentiate, we should
	 * define a way to put the parser into different modes
	 * (preparable SQL, dynamic SQL, direct SQL, embedded SQL, etc.)
	 * and have it accept/reject statements based on the mode
	 * it is in.
	 */
    (
        statementNode = spsRenameStatement() |
        // statementNode = SQLTransactionStatement() |
        statementNode = lockStatement()
    )
    {
        return statementNode;
    }
|   (
        statementNode = createStatements() |
        statementNode = dropStatements() |
        statementNode = spsAlterStatement() |
        statementNode = declareTemporaryTableDeclaration() |
        statementNode = preparableSQLDataStatement() |
        statementNode = spsSetStatement() |
		statementNode = truncateTableStatement() |
		statementNode = grantStatement() |
		statementNode = revokeStatement() |
		statementNode = execStatement() |
		statementNode = explainStatement() |
		statementNode = exportStatement() |
		statementNode = binaryExportStatement() |
		statementNode = pinStatement() |
		statementNode = dropPinStatement()
    )
    {
        return statementNode;
    }
}

/*
 * <A NAME="analyzeStatements">spsAnalyzeStatements</A>
 */
StatementNode
analyzeStatements() throws StandardException :
{
	StatementNode statementNode;
}
{
	<ANALYZE>
		(
      statementNode = analyzeTableStatement() |
      statementNode = analyzeSchemaStatement()
    )
    {
    }
	{
		return statementNode;
	}
}

StatementNode
analyzeTableStatement() throws StandardException :
{
  TableName           tableName;
  TableName           routineName;
  MethodCallNode      methodNode;
  ValueNode           value;
  StatementNode       callStatement;
  BooleanConstantNode b;
  ConstantNode        schema;
  ValueNode           samplePercent = null;
}
{
  <TABLE> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
  [<ESTIMATE> <STATISTICS> <SAMPLE> samplePercent = literal() <PERCENTWORD>]
  {
    routineName = (TableName)nodeFactory.getNode(
             C_NodeTypes.TABLE_NAME,
             "SYSCS_UTIL",
             (samplePercent==null)?"COLLECT_TABLE_STATISTICS" : "COLLECT_TABLE_SAMPLE_STATISTICS",
             getContextManager());

    Vector  parameterList = new Vector();
    if (tableName.hasSchema()) {
      schema = (CharConstantNode) nodeFactory.getNode(
            C_NodeTypes.CHAR_CONSTANT_NODE,
            tableName.getSchemaName(),
            getContextManager());
    }
    else {
      schema = (UntypedNullConstantNode) getNodeFactory().getNode(
             C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE,
             getContextManager());
    }
    parameterList.addElement(schema);

    CharConstantNode table = (CharConstantNode) nodeFactory.getNode(
                                   C_NodeTypes.CHAR_CONSTANT_NODE,
                                   tableName.getTableName(),
                                   getContextManager());
    parameterList.addElement(table);

    if (samplePercent != null) {
        parameterList.addElement(samplePercent);
    }

    // add parameter staleOnly
    b =(BooleanConstantNode)getNodeFactory().getNode(C_NodeTypes.BOOLEAN_CONSTANT_NODE,
                    Boolean.FALSE,
                    getContextManager());
    parameterList.addElement(b);

    methodNode = (MethodCallNode) nodeFactory.getNode(
      C_NodeTypes.STATIC_METHOD_CALL_NODE,
      routineName,
      null,
      getContextManager());
    methodNode.addParms(parameterList);

    value = (ValueNode) nodeFactory.getNode(
      C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
      methodNode,
      getContextManager());
  }
  {
    callStatement = (StatementNode) nodeFactory.getNode(
  	C_NodeTypes.CALL_STATEMENT_NODE,
  	value,
  	getContextManager());

    setUpAndLinkParameters();

  	return callStatement;
  }
}


StatementNode
analyzeSchemaStatement() throws StandardException :
{
  String          schemaName;
  TableName       routineName;
  MethodCallNode  methodNode;
  ValueNode       value;
  StatementNode callStatement;
  BooleanConstantNode b;
}
{
  <SCHEMA> schemaName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
  {
    routineName = (TableName)nodeFactory.getNode(
               C_NodeTypes.TABLE_NAME,
               "SYSCS_UTIL",
               "COLLECT_SCHEMA_STATISTICS",
               getContextManager());

    Vector  parameterList = new Vector();
    CharConstantNode schema = (CharConstantNode) nodeFactory.getNode(
                C_NodeTypes.CHAR_CONSTANT_NODE,
                schemaName,
                getContextManager());
    parameterList.addElement(schema);

    //add parameter staleOnly
    b =(BooleanConstantNode)getNodeFactory().getNode(C_NodeTypes.BOOLEAN_CONSTANT_NODE,
                Boolean.FALSE,
                getContextManager());
    parameterList.addElement(b);

    methodNode = (MethodCallNode) nodeFactory.getNode(
          C_NodeTypes.STATIC_METHOD_CALL_NODE,
          routineName,
          null,
          getContextManager());
    methodNode.addParms(parameterList);

    value = (ValueNode) nodeFactory.getNode(
          C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
          methodNode,
          getContextManager());
  }
  {
    callStatement = (StatementNode) nodeFactory.getNode(
      	C_NodeTypes.CALL_STATEMENT_NODE,
      	value,
      	getContextManager());

    setUpAndLinkParameters();

    return callStatement;
  }
}
/*
 * <A NAME="createStatements">spsCreateStatement</A>
 */
StatementNode
createStatements() throws StandardException :
{
	StatementNode statementNode;
	Token beginToken;
	int tokKind;
}
{
	beginToken = <CREATE> (
		(
            statementNode = schemaDefinition() |
            statementNode = viewDefinition(beginToken) |
            statementNode = triggerDefinition() |
            statementNode = synonymDefinition() |
            statementNode = roleDefinition() |
        	statementNode = createTemporaryTableDeclaration() |
            statementNode = sequenceDefinition()
        )
        {
        }
|       statementNode = tableDefinition()
        {
        }
|		statementNode = procedureDefinition()
|		statementNode = functionDefinition()
|		statementNode = aggregateDefinition()
|		statementNode = udtDefinition()
|
		statementNode = indexDefinition()
        {
        }
		)
	{
		return statementNode;
	}

}

/*
 * <A NAME="dropStatements">spsDropStatement</A>
 */
StatementNode
dropStatements() throws StandardException :
{
	StatementNode statementNode;
}
{
	<DROP>
        (
            statementNode = dropSchemaStatement() |
            statementNode = dropTableStatement() |
            statementNode = dropIndexStatement() |
            statementNode = dropAliasStatement() |
            statementNode = dropViewStatement() |
            statementNode = dropTriggerStatement() |
            statementNode = dropRoleStatement() |
            statementNode = dropSequenceStatement()

        )
	{
		return statementNode;
	}
}

/*
 * <A NAME="spsAlterStatement">spsAlterStatement</A>
 */
StatementNode
spsAlterStatement() throws StandardException :
{
	StatementNode statementNode;
}
{
	<ALTER>
        (
		    statementNode = alterTableStatement()
        )
	{
		return statementNode;
	}
}

/*
 * <A NAME="spsSetStatement">spsSetStatement</A>
 */
StatementNode
spsSetStatement() throws StandardException :
{
	StatementNode statementNode;
}
{
        LOOKAHEAD ( { getToken(1).kind == SET && getToken(2).kind != CURRENT } )
	<SET>
        (
                statementNode = setIsolationStatement() |
	        statementNode = setSchemaStatement() |
            statementNode = setMessageLocaleStatement() |
            statementNode = setRoleStatement()   |
            statementNode = setSessionPropertyStatement()
        )
	{
		return statementNode;
	}
|
        LOOKAHEAD ( { getToken(1).kind == SET && getToken(2).kind == CURRENT } )
	<SET>
        (
	        statementNode = setSchemaStatement() |
                statementNode = setIsolationStatement()

        )
	{
		return statementNode;
	}
}

/*
 * <A NAME="preparableSQLDataStatement">preparableSQLDataStatement</A>
 *
 * preparableSQLDataStatement differs from
 * directSQLDataStatement in that it
 * supports positioned update and delete
 * and a preparable select (with FOR UPDATE)
 * instead of a direct select (without FOR UPDATE)
 */
StatementNode
preparableSQLDataStatement() throws StandardException :
{
	StatementNode	dmlStatement;
}
{
	/*
	** RESOLVE: Ignoring temporary table declarations for now.
	*/
	dmlStatement = preparableDeleteStatement()
	{
		return dmlStatement;
	}
|
	dmlStatement = preparableSelectStatement(true)
	{
		return dmlStatement;
	}
|
	dmlStatement = insertStatement()
	{
		return dmlStatement;
	}
|
	dmlStatement = preparableUpdateStatement()
	{
		return dmlStatement;
	}
|
	dmlStatement = callStatement()
	{
		return dmlStatement;
	}
|
	dmlStatement = savepointStatement()
	{
		return dmlStatement;
	}
| dmlStatement = analyzeStatements()
  {
    return dmlStatement;
  }
}

StatementNode
explainStatement() throws StandardException :
{
    StatementNode   statementNode;
    StatementNode	explainStatement;
}
{
    <EXPLAIN> statementNode = preparableSQLDataStatement()
    {
        return (ExplainNode) nodeFactory.getNode(C_NodeTypes.EXPLAIN_NODE,
                                   statementNode,
                                   getContextManager());
    }
}

StatementNode
pinStatement() throws StandardException :
{
    StatementNode   statementNode;
    String authName = null;
    TableName tableName = null;
    Vector parameterList = new Vector();
}
{
    <PIN>
    [ <AUTHORIZATION> authName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) ]
    <TABLE> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
    {
        return (CreatePinNode) nodeFactory.getNode(C_NodeTypes.CREATE_PIN_NODE,
                                   tableName,
                                   getContextManager());

    }
}


StatementNode
exportStatement() throws StandardException :
{
    StatementNode   statementNode;
    Vector parameterList = new Vector();
}
{
    <EXPORT> methodCallParameterList(parameterList) statementNode = preparableSQLDataStatement()
    {
        return (ExportNode) nodeFactory.getNode(C_NodeTypes.EXPORT_NODE,
                                   statementNode,
                                   parameterList,
                                   getContextManager());
    }
}

StatementNode
binaryExportStatement() throws StandardException :
{
    StatementNode   statementNode;
    Vector parameterList = new Vector();
}
{
    <EXPORT_BINARY> methodCallParameterList(parameterList) statementNode = preparableSQLDataStatement()
    {
        return (BinaryExportNode) nodeFactory.getNode(C_NodeTypes.BINARY_EXPORT_NODE,
                                   statementNode,
                                   parameterList,
                                   getContextManager());
    }
}

/*
 * <A NAME="preparableDeleteStatement">preparableDeleteStatement</A>
 *
 *	This may be a search or positioned delete statement.
 */
StatementNode
preparableDeleteStatement() throws StandardException :
{
	StatementNode qtn;
}
{
	<DELETE> qtn = deleteBody()
	{
		return qtn;
	}
}

StatementNode
deleteBody() throws StandardException :
{
	JavaToSQLValueNode	javaToSQLNode = null;
	String				correlationName = null;
	TableName  tableName = null;
	ValueNode  whereClause = null;
	FromTable  fromTable = null;
	QueryTreeNode retval;
	Properties tableProperties = null;
	Properties deleteProperties = null;
	Token	   whereToken = null;
}
{
	LOOKAHEAD( { fromNewInvocationFollows() } )
	<FROM> javaToSQLNode = newInvocation()
	[ whereToken = <WHERE> whereClause = whereClause(whereToken) ]
	{
		fromTable =  (FromTable) nodeFactory.getNode(
									C_NodeTypes.FROM_VTI,
									javaToSQLNode.getJavaValueNode(),
									(String) null,
									null,
									(Properties) null,
									getContextManager());

		return getDeleteNode(fromTable, tableName, whereClause, null);
	}
|
	<FROM> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
		[
			LOOKAHEAD
			( { (getToken(1).kind != EOF) && (getToken(1).kind != WHERE) && !splicePropertiesListFollows() } )
			[ <AS> ] correlationName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
		]
		[tableProperties = propertyList(false) <CHECK_PROPERTIES>]
		[
			whereToken = <WHERE>
		    (
				//need LOOKAHEAD here to decide between CURRENT in class name
				//and CURRENT in CURRENT OF
				LOOKAHEAD (
	             	{
		         	 (getToken(1).kind == CURRENT) &&
					 (getToken(2).kind == OF)
				  	}
				)
				fromTable = currentOfClause( correlationName ) |
				whereClause = whereClause(whereToken)
			)
		]
	{
		/* Fabricate a ResultSetNode (SelectNode) under the DeleteNode.
		 * For a searched delete,
		 * The FromList is simply the table that we are deleting from.
		 * (NOTE - we mark the table as the one that we are deleting from.)
		 * For a positioned delete,
		 * the FromList is a CurrentOfNode holding the cursor name.
		 * The select list will be null for now.  We will generate it at
	 	 * bind time, in keeping with the design decision that the parser's
	  	 * output should look like the language.
		 */
		if (fromTable == null)
			fromTable = (FromTable) nodeFactory.getNode(
										C_NodeTypes.FROM_BASE_TABLE,
										tableName,
										correlationName,
										ReuseFactory.getInteger(
												FromBaseTable.DELETE),
										null,
										getContextManager());

        if (tableProperties != null) {
            String dir = (String)tableProperties.remove(DeleteNode.BULK_DELETE_DIRECTORY);
            if (dir != null) {
                deleteProperties = new FormatableProperties();
                deleteProperties.setProperty(DeleteNode.BULK_DELETE_DIRECTORY, dir);
            }
        }
		/* Update the FromTable with any properties, if non-null */
		if (tableProperties != null && tableProperties.size() > 0)
		{
			if (SanityManager.DEBUG)
			{
				if (((FromBaseTable) fromTable).getProperties() != null)
				{
					SanityManager.THROWASSERT(
						"Overwriting existing properties");
				}
			}
			((FromBaseTable) fromTable).setTableProperties(tableProperties);
		}

		return getDeleteNode(fromTable, tableName, whereClause, deleteProperties);
	}
}

/*
 * <A NAME="currentOfClause">currentOfClause</A>
 */
FromTable
currentOfClause( String correlationName ) throws StandardException :
{
	String cursorName = null;
}
{
	<CURRENT> <OF> cursorName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		return (FromTable) nodeFactory.getNode(
								C_NodeTypes.CURRENT_OF_NODE,
								correlationName,
								cursorName,
								null,
								getContextManager());
	}
}


/*
 * <A NAME="preparableSelectStatement">preparableSelectStatement</A>
 *
 *
 *	The preparable select statement is a superset of
 *	the directSelectStatementMultipleRows in that it
 *	allows both the preparable single row select statement
 *	(a query expression that returns one row, although it
 *	is also handled like a cursor) and the preparable
 *	multiple row select statement, which allows not only
 *	an order by clause but also a for update clause.
 */
CursorNode
preparableSelectStatement(boolean checkParams) throws StandardException :
{
	ResultSetNode	  queryExpression;
	Vector  updateColumns = new Vector();
	Vector parameterList = new Vector();
	int               forUpdateState = CursorNode.UNSPECIFIED;
	int				  isolationLevel = ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL;
	CursorNode		  retval;
	OrderByList orderCols = null;
    ValueNode[] offsetClauses = new ValueNode[ OFFSET_CLAUSE_COUNT ];
    ValueNode[] topNOut = new ValueNode[ 1 ];
    boolean     hasJDBClimitClause = false;
}
{
    [ <WITH> withClauseList(parameterList) ]
    queryExpression = queryExpression(null, NO_SET_OP, topNOut)
		[ orderCols = orderByClause(queryExpression) ]
        hasJDBClimitClause = offsetFetchFirstClause( offsetClauses )
		[ <FOR> forUpdateState = forUpdateClause(updateColumns) ]
		[ isolationLevel = atIsolationLevel() ]
	{
	    if (topNOut[0] != null) {
	        hasJDBClimitClause = true;
            offsetClauses[ FETCH_FIRST_CLAUSE ] = topNOut[0];
	    }
		// Note: if order by is specified, the for update clause
		// must be READ ONLY or empty, and the cursor
		// is implicitly READ_ONLY.

		retval = (CursorNode) nodeFactory.getNode(
				C_NodeTypes.CURSOR_NODE,
				"SELECT",
				queryExpression,
				null,
				orderCols,
				offsetClauses[ OFFSET_CLAUSE ],
				offsetClauses[ FETCH_FIRST_CLAUSE ],
                Boolean.valueOf( hasJDBClimitClause ),
				ReuseFactory.getInteger(forUpdateState),
				(forUpdateState == CursorNode.READ_ONLY ? null : updateColumns ),
				getContextManager());

		if (checkParams)
		{
			setUpAndLinkParameters();
		}
        retval.setWithVector(parameterList.size()>0?parameterList:null);
		/* Set the isolation levels for the scans if specified */
		if (isolationLevel != ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL)
		{
			getCompilerContext().setScanIsolationLevel(isolationLevel);
		}

		return retval;
	}
}

/*
 * <A NAME="insertStatement">insertStatement</A>
 */
StatementNode
insertStatement() throws StandardException :
{
	StatementNode	insertNode;
	QueryTreeNode	targetTable;
}
{
	<INSERT> <INTO> targetTable = targetTable()
			insertNode = insertColumnsAndSource(targetTable)
	{
		setUpAndLinkParameters();

		return insertNode;
	}
}

QueryTreeNode
targetTable() throws StandardException :
{
	JavaToSQLValueNode	javaToSQLNode = null;
	String				correlationName = null;
	TableName			tableName;
}
{
	/* NOTE: this rule has to come first in order to avoid making NEW
	 * a reserved word.
	 */
	/* identifier() used to be correlationName() */
	LOOKAHEAD( { newInvocationFollows(1) } )
	javaToSQLNode = newInvocation()
	{
		return (QueryTreeNode) nodeFactory.getNode(
								C_NodeTypes.FROM_VTI,
								javaToSQLNode.getJavaValueNode(),
								correlationName,
								null,
								(Properties) null,
								getContextManager());
	}
|
	tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return tableName;
	}
}

/*
 * <A NAME="preparableUpdateStatement">preparableUpdateStatement</A>
 */
StatementNode
preparableUpdateStatement() throws StandardException :
{
	StatementNode qtn;
}
{
	// NOTE: It only makes sense to have a property list if there is a
	// table name, so I moved it into the [] for qualifiedName().

	<UPDATE> qtn = updateBody()
	{
		return qtn;
	}

}

boolean
tableOrIndex() :
{
}
{
	<TABLE>
	{
		return true;
	}
|
	<INDEX>
	{
		return false;
	}
}

StatementNode
updateBody() throws StandardException :
{
	ResultColumnList	columnList = null;
	String				correlationName = null;
	JavaToSQLValueNode	javaToSQLNode = null;
	TableName  tableName = null;
	ValueNode  whereClause = null;
	FromTable  fromTable = null;
	Properties targetProperties = null;
	Token	   whereToken = null;
	// Splice fork - additional variables
    boolean    isUpdateFromSub = false;
    ValueNode  subQuery = null;
    Token      leftParenToken = null;
}
{
	LOOKAHEAD( { newInvocationFollows(1) } )
	javaToSQLNode = newInvocation()
		<SET> columnList = setClauseList()
	[ whereToken = <WHERE> whereClause = whereClause(whereToken) ]
	{
		fromTable =  (FromTable) nodeFactory.getNode(
									C_NodeTypes.FROM_VTI,
									javaToSQLNode.getJavaValueNode(),
									(String) null,
									null,
									(Properties) null,
									getContextManager());

		return getUpdateNode(fromTable, tableName, columnList, whereClause);
	}
|
		tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
		[
			LOOKAHEAD( { (getToken(1).kind != SET) && !splicePropertiesListFollows() } )
			[ <AS> ] correlationName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
		]
		[
			targetProperties = propertyList(false) <CHECK_PROPERTIES>
		]

        /* Check if this is multi column update with single subquery source */

        <SET>
        [
            leftParenToken = <LEFT_PAREN> columnList = setClauseListSpecial() <RIGHT_PAREN> <EQUALS_OPERATOR>
            {
                isUpdateFromSub = true;
                subQuery = updateSource(null);
            }
        ]
        {
            if (!isUpdateFromSub) {
               columnList = setClauseList();
            }
        }

		[
			whereToken = <WHERE>
		    (
				whereClause = whereClause(whereToken) |
				fromTable = currentOfClause( correlationName )
			)
		]
	{
		/* Fabricate a ResultSetNode (SelectNode) under the UpdateNode.
		 * For a searched update,
		 * The FromList is simply the table that we are updating.
		 * For a positioned update,
		 * the FromList is a CurrentOfNode holding the cursor name.
		 * (NOTE - we mark the table as the one that we are updating.)
		 * The select list is the columns in the SET clause.  At bind time,
	 	 * we will prepend the CurrentRowLocation() in keeping with the design
		 * decision that the parser's output should look like the language.
		 */
		if (fromTable == null)
			fromTable = (FromTable) nodeFactory.getNode(
										C_NodeTypes.FROM_BASE_TABLE,
										tableName,
										correlationName,
										ReuseFactory.getInteger(
														FromBaseTable.UPDATE),
										null,
										getContextManager());

		/* Update the FromTable with any properties, if non-null */
		if (targetProperties != null)
		{
			if (SanityManager.DEBUG)
			{
				if (((FromBaseTable) fromTable).getProperties() != null)
				{
					SanityManager.THROWASSERT(
						"Overwriting existing properties");
				}
			}
			((FromBaseTable) fromTable).setTableProperties(targetProperties);
		}
		if (isUpdateFromSub) {
            return getUpdateNodeWithSub(fromTable, tableName, columnList, whereClause, subQuery);
		} else {
            return getUpdateNode(fromTable, tableName, columnList, whereClause);
		}
	}
}

/*
 * <A NAME="callStatement">callStatement</A>
 */
StatementNode
callStatement() throws StandardException :
{
	StatementNode retval;
}
{
	(
		retval = bareCallStatement() |
		<LEFT_BRACE> retval = bareCallStatement() <RIGHT_BRACE>
	)
	{
		return retval;
	}
}

/*
 * <A NAME="bareCallStatement">baseCallStatement</A>
 */
StatementNode
bareCallStatement() throws StandardException :
{
	ParameterNode		returnParam;

	ValueNode			value;

	ResultSetNode		resultSetNode;
}
{
	<CALL> value = primaryExpression()
	{
		if (! (value instanceof JavaToSQLValueNode) ||
			! (((JavaToSQLValueNode) value).getJavaValueNode() instanceof MethodCallNode))
		{
			throw StandardException.newException(SQLState.LANG_INVALID_CALL_STATEMENT);
		}

		StatementNode callStatement =
									(StatementNode) nodeFactory.getNode(
												C_NodeTypes.CALL_STATEMENT_NODE,
												value,
												getContextManager());

		setUpAndLinkParameters();

		return callStatement;
	}

	// ? = CALL method()
|	returnParam = dynamicParameterSpecification()
	{
		getCompilerContext().setReturnParameterFlag(); //bug4450
	}
	<EQUALS_OPERATOR> <CALL> resultSetNode = rowValueConstructor(null)
	{
		// validate that we have something that is an appropriate call statement
		ResultColumnList rcl = resultSetNode.getResultColumns();

		// we can have only 1 return value/column
		if (rcl == null || rcl.size() > 1)
		{
			throw StandardException.newException(SQLState.LANG_INVALID_CALL_STATEMENT);
		}

		// we must have a method call node
		value = ((ResultColumn) rcl.elementAt(0)).getExpression();
		if (! (value instanceof JavaToSQLValueNode) ||
			! (((JavaToSQLValueNode) value).getJavaValueNode() instanceof MethodCallNode))
		{
			throw StandardException.newException(SQLState.LANG_INVALID_CALL_STATEMENT);
		}

		// wrap the row result set in a cursor node
		StatementNode cursorNode =
					(StatementNode) nodeFactory.getNode(
						C_NodeTypes.CURSOR_NODE,
						"SELECT",
						resultSetNode,
						null,
						null,
						null,
						null,
						null,
						ReuseFactory.getInteger(CursorNode.READ_ONLY),
						null,
						getContextManager());

		// set the 0th param to be a RETURN param
		returnParam.setReturnOutputParam(value);

		setUpAndLinkParameters();

		return cursorNode;
	}
}

/*
 * <A NAME="primaryExpression">primaryExpression</A>
 */
ValueNode primaryExpression() throws StandardException :
{
	ValueNode			value = null;
}
{
	LOOKAHEAD
	( {
		getToken(2).kind == PERIOD &&
		getToken(4).kind == LEFT_PAREN
	  }
	)
	value = routineInvocation()
	{
		return value;
	}
|
	value = primaryExpressionXX()
	{
		return value;
	}
}

/*
 * <A NAME="savepointStatement">savepointStatement</A>

	savepointStatementClauses contains the UNIQUE, ON ROLLBACK RETAIN LOCKS, ON ROLLBACK RETAIN CURSORS clauses.

	0 - Boolean - UNIQUE clause
	1 - Boolean - ON ROLLBACK RETAIN LOCKS clause
	2 - Boolean - ON ROLLBACK RETAIN CURSORS clause
 */
StatementNode
savepointStatement() throws StandardException :
{
	String			savepointName = null;
	int			savepointStatementType;
	Object[] savepointStatementClauses = new Object[3];
}
{
	(
	<SAVEPOINT> savepointName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) (savepointStatementClause(savepointStatementClauses))*
	{
		//ON ROLLBACK RETAIN CURSORS is mandatory
//		if (savepointStatementClauses[2] == null)
//				throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, "MISSING ON ROLLBACK RETAIN CURSORS");
		savepointStatementType = 1;
	}
|	<ROLLBACK> [ <WORK> ] <TO> <SAVEPOINT> [ savepointName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) ]
	{
		savepointStatementType = 2;
	}
|	<RELEASE> [ <TO> ] <SAVEPOINT> savepointName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		savepointStatementType = 3;
	}
	)
	{
		return (StatementNode) nodeFactory.getNode(
								C_NodeTypes.SAVEPOINT_NODE,
								savepointName,
								ReuseFactory.getInteger(savepointStatementType),
								getContextManager());
	}
}

void savepointStatementClause(Object[] savepointStatementClauses) throws StandardException :
{
	int clausePosition = -1;
}
{
	(
		<UNIQUE> {clausePosition = 0;}
	|
		<ON> <ROLLBACK> <RETAIN> (clausePosition = LocksOrCursors())
	)
	{
		if (clausePosition != -1) {
			// check for repeated clause
			if (savepointStatementClauses[clausePosition] != null) {

				String which = SAVEPOINT_CLAUSE_NAMES[clausePosition];
				throw StandardException.newException(SQLState.LANG_DB2_MULTIPLE_ELEMENTS, which);
			}

			savepointStatementClauses[clausePosition] = Boolean.TRUE;
		}
	}
}

/*
 * <A NAME="LocksOrCursors">LocksOrCursors</A>
 */
int
LocksOrCursors() :
{
}
{
	<LOCKS>
	{
		return (1);
	}
|
	<CURSORS>
	{
		return (2);
	}
}

/*
 * <A NAME="declareTemporaryTableDeclaration">declareTemporaryTableDeclaration</A>

    This is the generic DERBY syntax for temp tables

	declareTableClauses contains the NOT LOGGED, on commit and on rollback clauses.

	0 - Boolean - NOT LOGGED clause - ignored, no temp tables are logged
	1 - Boolean - on commit behavior
	2 - Boolean - on rollback behavior
 */
StatementNode
declareTemporaryTableDeclaration() throws StandardException :
{
	TableName			tableName;
	TableElementList tableElementList;
	Object[] declareTableClauses = new Object[3];
}
{
	<DECLARE> <GLOBAL> <TEMPORARY> <TABLE> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
		tableElementList = tableElementList()
		( declareTableClause(declareTableClauses) ) *
	{
		return verifySyntaxAndCreate(declareTableClauses, tableName, tableElementList);
	}
}

/*
 * <A NAME="createTemporaryTableDeclaration">createTemporaryTableDeclaration</A>
	CREATE LOCAL TEMPORARY TABLE...

	This is Tableau (LOCAL) and MicroStrategy (GLOBAL) - specific syntax for temp tables

	0 - Boolean - NOT LOGGED clause - ignored, no temp tables are logged
	1 - Boolean - on commit behavior
	2 - Boolean - on rollback behavior
 */
StatementNode
createTemporaryTableDeclaration() throws StandardException :
{
	TableName			tableName;
	TableElementList tableElementList;
	Object[] declareTableClauses = new Object[3];
}
{
	( <LOCAL>  | <GLOBAL> ) <TEMPORARY> <TABLE> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
		tableElementList = tableElementList()
		( declareTableClause(declareTableClauses) ) *
	{
		return verifySyntaxAndCreate(declareTableClauses, tableName, tableElementList);
	}
}

void declareTableClause(Object[] declareTableClauses) throws StandardException :
{
	int clausePosition = -1;
	Object clauseValue = null;
}
{
	(
		( <NOT> <LOGGED> | <NOLOGGING> ) {clauseValue = Boolean.TRUE; clausePosition = 0;}
	|
		LOOKAHEAD( {getToken(1).kind == ON && getToken(2).kind == COMMIT} )
		<ON> <COMMIT> ( clauseValue = onCommitRollback() ) <ROWS> { clausePosition = 1;}
	|
		LOOKAHEAD( {getToken(1).kind == ON && getToken(2).kind == ROLLBACK} )
		<ON> <ROLLBACK> ( clauseValue = onCommitRollback() ) <ROWS> { clausePosition = 2;}
	)


	{
		if (clausePosition != -1) {
			// check for repeated clause
			if (declareTableClauses[clausePosition] != null) {

				String which = TEMPORARY_TABLE_CLAUSE_NAMES[clausePosition];
				throw StandardException.newException(SQLState.LANG_DB2_MULTIPLE_ELEMENTS, which);
			}

			declareTableClauses[clausePosition] = clauseValue;
		}
	}
}

/*
 * <A NAME="onCommitRollback">onCommitRollback</A>
 */
Boolean
onCommitRollback() :
{
}
{
	<PRESERVE>
	{
		return (Boolean.FALSE);
	}
|
	<DELETE>
	{
		return (Boolean.TRUE);
	}
}

/*
 * <A NAME="tableElementList">tableElementList</A>
 */
TableElementList
tableElementList() throws StandardException :
{
	TableElementList	tableElementList =
					(TableElementList) nodeFactory.getNode(
									C_NodeTypes.TABLE_ELEMENT_LIST,
									getContextManager());
}
{
	<LEFT_PAREN> tableElement(tableElementList)
		( <COMMA> tableElement(tableElementList) ) * <RIGHT_PAREN>
	{
		return tableElementList;
	}
}

/*
 * <A NAME="tableElement">tableElement</A>
 */
void
tableElement(TableElementList tableElementList) throws StandardException :
{
	TableElementNode	tableElement;
	//initialize following two booleans for every new table element so that the
	//values from previous tableElement doesn't impact the next tableElement
	explicitNotNull = false;
	explicitNull = false;

}
{
	tableElement = columnDefinition(tableElementList)
	{
		tableElementList.addTableElement(tableElement);
	}
|
	tableElement = tableConstraintDefinition()
	{
		tableElementList.addTableElement(tableElement);
	}
}

/*
 * <A NAME="columnDefinition">columnDefinition</A>
 */
TableElementNode
columnDefinition(TableElementList tableElementList) throws StandardException :
{
	DataTypeDescriptor[]	typeDescriptor = new DataTypeDescriptor[1];
	ValueNode			defaultNode = null;
	String				columnName;
	long[]				autoIncrementInfo = new long[4];
}
{
	/*
	** RESOLVE: We are ignoring domains and collation.
	*/

	/* identifier() used to be columnName() */
	columnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	[ ( typeDescriptor[0] = dataTypeDDL() ) ]
	[ defaultNode = defaultAndConstraints(typeDescriptor, tableElementList, columnName, autoIncrementInfo) ]
	{
		// Only pass autoincrement info for autoincrement columns
		if (autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX] == 0)
		{
			autoIncrementInfo = null;
		}

		return (TableElementNode) nodeFactory.getNode(
								C_NodeTypes.COLUMN_DEFINITION_NODE,
								columnName,
								defaultNode,
								typeDescriptor[0],
								autoIncrementInfo,
								getContextManager());
	}
}


/*
 * <A NAME="defaultAndConstraints">defaultAndConstraints</A>
 */
ValueNode
defaultAndConstraints(DataTypeDescriptor[] typeDescriptor,
					  TableElementList tableElementList,
					  String columnName,
					  long[] autoIncrementInfo) throws StandardException :
{
	ValueNode		defaultNode = null;
}
{	// compatible with db2 syntax
	columnConstraintDefinition(typeDescriptor, tableElementList, columnName) ( columnConstraintDefinition(typeDescriptor, tableElementList, columnName)) *
	[ defaultNode = defaultClause(autoIncrementInfo, columnName) ( columnConstraintDefinition(typeDescriptor, tableElementList, columnName) )* ]
	{
		return defaultNode;
	}
|
	defaultNode = defaultClause(autoIncrementInfo, columnName)
	( columnConstraintDefinition(typeDescriptor, tableElementList, columnName) ) *
	{
		return defaultNode;
	}
}

/*
 * <A NAME="dataTypeDDL">dataTypeDDL</A>
 */
DataTypeDescriptor
dataTypeDDL() throws StandardException :
{
	DataTypeDescriptor	typeDescriptor;
}
{
	LOOKAHEAD( { commonDatatypeName(false) } )
	typeDescriptor = dataTypeCommon()
	{
		return typeDescriptor;
	}
|
    LOOKAHEAD ( { getToken(1).kind != GENERATED } )
	typeDescriptor = javaType()
	{
		return typeDescriptor;
	}
}

/**
   Returns  a dataTypeDDL() as a catalog type, ie.
   the Java interface TypeDescriptor.
*/
TypeDescriptor
catalogType() throws StandardException :
{
	DataTypeDescriptor	typeDescriptor;
}
{
	typeDescriptor = dataTypeDDL()
	{
		return typeDescriptor.getCatalogType();
	}
}


/*
 * <A NAME="dataTypeCast">dataTypeCast</A>
 */
DataTypeDescriptor
dataTypeCast() throws StandardException :
{
	DataTypeDescriptor	typeDescriptor;
	DataTypeDescriptor	optionalParentDescriptor;
}
{
	// This lookahead is required because the names of the built-in
	// datatypes are not reserved words
	LOOKAHEAD( { commonDatatypeName(true) } )
	typeDescriptor = dataTypeCommon()
	{
		return typeDescriptor;
	}
|
	typeDescriptor = javaType()
	{
		return typeDescriptor;
	}
}

/*
 * <A NAME="dataTypeCommon">dataTypeCommon</A>
 */
DataTypeDescriptor
dataTypeCommon() throws StandardException :
{
	DataTypeDescriptor	typeDescriptor;
	boolean checkCS = false;
	boolean isArray = false;
}
{
(
	/* RESOLVE: Ignoring decimal, numeric, long */

	/*
	** We are not planning to support character sets, so I commented
	** out characterSetSpecification().
	*/
	( LOOKAHEAD({getToken(2).kind != LARGE})
		typeDescriptor = characterStringType()
		[ <ARRAY> { isArray = true; } ]
	)
		/* [ <CHARACTER> <SET> characterSetSpecification() ] */
|
	( LOOKAHEAD({getToken(3).kind != LARGE})
		typeDescriptor = nationalCharacterStringType()
		[ <ARRAY> { isArray = true; } ]
	)
|
	typeDescriptor = numericType()
	[ <ARRAY> { isArray = true; } ]
|
	typeDescriptor = datetimeType()
| <BOOLEAN> [ <ARRAY> { isArray = true; } ]
{
	if ((getCompilerContext().getReliability() & CompilerContext.INTERNAL_SQL_ILLEGAL) != 0)
    {
        checkVersion(DataDictionary.DD_VERSION_DERBY_10_7, "BOOLEAN");
    }
	typeDescriptor = new DataTypeDescriptor(TypeId.BOOLEAN_ID, true);
}
|
	typeDescriptor = longType()
		[ <ARRAY> { isArray = true; } ]
|
	typeDescriptor = LOBType()
		[ <ARRAY> { isArray = true; } ]

|
	typeDescriptor = XMLType()
		[ <ARRAY> { isArray = true; } ]


)
	{
	    if (isArray) { // Wrap Array Handling...
	        DataTypeDescriptor dataTypeDescriptor = DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.ARRAY);
	        dataTypeDescriptor.setChildren(new DataTypeDescriptor[]{typeDescriptor});
	        return dataTypeDescriptor;
	    }
        return typeDescriptor;
	}
}

/*
 * <A NAME="characterStringType">characterStringType</A>
 */
DataTypeDescriptor
characterStringType() throws StandardException :
{
	int					length = DEFAULT_STRING_COLUMN_LENGTH;
	Token				varyingToken = null;
	int type;
}
{
  (
	(
		<VARCHAR> length = charLength()
	)
	{
		type = Types.VARCHAR;
	}
|
	charOrCharacter()
	(
		// Length is optional for CHARACTER, not for plain CHARACTER VARYING
		varyingToken = <VARYING> length = charLength() |
		[ length = charLength() ]
	)
	{
		// If the user says CHARACTER VARYING, it's really VARCHAR
		type = (varyingToken == null ? Types.CHAR : Types.VARCHAR);
	}
  ) [ type = forBitData(type) ]

	{
		checkTypeLimits(type,length);
		DataTypeDescriptor charDTD = DataTypeDescriptor.getBuiltInDataTypeDescriptor(type, length);
		return charDTD;
	}
}


/*
 * <A NAME="charOrCharacter">charOrCharacter</A>
 */
void
charOrCharacter() :
{
}
{
	<CHAR> | <CHARACTER>
}

/*
 * <A NAME="charType">charType</A>
 */
int
charLength() throws StandardException :
{
	int length;
}
{
	<LEFT_PAREN> length = length() <RIGHT_PAREN>
	{
		return length;
	}
}

/*
** <A NAME="forBitData">forBitData</A>
*/

int
forBitData(int charType) :
{
}
{
	<FOR> <BIT> <DATA>
	{
		if (charType == Types.CHAR)
			charType = Types.BINARY;
		else if (charType == Types.VARCHAR)
			charType = Types.VARBINARY;
		else if (charType == Types.LONGVARCHAR)
			charType = Types.LONGVARBINARY;

		return charType;
	}
}

/*
 * <A NAME="nationalCharacterStringType">nationalCharacterStringType</A>
 */
DataTypeDescriptor
nationalCharacterStringType() throws StandardException :
{
	DataTypeDescriptor	dataTypeDescriptor;
	int					length = DEFAULT_STRING_COLUMN_LENGTH;
	String				type = null;
	Token				varyingToken = null;
}
{
(
	<NATIONAL> charOrCharacter()
	(
		// Length is optional for NATIONAL CHARACTER , not for NATIONAL CHARACTER VARYING
		varyingToken = <VARYING> length = charLength() |
		[ length = charLength() ]
	)
	{

		// If the user says NATIONAL CHARACTER VARYING, it's really NATIONALVARCHAR
		type = (varyingToken == null ? TypeId.NATIONAL_CHAR_NAME :
				TypeId.NATIONAL_VARCHAR_NAME);
	}
|
	<NCHAR>
	(
		// Length is optional for NCHAR, not for NCHAR VARYING
		varyingToken = <VARYING> length = charLength() |
		[ length = charLength() ]
	)
	{
		// If the user says NCHAR VARYING, it's really NATIONALVARCHAR
		type = (varyingToken == null ? TypeId.NATIONAL_CHAR_NAME :
				TypeId.NATIONAL_VARCHAR_NAME);

	}
|
	<NVARCHAR>
	(
		length = charLength()
	)
	{
		type = TypeId.NATIONAL_VARCHAR_NAME;
	}
)

	{
		// need to re-enable according to SQL standard
		throw StandardException.newException(SQLState.NOT_IMPLEMENTED, type);
		// return DataTypeDescriptor.getBuiltInDataTypeDescriptor(type, length);
	}
}

/*
 * <A NAME="LOBType">lobType</A>
 */
DataTypeDescriptor
LOBType() throws StandardException :
{
	int	length = 2147483647; // default to 2GB-1 if no length specified
	String	type;
}
{
	(
		<BLOB> [ length = lengthAndModifier() ]
		{
			type = TypeId.BLOB_NAME;
		}
	|
		<CLOB> [ length = lengthAndModifier() ]
		{
			type = TypeId.CLOB_NAME;
		}
	|
		<TEXT> [ length = lengthAndModifier() ]
		{
			type = TypeId.CLOB_NAME;
		}
	|
		<NCLOB> length = lengthAndModifier()
		{
			type = TypeId.NCLOB_NAME;
			// need to re-enable according to SQL standard
			throw StandardException.newException(SQLState.NOT_IMPLEMENTED, type);
		}
	|
		<BINARY> <LARGE> <OBJECT> [ length = lengthAndModifier() ]
		{
			type = TypeId.BLOB_NAME;
		}
	|
		charOrCharacter() <LARGE> <OBJECT> [ length = lengthAndModifier() ]
		{
			type = TypeId.CLOB_NAME;
		}
	|
		<NATIONAL> <CHARACTER> <LARGE> <OBJECT> length = lengthAndModifier()
		{
			type = TypeId.NCLOB_NAME;
			// need to re-enable according to SQL standard
			throw StandardException.newException(SQLState.NOT_IMPLEMENTED, type);
		}
	)
	{
		DataTypeDescriptor dtd = DataTypeDescriptor.getBuiltInDataTypeDescriptor(type, length);

		return dtd;
	}
}

/*
 * <A NAME="numericType">numericType</A>
 */
DataTypeDescriptor
numericType() throws StandardException :
{
	DataTypeDescriptor	typeDescriptor;
}
{
	typeDescriptor = exactNumericType()
	{
		return typeDescriptor;
	}
|
	typeDescriptor = approximateNumericType()
	{
		return typeDescriptor;
	}
}

/*
 * <A NAME="exactNumericType">exactNumericType</A>
 */
DataTypeDescriptor
exactNumericType() throws StandardException :
{
	int precision = TypeCompiler.DEFAULT_DECIMAL_PRECISION;
	int scale = TypeCompiler.DEFAULT_DECIMAL_SCALE;
	int type = Types.DECIMAL;
	String typeStr = "DECIMAL";
	int maxWidth;
	DataTypeDescriptor dtd =  null;
}
{
	( <NUMERIC>
	{
		type = Types.NUMERIC;
		typeStr = "NUMERIC";
	}
	| <DECIMAL> | <DEC> )
	[ <LEFT_PAREN> precision = precision() [ <COMMA> scale = scale() ] <RIGHT_PAREN> ]
	{
		if ((precision <= 0) ||
			(precision > TypeCompiler.MAX_DECIMAL_PRECISION_SCALE))
		{
			throw StandardException.newException(SQLState.LANG_INVALID_PRECISION,
				typeStr, String.valueOf(precision));
		}
		else if ((scale < 0) ||
				 (scale > TypeCompiler.MAX_DECIMAL_PRECISION_SCALE))
		{
			throw StandardException.newException(SQLState.LANG_INVALID_DECIMAL_SCALE,
				typeStr, String.valueOf(scale));
		}
		else if (scale > precision)
		{
			throw StandardException.newException(SQLState.LANG_INVALID_DECIMAL_PRECISION_SCALE,
				String.valueOf(scale),
				String.valueOf(precision));
		}
		/*
		** If we have a decimal point, need to count it
		** towards maxwidth.  Max width needs to account
		** for the possible leading '0' and '-' and the
		** decimal point.  e.g., DEC(1,1) has a maxwidth
		** of 4 (to handle "-0.1").
		*/
		maxWidth = DataTypeUtilities.computeMaxWidth( precision, scale);
		return getDataTypeServices(type, precision, scale, maxWidth);
	}
	|
		dtd = exactIntegerType()
		{
			return dtd;
		}
}

/*
 * <A NAME="exactNumericType">exactNumericType</A>
 */
DataTypeDescriptor
exactIntegerType() throws StandardException :
{

}
{
	(<INTEGER> | <INT>)
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.INTEGER);
	}
|
	<SMALLINT>
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.SMALLINT);
	}
|
	<TINYINT>
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.TINYINT);
	}
|
	<LONGINT>
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.BIGINT);
	}
}

/*
 * <A NAME="approximateNumericType">approximateNumericType</A>
 */
DataTypeDescriptor
approximateNumericType() throws StandardException :
{
	int type = 0, scale = 0, width = 0;
	int prec = -1;
	DataTypeDescriptor dts = null;
}
{
	<FLOAT> [ <LEFT_PAREN> prec = precision() <RIGHT_PAREN> ]
	{
		/*
			When not specified, default is DOUBLE_PRECISION
		 */
		if (prec == -1)
			prec = TypeId.DOUBLE_PRECISION;

		if (prec > 0 && prec <= TypeId.REAL_PRECISION)
		{
			type = Types.REAL;
			prec = TypeId.REAL_PRECISION;
			scale = TypeId.REAL_SCALE;
			width = TypeId.REAL_MAXWIDTH;
		}
		else if (prec > TypeId.REAL_PRECISION &&
				 prec <= TypeId.DOUBLE_PRECISION)
		{
			type = Types.DOUBLE;
			prec = TypeId.DOUBLE_PRECISION;
			scale = TypeId.DOUBLE_SCALE;
			width = TypeId.DOUBLE_MAXWIDTH;
		}
		else
			throw StandardException.newException(SQLState.LANG_INVALID_PRECISION, "FLOAT", String.valueOf(prec));

		/*
			REMIND: this is a slight hack, in that exacting reading of
			the InformationSchema requires that the type the user typed
			in be visible to them in the InformationSchema views. But
			most implementations use synonyms or mappings at some point,
			and this is one of those places, for us.
		 */
		return getDataTypeServices(type, prec, scale, width);
	}
|
	<REAL>
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.REAL);
	}
|
		dts = doubleType()
	{
		return dts;
	}
}

/*
 * <A NAME="doubleType">doubleType</A>
 */
DataTypeDescriptor
doubleType() throws StandardException :

{

}
{
	( LOOKAHEAD({getToken(2).kind == PRECISION}) <DOUBLE> <PRECISION> | <DOUBLE> )
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.DOUBLE);
	}
}


/*
 * <A NAME="longType">longType</A>
 */
DataTypeDescriptor
longType() throws StandardException :
{
	DataTypeDescriptor	dataTypeDescriptor;
}
{
	<LONG> dataTypeDescriptor = longSubType()
	{
		return dataTypeDescriptor;
	}
}

/*
 * <A NAME="longType">longType</A>
 */
DataTypeDescriptor
arrayType(DataTypeDescriptor childDataTypeDescriptor) throws StandardException :
{
	DataTypeDescriptor	dataTypeDescriptor;
}
{
    <ARRAY>
	{
		dataTypeDescriptor = DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.ARRAY);
		dataTypeDescriptor.setChildren(new DataTypeDescriptor[]{childDataTypeDescriptor});
		return dataTypeDescriptor;
	}
}


DataTypeDescriptor
longSubType() throws StandardException :
{
	int lvcType = Types.LONGVARCHAR;
}
{
	<VARCHAR> [ lvcType = forBitData(lvcType) ]
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(lvcType);
	}
|
	<NVARCHAR>
	{
		// need to re-enable according to SQL standard
		throw StandardException.newException(SQLState.NOT_IMPLEMENTED, TypeId.NATIONAL_LONGVARCHAR_NAME);
		// return DataTypeDescriptor.getBuiltInDataTypeDescriptor(TypeId.NATIONAL_LONGVARCHAR_NAME);
	}
}

/*
 * <A NAME="XMLType">XMLType</A>
 */
DataTypeDescriptor
XMLType() throws StandardException :
{
	DataTypeDescriptor value;
}
{
	<XML>
	{
//		checkVersion(DataDictionary.DD_VERSION_DERBY_10_1, "XML");

		// need to re-enable according to SQL standard
		throw StandardException.newException(SQLState.NOT_IMPLEMENTED, TypeId.XML_NAME);
		// return DataTypeDescriptor.getBuiltInDataTypeDescriptor(type, length);
	//	return DataTypeDescriptor.getBuiltInDataTypeDescriptor(
	//		JDBC40Translation.SQLXML);
	}
}

/*
 * <A NAME="xmlDocOrContent">xmlDocOrContent</A>
 *
 * Parse the XML keywords DOCUMENT and CONTENT.  We don't
 * support CONTENT yet, so we throw an appropriate error
 * if we see it.
 *
 */
void
xmlDocOrContent() throws StandardException :
{
}
{
	LOOKAHEAD({ (getToken(1).kind != DOCUMENT) &&
		(getToken(1).kind != CONTENT) })
	{
		throw StandardException.newException(
			SQLState.LANG_XML_KEYWORD_MISSING, "DOCUMENT",
			ReuseFactory.getInteger(getToken(1).beginLine),
			ReuseFactory.getInteger(getToken(1).beginColumn));
	}
|
	LOOKAHEAD({ getToken(1).kind == CONTENT }) <CONTENT>
	{
		throw StandardException.newException(
			SQLState.LANG_UNSUPPORTED_XML_FEATURE, "CONTENT");
	}
|
	LOOKAHEAD({ getToken(1).kind == DOCUMENT }) <DOCUMENT>
	{
		return;
	}
}

/*
 * <A NAME="javaType">javaType</A>
 */
DataTypeDescriptor
javaType() throws StandardException :
{
	TableName	typeName;
}
{
	typeName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return getJavaClassDataTypeDescriptor(typeName);
	}
}

/*
 * <A NAME = "javaDSL">javaDSL</A>
 *
 * A Java dot-separated list.
 */
String
javaDSL() :
{
	String dotSeparatedList;
}
{
	dotSeparatedList = caseSensitiveIdentifierPlusReservedWords()
		( dotSeparatedList = javaDSLNameExtender(dotSeparatedList) ) *
	{
		return dotSeparatedList;
	}
}


/*
 * <A NAME="javaClassName">javaClassName</A>
 */
String
javaClassName() :
{
	String javaClassName;
}
{
	javaClassName = javaDSL()
	{
		return javaClassName;
	}
}

/*
 * <A NAME="javaDSLNameExtender">javaDSLNameExtender</A>
 */
String
javaDSLNameExtender(String dotSeparatedList)  :
{
	String	extender;
}
{
	<PERIOD> extender = caseSensitiveIdentifierPlusReservedWords()
	{
		return dotSeparatedList + "." + extender;
	}
}

/*
 * <A NAME="length">lengthAndModifier</A>
 */
int
lengthAndModifier() throws StandardException :
{
	Token	tok;
	Token	tokmod = null;
}
{
	<LEFT_PAREN>
	// we have essentially 3 different ways of specifying the length of a LOB
	( tok = <LENGTH_MODIFIER>					// LOB(33K)
	| tok = <EXACT_NUMERIC> [ tokmod = <IDENTIFIER> ] )		// LOB(33) or LOB(33 K)
	<RIGHT_PAREN>
	{
		String s = tok.image + (tokmod==null ? "" : tokmod.image); // colapse cases;
		try
		{
			char modifier = s.charAt(s.length()-1);
			String number = s.substring(0, s.length()-1); // in case of ending w. letter
			long mul;
			switch (modifier) {
			case 'G':
			case 'g':
				mul =1073741824L;	//1 Giga
				break;
			case 'M':
			case 'm':
				mul=1048576L;		// 1 Mega
				break;
			case 'K':
			case 'k':
				mul=1024L;		// 1 Kilo
				break;
			default:
				mul=1;
				number = s; // no letter in end, need whole string
				break;
			}
			long	specifiedLength = Long.parseLong(number) * mul;

			// match DB2 limits of 1 to 2147483647
			if ((specifiedLength > 0L) &&
                (specifiedLength <= Limits.DB2_LOB_MAXWIDTH))
            {
				return (int)specifiedLength;
            }

			// DB2 allows 2G or 2048M or 2097152k that calculate out to
            // 2147483648, but sets the length to be one less.
			if (mul != 1 && specifiedLength == 2147483648L)
				return Limits.DB2_LOB_MAXWIDTH;

		}
		catch (NumberFormatException nfe)
		{
		}

		throw StandardException.newException(
            SQLState.LANG_INVALID_COLUMN_LENGTH, s);
	}
}

/*
 * <A NAME="length">length</A>
 */
int
length() throws StandardException :
{
	Token	tok;
	int	retval;
}
{
	tok = <EXACT_NUMERIC>
	{
		try
		{
			retval = Integer.parseInt(tok.image);

			if (retval > 0)
				return retval;
		}
		catch (NumberFormatException nfe)
		{
		}
		throw StandardException.newException(SQLState.LANG_INVALID_COLUMN_LENGTH, tok.image);
	}
}


/*
 * <A NAME="exactNumber">exactNumber</A>
*/
long
exactNumber() throws StandardException :
{
	Token longToken;
	String sign = "";
}
{
	[ sign = sign() ] longToken = <EXACT_NUMERIC>
	{
		try
		{
			/*
			 * Note that it's important to re-concatenate
			 * the - sign (if present) into the number
			 * before converting it to a long value so
			 * that we can successfully handle any value
			 * in the range Long.MIN_VALUE ... Long.MAX_VALUE.
			 * Unfortunately, we can't simply do:
			 *     return Long.parseLong(sign+longToken.image);
			 * because Long.parseLong() doesn't accept a
			 * leading + sign.
			 */

			if (sign.equals("-"))
			{
				return Long.parseLong("-"+longToken.image);
			}
			else
			{
				return Long.parseLong(longToken.image);
			}
		}
		catch (NumberFormatException nfe)
		{
			throw
			StandardException.newException(
				   SQLState.LANG_INVALID_INTEGER_LITERAL, longToken.image);
		}
	}
}
/*
 * <A NAME="precision">precision</A>
 */
int
precision() throws StandardException :
{
	int uintValue;
}
{
	uintValue = uint_value()
	{
		return uintValue;
	}
}

/*
 * <A NAME="uint_value">uint_value</A>
 */
int
uint_value() throws StandardException :
{
	Token uintToken;
}
{
	/*
		because the parser won't match to UINT, we use EXACT_NUMERIC.
	 */
	uintToken = <EXACT_NUMERIC>
	{
		try {
			return Integer.parseInt(uintToken.image);
		} catch (NumberFormatException nfe) {
			throw StandardException.newException(SQLState.LANG_INVALID_INTEGER_LITERAL, uintToken.image);
		}
	}
}

/*
 * <A NAME="scale">scale</A>
 */
int
scale() throws StandardException :
{
	int uintValue;
}
{
	uintValue = uint_value()
	{
		return uintValue;
	}
}


/*
 * <A NAME="datetimeType">datetimeType</A>
 */
DataTypeDescriptor
datetimeType() throws StandardException :
{
	Token tzTok = null;
	int prec = -1; // know the value back is positive and in range
}
{
	<DATE>
	{
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.DATE);
	}
|
	<TIME>
	{

		/*
			We do not try to set up a precision for time/timestamp
			values because this field gets mapped to the precision
			field in the JDBC driver that is for the number of
			decimal digits in the value.  Precision for time is
			actually the scale of the seconds value.

			If/when precision for times is supported, we may need
			to migrate the system catalog information to fill in
			the default values appropriately (the default for
			time is 0, fortunately; but for timestamp it is
			actually 9 due to java.sql.Timestamp's precision).
		 */
		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.TIME);
	}
|
	<TIMESTAMP>
	{

		return DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.TIMESTAMP);
	}
}

/*
 * <A NAME="timePrecision">timePrecision</A>
 */

void
qualifiedNameList(Vector list, int id_length_limit) throws StandardException :
{
}
{
	qualifiedNameElement(list, id_length_limit) ( <COMMA> qualifiedNameElement(list, id_length_limit) ) *
}

void
qualifiedNameElement(Vector list, int id_length_limit) throws StandardException :
{
	TableName qualifiedName = null;
}
{
	qualifiedName = qualifiedName(id_length_limit)
	{
		list.addElement(qualifiedName);
	}
}

/*
 * <A NAME="qualifiedName">qualifiedName</A>
 */
TableName
qualifiedName( int nodeType, int id_length_limit) throws StandardException :
{
	//String	catalogName = null;
	String	schemaName = null;
	String	qualifiedId;
	String	firstName = null;
	String	secondName = null;
}
{
	firstName = identifier(Limits.MAX_IDENTIFIER_LENGTH, false)
				[
					// This LOOKAHEAD is necessary because a selectSublist()
					// can be a qualifiedName.*. Make sure that the token after
					// the PERIOD is not an ASTERISK before committing to this
					// optional element.
					LOOKAHEAD( {getToken(1).kind == PERIOD &&
								getToken(2).kind != ASTERISK} )
					<PERIOD> secondName = identifier(Limits.MAX_IDENTIFIER_LENGTH, false)
				]
	{
		if (secondName == null)
		{
			qualifiedId = firstName;
		}
		else
		{
			schemaName = firstName;
			qualifiedId = secondName;
		}

		//limit the qualifiedId to the id length limit passed to this method
		IdUtil.checkIdentifierLengthLimit(qualifiedId, id_length_limit);
		if (schemaName != null)
			IdUtil.checkIdentifierLengthLimit(schemaName, Limits.MAX_IDENTIFIER_LENGTH);

		return (TableName) nodeFactory.getNode(
								nodeType,
								schemaName,
								qualifiedId,
								new Integer(lastIdentifierToken.beginOffset),
								new Integer(lastIdentifierToken.endOffset),
								getContextManager());
	}
}

/*
 * <A NAME="queryExpression">queryExpression</A>
 *
 * We have to be carefull to get the associativity correct. According to the SQL spec
 *   <non-join query expression> ::=
 *     <non-join query term>
 *    | <query expression body> UNION [ ALL ] <query term>
 *    | <query expression body> EXCEPT [ ALL ] <query term>
 * Meaning that
 *   t1 UNION ALL t2 UNION t3
 * is equivalent to
 *   (t1 UNION ALL t2) UNION t3
 * However recursive descent parsers want recursion to be on the right, so this kind of associativity is unnatural
 * for our parser. The queryExpression method must know whether it is being called as the right hand side of a
 * set operator to produce a query tree with the correct associativity.
 */
ResultSetNode
queryExpression(ResultSetNode leftSide, int operatorType, ValueNode[] topNOut) throws StandardException :
{
	ResultSetNode	term;
}
{
	term = nonJoinQueryTerm(leftSide, operatorType, topNOut) [ term = unionOrExcept(term) ]
	{
		return term;
	}
}

/*
 * <A NAME="unionOrExcept">unionOrExcept</A>
 */
ResultSetNode
unionOrExcept(ResultSetNode term) throws StandardException :
{
	ResultSetNode	expression;
	Token 			tok = null;
}
{
	<UNION> [ tok = <ALL> | <DISTINCT> ] expression =
				queryExpression(term,
								(tok != null) ? UNION_ALL_OP : UNION_OP,
								null)
	{
        if ( (tok != null) && (tok.kind == DISTINCT) ) { forbidNextValueFor(); }

		return expression;
	}
|
	<EXCEPT> [ tok = <ALL> | <DISTINCT> ] expression =
				queryExpression(term,
								(tok != null) ? EXCEPT_ALL_OP : EXCEPT_OP,
								null)
	{
        if ( (tok != null) && (tok.kind == DISTINCT) ) { forbidNextValueFor(); }

		return expression;
	}
}


/*
 * <A NAME="nonJoinQueryTerm">nonJoinQueryTerm</A>
 *
 * Be careful with the associativity of INTERSECT. According to the SQL spec
 *   t1 INTERSECT t2 INTERSECT ALL t3
 * is equivalent to
 *   (t1 INTERSECT t2) INTERSECT ALL t3
 * which is not the same as
 *   t1 INTERSECT (t2 INTERSECT ALL t3)
 * See the comment on queryExpression.
 */
ResultSetNode
nonJoinQueryTerm(ResultSetNode leftSide, int operatorType, ValueNode[] topNOut) throws StandardException :
{
	ResultSetNode	term;
}
{
	term = nonJoinQueryPrimary(topNOut) [ term = intersect( term) ]
	{
        switch( operatorType)
        {
        case NO_SET_OP:
            return term;

        case UNION_OP:
            return (ResultSetNode) nodeFactory.getNode(
                C_NodeTypes.UNION_NODE,
                leftSide,
                term,
                Boolean.FALSE,
                Boolean.FALSE,
                null,
                getContextManager());

        case UNION_ALL_OP:
            return (ResultSetNode) nodeFactory.getNode(
                C_NodeTypes.UNION_NODE,
                leftSide,
                term,
                Boolean.TRUE,
                Boolean.FALSE,
                null,
                getContextManager());

        case EXCEPT_OP:
            return (ResultSetNode) nodeFactory.getNode(
                C_NodeTypes.INTERSECT_OR_EXCEPT_NODE,
                ReuseFactory.getInteger( IntersectOrExceptNode.EXCEPT_OP),
                leftSide,
                term,
                Boolean.FALSE,
                null,
                getContextManager());

        case EXCEPT_ALL_OP:
                    StandardException e = StandardException.newException("0A000 Feature not implemented: EXCEPT ALL");
                    e.setSqlState("0A000");
                    throw e;
//            return (ResultSetNode) nodeFactory.getNode(
//                C_NodeTypes.INTERSECT_OR_EXCEPT_NODE,
//                ReuseFactory.getInteger( IntersectOrExceptNode.EXCEPT_OP),
//                leftSide,
//                term,
//                Boolean.TRUE,
//                null,
//                getContextManager());

        case INTERSECT_OP:
            return (ResultSetNode) nodeFactory.getNode(
                C_NodeTypes.INTERSECT_OR_EXCEPT_NODE,
                ReuseFactory.getInteger( IntersectOrExceptNode.INTERSECT_OP),
                leftSide,
                term,
                Boolean.FALSE,
                null,
                getContextManager());

        case INTERSECT_ALL_OP:
                    StandardException ie = StandardException.newException("0A000 Feature not implemented: INTERSECT ALL");
                    ie.setSqlState("0A000");
                    throw ie;
//            return (ResultSetNode) nodeFactory.getNode(
//                C_NodeTypes.INTERSECT_OR_EXCEPT_NODE,
//                ReuseFactory.getInteger( IntersectOrExceptNode.INTERSECT_OP),
//                leftSide,
//                term,
//                Boolean.TRUE,
//                null,
//                getContextManager());


        default:
            if (SanityManager.DEBUG)
            {
                SanityManager.THROWASSERT( "Invalid set operator type: " + operatorType);
            }
            return null;
        }
    }
}

/*
 * <A NAME="intersect">intersect</A>
 */
ResultSetNode
intersect(ResultSetNode term) throws StandardException :
{
	ResultSetNode	expression;
	Token 			tok = null;
}
{
	<INTERSECT> [ tok = <ALL> | <DISTINCT> ] expression =
				nonJoinQueryTerm(term, (tok != null) ? INTERSECT_ALL_OP : INTERSECT_OP, null)
	{
        if ( (tok != null) && (tok.kind == DISTINCT) ) { forbidNextValueFor(); }

		return expression;
	}
}

/*
 * <A NAME="nonJoinQueryPrimary">nonJoinQueryPrimary</A>
 */
ResultSetNode
nonJoinQueryPrimary(ValueNode[] topNOut) throws StandardException :
{
	ResultSetNode	primary;
}
{
	primary = simpleTable(topNOut)
	{
		return primary;
	}
|
	<LEFT_PAREN> primary = queryExpression(null, NO_SET_OP, null)
	<RIGHT_PAREN>
	{
		return primary;
	}
}

/*
 * <A NAME="simpleTable">simpleTable</A>
 */
ResultSetNode
simpleTable(ValueNode[] topNOut) throws StandardException :
{
	ResultSetNode	resultSetNode;
}
{
	resultSetNode = querySpecification(topNOut)
	{
		return resultSetNode;
	}
|
	resultSetNode = tableValueConstructor()
	{
		return resultSetNode;
	}
}

/*
 * <A NAME="querySpecification">querySpecification</A>
 */
ResultSetNode
querySpecification(ValueNode[] topNOut) throws StandardException :
{
	ResultColumnList	selectList;
	SelectNode			selectNode;
	ValueNode           tmpTopN = null;
	boolean	isDistinct = false;
}
{
	<SELECT> [ isDistinct = setQuantifier() ] [ tmpTopN = topNClause() ]
		selectList = selectList()
		selectNode = tableExpression(selectList)
	{
        if (topNOut == null && tmpTopN != null)
        {
            throw StandardException.newException(
            		SQLState.LANG_SYNTAX_ERROR, "TopN is not allowed in SET operation");
        }
        if (tmpTopN != null)
            topNOut[0] = tmpTopN;
		if (isDistinct) selectNode.makeDistinct();
		return selectNode;
	}
}

/*
 * <A NAME="setQuantifier">setQuantifier</A>
 */
boolean
setQuantifier() :
{}
{
	// This lookahead is required to distinquish distinct from
	// a class which starts with distinct (e.g., distinct::)
	LOOKAHEAD
	(
		{
			getToken(1).kind == DISTINCT &&
			!(
				getToken(2).kind == PERIOD ||
				getToken(2).kind == DOUBLE_COLON
			)
		}
	)
	<DISTINCT>
	{
        forbidNextValueFor();

		return true;
	}
|
	// This lookahead is required to distinquish all from
	// a class which starts with all (e.g., all::)
	LOOKAHEAD
	(
		{
			getToken(1).kind == ALL &&
			!(
				getToken(2).kind == PERIOD ||
				getToken(2).kind == DOUBLE_COLON
			)
		}
	)
	<ALL>
	{
		return false;
	}
}

/*
 * <A NAME="selectList">selectList</A>
 */
ResultColumnList
selectList() throws StandardException :
{
	ResultColumn	allResultColumn;
	ResultColumnList	resultColumns = (ResultColumnList) nodeFactory.getNode(
									C_NodeTypes.RESULT_COLUMN_LIST,
									getContextManager());
}
{
	<ASTERISK>
	{
		allResultColumn = (ResultColumn) nodeFactory.getNode(
										C_NodeTypes.ALL_RESULT_COLUMN,
										null,
										getContextManager());
		/* Add the new AllResultColumn to the end of the list */
		resultColumns.addResultColumn(allResultColumn);
		return resultColumns;
	}
|
	selectColumnList(resultColumns)
	{
		return resultColumns;
	}
}

void
selectColumnList(ResultColumnList resultColumns) throws StandardException :
{
}
{
	selectSublist(resultColumns) ( <COMMA> selectSublist(resultColumns) ) *
}

/*
 * <A NAME="selectSublist">selectSublist</A>
 */
void
selectSublist(ResultColumnList resultColumns) throws StandardException :
{
	ResultColumn	resultColumn;
	ResultColumn	allResultColumn;
	TableName	tableName;
}
{
	// This LOOKAHEAD is required because both a qualifiedName() and a
	// derivedColumn() can start with an identifier().  So, the two cases
	// we check for are x.* and x.y.*
	//
	// NOTE: It is hard to check for an identifier() using semantic lookahead.
	LOOKAHEAD
	(
		{
			getToken(2).kind == PERIOD &&
			(
				getToken(3).kind == ASTERISK ||
				(getToken(4).kind == PERIOD && getToken(5).kind == ASTERISK)
			)
		}
	)
	tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) <PERIOD> <ASTERISK>
	{
		allResultColumn = (ResultColumn) nodeFactory.getNode(
										C_NodeTypes.ALL_RESULT_COLUMN,
										tableName,
										getContextManager());
		/* Add the new AllResultColumn to the end of the list */
		resultColumns.addResultColumn(allResultColumn);
	}
|
	resultColumn = derivedColumn(resultColumns)
	{
		/* Add the new ResultColumn to the end of the list */
		resultColumns.addResultColumn(resultColumn);
	}
}

/*
 * <A NAME="derivedColumn">derivedColumn</A>
 */
ResultColumn
derivedColumn(ResultColumnList resultColumns) throws StandardException :
{
	ValueNode	columnExpression;
	String		columnName = null;
}
{
	columnExpression = orExpression( null )
			[ columnName = asClause() ]
	{
		/*
		** If there is no AS clause, and the expression is a simple
		** column, use the name of the column as the result column
		** name.
		*/
		if ((columnName == null) && (columnExpression instanceof ColumnReference))
		{
			columnName = ((ColumnReference) columnExpression).columnName;
		}

		return (ResultColumn) nodeFactory.getNode(
						C_NodeTypes.RESULT_COLUMN,
						columnName,
						columnExpression,
						getContextManager());
	}
}

/*
 * <A NAME="asClause">asClause</A>
 */
String
asClause() throws StandardException :
{
	String	columnName;
}
{
	/* identifier() used to be columnName() */
	[ <AS> ] columnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		return columnName;
	}
}

/*
 * <A NAME="valueExpression">valueExpression</A>
 */
ValueNode
valueExpression() throws StandardException :
{
	ValueNode	leftOperand;
}
{
	leftOperand = orExpression(null)
		(<OR> leftOperand = orExpression(leftOperand) ) *
	{

		return leftOperand;
	}
}

/*
 * <A NAME="orExpression">orExpression</A>
 */
ValueNode
orExpression(ValueNode farLeftOperand) throws StandardException :
{
	ValueNode	leftOperand;
}
{
	leftOperand = andExpression(null)
		(<AND> leftOperand = andExpression(leftOperand)) *
	{
		if (farLeftOperand == null)
		{
			return leftOperand;
		}
		else
		{
			return (ValueNode) nodeFactory.getNode(
										C_NodeTypes.OR_NODE,
										farLeftOperand,
										leftOperand,
										getContextManager());
		}
	}
}

/*
 * <A NAME="andExpression">andExpression</A>
 */
ValueNode
andExpression(ValueNode farLeftOperand) throws StandardException :
{
	Token		tok = null;
	ValueNode	test;
}
{
	//LOOKAHEAD required to tell that NOT is not part of a class name
	[ LOOKAHEAD({getToken(1).kind == NOT && !(getToken(2).kind == PERIOD ||
			getToken(2).kind == DOUBLE_COLON)}) tok = <NOT> ] test = isSearchCondition()
	{
		/* Put the NOT on top of test */
		if (tok != null)
		{
			test = (ValueNode) nodeFactory.getNode(
									C_NodeTypes.NOT_NODE,
									test,
									getContextManager());
		}

		if (farLeftOperand != null)
		{
			test = (ValueNode) nodeFactory.getNode(
										C_NodeTypes.AND_NODE,
										farLeftOperand,
										test,
										getContextManager());
		}
		return test;
	}
}

/*
 * <A NAME="isSearchCondition">isSearchCondition</A>
 */
ValueNode
isSearchCondition() throws StandardException :
{
	ValueNode	result;
	ValueNode	booleanPrimary;
	Token		isToken = null;
	Token		notToken = null;
	Token		truthValue = null;
}
{
	booleanPrimary = booleanPrimary()
	[
		isToken = <IS> [ notToken = <NOT> ] <NULL>
	]
	{
		if ( isToken != null )
		{
				result = (ValueNode) nodeFactory.getNode(
											C_NodeTypes.IS_NULL_NODE,
											booleanPrimary,
											getContextManager());

				/* Put the NOT on top of the tree */
				if (notToken != null)
				{
					result = (ValueNode) nodeFactory.getNode(
											C_NodeTypes.NOT_NODE,
											result,
											getContextManager());
				}
		}
		else { result = booleanPrimary; }

		return result;
	}
}

/*
 * <A NAME="booleanPrimary">booleanPrimary</A>
 */
ValueNode
booleanPrimary() throws StandardException :
{
	ValueNode	primary;
	ValueNode	searchCondition;
}
{
	primary = predicate()
	{
		return	primary;
	}
}

/*
 * <A NAME="predicate">predicate</A>
 */
ValueNode
predicate() throws StandardException :
{
	ValueNode	value;
}
{
	(
		value = additiveExpression(null, 0) |
		value = existsExpression()
	)
	(
		// This LOOKAHEAD is necessary because remainingPredicate() can
		// start with NOT, and what follows a predicate() can also start
		// with NOT
		LOOKAHEAD( { remainingPredicateFollows() } )
		value = remainingPredicate(value)
	)*
	{
		return value;
	}
/*
** RESOLVE: overlapsExpression commented out for the time being to avoid
** a left recursion.  An OVERLAPS expression is defined as taking row
** constructors as parameters.  A row constructor contains a valueExpression
** as its first element, so it can't return be the first element in a
** valueExpression.

|
	overlapsExpression()
	{
		return null;
	}
*/
}

/*
 * <A NAME="remainingPredicates">remainingPredicates</A>
 */
ValueNode
remainingPredicate(ValueNode value) throws StandardException :
{
	Token tok = null;
}
{
	value = remainingNonNegatablePredicate(value)
	{
		return value;
	}
|
	[ tok = <NOT> ] value = remainingNegatablePredicate(value)
	{
		/* Put the NOT on top of the tree */
		if (tok != null)
		{
			value = (ValueNode) nodeFactory.getNode(
										C_NodeTypes.NOT_NODE,
										value,
										getContextManager());
		}

		return value;
	}
}

/*
 * <A NAME="remainingNonNegatablePredicate">remainingNonNegatablePredicate</A>
 */
ValueNode
remainingNonNegatablePredicate(ValueNode leftOperand) throws StandardException :
{
	int			operator;
	String		javaClassName;
	Token 		tok = null;
	ValueNode	tree = null;
	ValueNode	likePattern;
	ValueNode	betweenLeft;
	ValueNode	betweenRight;
}
{
	operator = compOp()
	(
		// Lookahead required here to tell ALL, ANY or SOME from a
		// class which starts with these words (e.g., ALL::)
		LOOKAHEAD({(getToken(1).kind == ALL || getToken(1).kind == ANY ||
			getToken(1).kind == SOME) && getToken(2).kind == LEFT_PAREN})
		(
			operator = quantifier(operator)
			<LEFT_PAREN>
			leftOperand = tableSubquery(operator, leftOperand)
			<RIGHT_PAREN>
		)
		|
		(
			leftOperand = additiveExpression(leftOperand, operator)
		)
	)
	{
		return leftOperand;
	}
}

/*
 * <A NAME="remainingNegatablePredicate">remainingNegatablePredicate</A>
 */
ValueNode
remainingNegatablePredicate(ValueNode leftOperand) throws StandardException :
{
	ValueNode	tree = null;
	ValueNode	likePattern;
	ValueNode	betweenLeft;
	ValueNode	betweenRight;
	ValueNode	escapeValue = null;
}
{
	<IN> tree = inPredicateValue(leftOperand)
	{
		return tree;
	}
|
	<LIKE> likePattern = additiveExpression(null, 0)
            [
                <ESCAPE> escapeValue = additiveExpression(null, 0) |
                LOOKAHEAD ( { getToken(1).kind == LEFT_BRACE && getToken(2).kind != LIMIT } )
                <LEFT_BRACE> <ESCAPE> escapeValue = additiveExpression(null, 0) <RIGHT_BRACE>
            ]
	{
		tree = (ValueNode) nodeFactory.getNode(
								C_NodeTypes.LIKE_OPERATOR_NODE,
								leftOperand,
								likePattern,
								escapeValue,
								getContextManager());

		return tree;
	}
|
	<BETWEEN> betweenLeft = additiveExpression(null, 0) <AND>
			betweenRight = additiveExpression(null, 0)
	{
		ValueNodeList betweenList = (ValueNodeList) nodeFactory.getNode(
													C_NodeTypes.VALUE_NODE_LIST,
													getContextManager());
		betweenList.addElement(betweenLeft);
		betweenList.addElement(betweenRight);
		tree = (ValueNode) nodeFactory.getNode(
								C_NodeTypes.BETWEEN_OPERATOR_NODE,
								leftOperand,
								betweenList,
								getContextManager());

		return tree;
	}
}

/*
 * <A NAME="compOp">compOp</A>
 */
int
compOp() throws StandardException :
{}
{
	<EQUALS_OPERATOR>
	{
		return BinaryOperatorNode.EQ;
	}
|
	<NOT_EQUALS_OPERATOR>
	{
		return BinaryOperatorNode.NE;
	}
|
	<NOT_EQUALS_OPERATOR2>
	{
		return BinaryOperatorNode.NE;
	}
|
	<LESS_THAN_OPERATOR>
	{
		return BinaryOperatorNode.LT;
	}
|
	<GREATER_THAN_OPERATOR>
	{
		return BinaryOperatorNode.GT;
	}
|
	<LESS_THAN_OR_EQUALS_OPERATOR>
	{
		return BinaryOperatorNode.LE;
	}
|
	<GREATER_THAN_OR_EQUALS_OPERATOR>
	{
		return BinaryOperatorNode.GE;
	}
}

/*
 * <A NAME="additiveExpression">additiveExpression</A>
 */
ValueNode
additiveExpression(ValueNode farLeftOperand, int compOp) throws StandardException :
{
	ValueNode	leftOperand;
	int			operator;
	int			nodeType;
}
{
	leftOperand = multiplicativeExpression(null, 0)
			(operator = additiveOperator()
				leftOperand = multiplicativeExpression(leftOperand, operator) )*
	{
		if (farLeftOperand == null)
			return leftOperand;

		switch (compOp)
		{
		  case BinaryOperatorNode.EQ:
			nodeType = C_NodeTypes.BINARY_EQUALS_OPERATOR_NODE;
			break;

		  case BinaryOperatorNode.NE:
			nodeType = C_NodeTypes.BINARY_NOT_EQUALS_OPERATOR_NODE;
			break;

		  case BinaryOperatorNode.LT:
		  	nodeType = C_NodeTypes.BINARY_LESS_THAN_OPERATOR_NODE;
			break;

		  case BinaryOperatorNode.GT:
			nodeType = C_NodeTypes.BINARY_GREATER_THAN_OPERATOR_NODE;
			break;

		  case BinaryOperatorNode.LE:
			nodeType = C_NodeTypes.BINARY_LESS_EQUALS_OPERATOR_NODE;
			break;

		  case BinaryOperatorNode.GE:
			nodeType = C_NodeTypes.BINARY_GREATER_EQUALS_OPERATOR_NODE;
			break;

		  default:
			if (SanityManager.DEBUG)
			SanityManager.THROWASSERT("Unknown comparison operator " + compOp);
			nodeType = 0;
			break;
		}

		return (ValueNode) nodeFactory.getNode(
							nodeType,
							farLeftOperand,
							leftOperand,
							getContextManager());
	}
}

/*
 * <A NAME="additiveOperator">additiveOperator</A>
 */
int
additiveOperator() throws StandardException :
{
	Token tok;
}
{	tok = <PLUS_SIGN>
	{
		return BinaryOperatorNode.PLUS;
	}
|
	tok = <MINUS_SIGN>
	{
		return BinaryOperatorNode.MINUS;
	}
}

/*
 * <A NAME="multiplicativeExpression">multiplicativeExpression</A>
 */
ValueNode
multiplicativeExpression(ValueNode farLeftOperand, int additiveOperator) throws StandardException :
{
	ValueNode	leftOperand;
	int			multOp;
}
{
	leftOperand = unaryExpression(null, 0)
				(multOp = multiplicativeOperator()
				 leftOperand = unaryExpression(leftOperand, multOp) )*
	{
		if (farLeftOperand == null)
			return leftOperand;

		switch (additiveOperator)
		{
		  case BinaryOperatorNode.PLUS:
			return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.BINARY_PLUS_OPERATOR_NODE,
									farLeftOperand,
									leftOperand,
									getContextManager()
									);

		  case BinaryOperatorNode.MINUS:
			return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.BINARY_MINUS_OPERATOR_NODE,
									farLeftOperand,
									leftOperand,
									getContextManager()
									);

		  default:
			if (SanityManager.DEBUG)
			SanityManager.THROWASSERT(
					"Unexpected operator value of " + additiveOperator);
			return null;
		}
	}
}

/*
 * <A NAME="multiplicativeOperator">multiplicativeOperator</A>
 */
int
multiplicativeOperator() throws StandardException :
{ }
{	<ASTERISK>
	{
		return BinaryOperatorNode.TIMES;
	}
|
	<SOLIDUS>
	{
		return BinaryOperatorNode.DIVIDE;
	}
|
	<CONCATENATION_OPERATOR>
	{
		return BinaryOperatorNode.CONCATENATE;
	}
|
	<CONCAT>
	{
		return BinaryOperatorNode.CONCATENATE;
	}
}

/*
 * <A NAME="unaryExpression">unaryExpression</A>
 */
ValueNode
unaryExpression(ValueNode farLeftOperand, int multiplicativeOperator) throws StandardException :
{
	ValueNode	value;
	String		sign = null;
	int			tokKind1;
	int			tokKind2;
}
{
	[
		// This LOOKAHEAD is required because a + or - sign can come before
		// any expression, and also can be part of a literal. If it comes
		// before a number, we want it to be considered part of the literal,
		// because the literal() rule knows how to handle the minimum value
		// for an int without changing it to a long.
		LOOKAHEAD( {
					( (tokKind1 = getToken(1).kind) == PLUS_SIGN ||
					   tokKind1 == MINUS_SIGN )
					&&
					( (tokKind2 = getToken(2).kind) != EXACT_NUMERIC &&
					   tokKind2 != APPROXIMATE_NUMERIC)
				   } )
		sign = sign()
	]
	value = primaryExpression()
	{
		if ("-".equals(sign))
		{
			value = (ValueNode) nodeFactory.getNode(
										C_NodeTypes.UNARY_MINUS_OPERATOR_NODE,
										value,
										getContextManager());
		}
		else if ("+".equals(sign))
		{
			value = (ValueNode) nodeFactory.getNode(
										C_NodeTypes.UNARY_PLUS_OPERATOR_NODE,
										value,
										getContextManager());
		}
		else if (SanityManager.DEBUG)
		{
			if (sign != null)
			{
				SanityManager.THROWASSERT("Unknown unary operator '"
											+ sign
											+ "'");
			}
		}

		return multOp(farLeftOperand, value, multiplicativeOperator);
	}
}


/*
 * <A NAME="sign">sign</A>
 */
String
sign() :
{
	Token	s;
}
{
	s = <PLUS_SIGN>
	{
		return s.image;
	}
|
	s = <MINUS_SIGN>
	{
		return s.image;
	}
}

/*
 * <A NAME="primaryExpressionXX">primaryExpressionXX</A>
 */
ValueNode
primaryExpressionXX() throws StandardException :
{
	ValueNode	value;
}
{
	value = primary()
	  ( value = nonStaticMethodCallOrFieldAccess(value)) *
	{
		return value;
	}
}

ValueNode
nonStaticMethodCallOrFieldAccess(ValueNode receiver) throws StandardException :
{
	ValueNode value;
}
{
	value = nonStaticMethodInvocation(receiver)
	{
		return value;
	}
}

/*
 * <A NAME="nonStaticMethodInvocation">nonStaticMethodInvocation</A>
 */
ValueNode
nonStaticMethodInvocation(ValueNode receiver) throws StandardException :
{
	Vector					parameterList = new Vector();
	MethodCallNode			methodNode;
	ParameterNode			parameterNode;
}
{
        LOOKAHEAD
	( {
		getToken(3).kind == LEFT_PAREN
	  }
	)

	( <FIELD_REFERENCE> | <PERIOD> )
		methodNode = methodName(receiver) methodCallParameterList(parameterList)

	{

		/*
		** ? parameters are not allowed for the receiver --
		** unless the receiver is standing in for a named parameter,
		** whose type is therefore known.
		*/
		if (receiver instanceof ParameterNode)
		{
			throw StandardException.newException(SQLState.LANG_PARAMETER_RECEIVER,
												methodNode.getMethodName());
		}

		methodNode.addParms(parameterList);

		/*
		** Assume this is being returned to the SQL domain.  If it turns
		** out that this is being returned to the Java domain, we will
		** get rid of this node.
		*/
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
								methodNode,
								getContextManager());
	}
|
        <PERIOD> methodNode = methodName(receiver)
	{
		/*
		** ? parameters are not allowed for the receiver --
		** unless the receiver is standing in for a named parameter,
		** whose type is therefore known.
		*/
		if (receiver instanceof ParameterNode)
		{
			throw StandardException.newException(SQLState.LANG_PARAMETER_RECEIVER,
												methodNode.getMethodName());
		}

		methodNode.addParms(parameterList);

		/*
		** Assume this is being returned to the SQL domain.  If it turns
		** out that this is being returned to the Java domain, we will
		** get rid of this node.
		*/
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
								methodNode,
								getContextManager());
	}


}

/*
 * <A NAME="methodName">methodName</A>
 */
MethodCallNode
methodName(ValueNode receiver) throws StandardException :
{
	String	methodName;
}
{
	/*
	** NOTE: allowing a delimited identifier as a method name is necessary,
	** because Java is case-sensitive.  But this also allows identifiers that
	** do not match Java syntax.  This will probably not cause a problem
	** in later phases, like binding and code generation.
	*/
	methodName = caseSensitiveIdentifierPlusReservedWords()
	{
		return (MethodCallNode) nodeFactory.getNode(
										C_NodeTypes.NON_STATIC_METHOD_CALL_NODE,
										methodName,
										receiver,
										getContextManager());
	}
}

/*
 * <A NAME="staticMethodName">staticMethodName</A>
 */
MethodCallNode
staticMethodName(String javaClassName) throws StandardException :
{
	String	methodName;
}
{
	/*
	** NOTE: allowing a delimited identifier as a method name is necessary,
	** because Java is case-sensitive.  But this also allows identifiers that
	** do not match Java syntax.  This will probably not cause a problem
	** in later phases, like binding and code generation.
	*/
	methodName = caseSensitiveIdentifierPlusReservedWords()
	{
		return (MethodCallNode) nodeFactory.getNode(
								C_NodeTypes.STATIC_METHOD_CALL_NODE,
								methodName,
								javaClassName,
								getContextManager());
	}
}

/*
 * <A NAME="methodParameter">methodParameter</A>
 */
void
methodParameter(Vector parameterList) throws StandardException :
{
	ValueNode	parameter;
}
{
	parameter = orExpression(null)
	{
		parameterList.addElement(parameter);
	}
|
	parameter = nullSpecification()
	{
		parameterList.addElement(parameter);
	}
}


/*
 * <A NAME="primary">primary</A>
 */
ValueNode
primary() throws StandardException :
{
	String		javaClassName;
	ValueNode	value;
}
{

	//Look ahead required here to tell a java class from a identifier
	LOOKAHEAD( { javaClassFollows() } )
	value = staticClassReference()
	{
		return value;
	}
|
	value = valueExpressionPrimary()
	{
		return value;
	}
}

/*
 * <A NAME="staticClassReference">staticClassReference</A>
 */
ValueNode
staticClassReference() throws StandardException :
{
	String		javaClassName;
	ValueNode value;
}
{
	javaClassName = javaClass() <DOUBLE_COLON>  value = staticClassReferenceType(javaClassName)
	{
		return value;
	}
}

/*
 * <A NAME="staticClassReferenceType">staticClassReferenceType</A>
 */
ValueNode
staticClassReferenceType(String javaClassName) throws StandardException :
{
	ValueNode value;
}
{
	//Look ahead required here to tell method from field reference
	LOOKAHEAD({(getToken(2).kind == LEFT_PAREN)})
	value = staticMethodInvocation(javaClassName)
	{
		return value;
	}
|
	value = staticClassFieldReference(javaClassName)
	{
		return value;
	}
}

/*
 * <A NAME="staticClassFieldReference">staticClassFieldReference</A>
 */
ValueNode
staticClassFieldReference(String javaClassName) throws StandardException :
{
	String		fieldName = null;
}
{
	fieldName = caseSensitiveIdentifierPlusReservedWords()
	{
		return	(ValueNode) nodeFactory.getNode(
					C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
					nodeFactory.getNode(
								C_NodeTypes.STATIC_CLASS_FIELD_REFERENCE_NODE,
								javaClassName,
								fieldName,
								nextToLastTokenDelimitedIdentifier,
								getContextManager()),
					getContextManager());
	}
}

/*
 * <A NAME="nonSecondDatetimeField">nonSecondDatetimeField</A>
 */
int
nonSecondDatetimeField() :
{}
{
	<YEAR>
	{
		return DateTimeDataValue.YEAR_FIELD;
	}
|
	<QUARTER>
	{
		return DateTimeDataValue.QUARTER_FIELD;
	}
|
	<MONTH>
	{
		return DateTimeDataValue.MONTH_FIELD;
	}
|
	<MONTHNAME>
	{
		return DateTimeDataValue.MONTHNAME_FIELD;
	}
|
	<WEEK>
	{
		return DateTimeDataValue.WEEK_FIELD;
	}
|
	<WEEKDAY>
	{
		return DateTimeDataValue.WEEK_DAY_FIELD;
	}
|
	<WEEKDAYNAME>
	{
		return DateTimeDataValue.WEEKDAYNAME_FIELD;
	}
|
	<DAYOFYEAR>
	{
		return DateTimeDataValue.DAY_OF_YEAR_FIELD;
	}
|
	<DAY>
	{
		return DateTimeDataValue.DAY_FIELD;
	}
|
	<HOUR>
	{
		return DateTimeDataValue.HOUR_FIELD;
	}
|
	<MINUTE>
	{
		return DateTimeDataValue.MINUTE_FIELD;
	}
}

ValueNode
escapedValueFunction() throws StandardException :
{
	ValueNode	value;
    ValueNode   str1;
    ValueNode   str2;
	ValueNode	startPosition;
    ValueNode	length = null;
}
{
	value = miscBuiltinsCore( true /* is JDBC escape */)
	{
		return value;
	}
|
	/* Escaped function substring() */
    <SUBSTRING> <LEFT_PAREN> value = additiveExpression(null, 0) <COMMA> startPosition = additiveExpression(null, 0) [ <COMMA> length = additiveExpression(null, 0) ] <RIGHT_PAREN>
	{
        return getSubstringNode(value, startPosition, length, Boolean.FALSE);
	}
|
	/* Escaped function replace() */
    <REPLACE> <LEFT_PAREN> value = additiveExpression(null, 0) <COMMA> str1 = additiveExpression(null, 0) <COMMA> str2 = additiveExpression(null, 0) <RIGHT_PAREN>
	{
        return getReplaceNode(value, str1, str2);
	}
|
	/* CURDATE() is an escaped function supported by JCC 2.2 or higher */
	<CURDATE> <LEFT_PAREN> <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.CURRENT_DATETIME_OPERATOR_NODE,
								ReuseFactory.getInteger(
									CurrentDatetimeOperatorNode.CURRENT_DATE),
								getContextManager());
	}
|
	/* CURTIME() is an escaped function supported by JCC 2.2 or higher */
	<CURTIME> <LEFT_PAREN> <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.CURRENT_DATETIME_OPERATOR_NODE,
							ReuseFactory.getInteger(
								CurrentDatetimeOperatorNode.CURRENT_TIME),
							getContextManager());
	}
|
    /* CONCAT( string1, string2 )
     * CONCAT is not a reserved word.
     */
    <CONCAT> <LEFT_PAREN> str1 = additiveExpression(null,0) <COMMA>
            str2 = additiveExpression(null,0) <RIGHT_PAREN>
    {
        return (ValueNode) nodeFactory.getNode(
                            C_NodeTypes.CONCATENATION_OPERATOR_NODE,
                            str1,
                            str2,
                            getContextManager());
    }
|
	/* Method versions of USER special registers
	 * are ODBC remnants.  Only supported
	 * when escaped.
	 */
	value = userNode() <LEFT_PAREN> <RIGHT_PAREN>
	{
		return value;
	}
|
    value = timestampArithmeticFuncion()
    {
        return value;
    }

|
    LOOKAHEAD({ getEscapedSYSFUN(getToken(1).image) != null })
    value = escapedSYSFUNFunction()
    {
        return value;
    }


}

/*
 * <A NAME="numericValueFunction">numericValueFunction</A>
 */
ValueNode
escapedSYSFUNFunction() throws StandardException :
{
    Vector      parameterList = new Vector();
	Token tok;
}
{
    tok = <IDENTIFIER> methodCallParameterList(parameterList)
    {
	    String sysFunName = getEscapedSYSFUN(tok.image);

	    TableName functionName = (TableName) nodeFactory.getNode(
								C_NodeTypes.TABLE_NAME,
								SchemaDescriptor.IBM_SYSTEM_FUN_SCHEMA_NAME,
								sysFunName,
								new Integer(0),
								new Integer(0),
								getContextManager());

		MethodCallNode methodNode = (MethodCallNode) nodeFactory.getNode(
								C_NodeTypes.STATIC_METHOD_CALL_NODE,
								functionName,
								null,
								getContextManager());

		methodNode.addParms(parameterList);

		/*
		** Assume this is being returned to the SQL domain.  If it turns
		** out that this is being returned to the Java domain, we will
		** get rid of this node.
		*/
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
								methodNode,
								getContextManager());
     }
}


/*
 * <A NAME="timestampArithmeticFuncion">timestampArithmeticFuncion</A>
 */
ValueNode
timestampArithmeticFuncion() throws StandardException :
{
    ValueNode intervalType;
    ValueNode tstamp1;
    ValueNode tstamp2;
    ValueNode count;
}
{
    <TIMESTAMPADD> <LEFT_PAREN> intervalType = jdbcIntervalType() <COMMA>
       count = additiveExpression(null,0) <COMMA>
       tstamp1 = additiveExpression(null,0) <RIGHT_PAREN>
    {
        return (ValueNode) nodeFactory.getNode( C_NodeTypes.TIMESTAMP_ADD_FN_NODE,
                                                tstamp1,
                                                intervalType,
                                                count,
                                                ReuseFactory.getInteger( TernaryOperatorNode.TIMESTAMPADD),
                                                null,
                                                getContextManager());
    }
|
    <TIMESTAMPDIFF> <LEFT_PAREN> intervalType = jdbcIntervalType() <COMMA>
       tstamp1 = additiveExpression(null,0) <COMMA>
       tstamp2 = additiveExpression(null,0) <RIGHT_PAREN>
    {
        return (ValueNode) nodeFactory.getNode( C_NodeTypes.TIMESTAMP_DIFF_FN_NODE,
                                                tstamp2,
                                                intervalType,
                                                tstamp1,
                                                ReuseFactory.getInteger( TernaryOperatorNode.TIMESTAMPDIFF),
                                                null,
                                                getContextManager());
    }
}

/*
 * <A NAME="jdbcIntervalType">jdbcIntervalType</A>
 */
ValueNode jdbcIntervalType() throws StandardException :
{
}
{
    <SQL_TSI_FRAC_SECOND>
    {
        return getJdbcIntervalNode( DateTimeDataValue.FRAC_SECOND_INTERVAL);
    }
|
    <SQL_TSI_SECOND>
    {
        return getJdbcIntervalNode( DateTimeDataValue.SECOND_INTERVAL);
    }
|
    <SQL_TSI_MINUTE>
    {
        return getJdbcIntervalNode( DateTimeDataValue.MINUTE_INTERVAL);
    }
|
    <SQL_TSI_HOUR>
    {
        return getJdbcIntervalNode( DateTimeDataValue.HOUR_INTERVAL);
    }
|
    <SQL_TSI_DAY>
    {
        return getJdbcIntervalNode( DateTimeDataValue.DAY_INTERVAL);
    }
|
    <SQL_TSI_WEEK>
    {
        return getJdbcIntervalNode( DateTimeDataValue.WEEK_INTERVAL);
    }
|
    <SQL_TSI_MONTH>
    {
        return getJdbcIntervalNode( DateTimeDataValue.MONTH_INTERVAL);
    }
|
    <SQL_TSI_QUARTER>
    {
        return getJdbcIntervalNode( DateTimeDataValue.QUARTER_INTERVAL);
    }
|
    <SQL_TSI_YEAR>
    {
        return getJdbcIntervalNode( DateTimeDataValue.YEAR_INTERVAL);
    }
}

/*
 * <A NAME="numericValueFunction">numericValueFunction</A>
 */
ValueNode
numericValueFunction() throws StandardException :
{
	ValueNode	value;
	int			field;
}
{
    /*
     * NOTE: If you add a new rule here, you must add the appropriate
     *    LOOKAHEAD rule to miscBuiltins().
     */

    <ABS>  value = absFunction()
    {
		return value;
    }
|
    <ABSVAL>  value = absFunction()
    {
		return value;
    }
|
    <SQRT> <LEFT_PAREN> value = additiveExpression(null,0) <RIGHT_PAREN>
    {
        return (ValueNode)nodeFactory.getNode(
                C_NodeTypes.SQRT_OPERATOR_NODE,
                value,
                getContextManager());
    }
|
	/* MOD(int, int)
	*/
	<MOD> value = modFunction()
	{
		return value;
	}
|
	<IDENTITY_VAL_LOCAL> <LEFT_PAREN> <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
						C_NodeTypes.IDENTITY_VAL_NODE,
						getContextManager());
	}
}

/*
 * <A NAME="coalesceFunction">coalesceFunction</A>
 */
ValueNode
coalesceFunction(String coalesceOrValue) throws StandardException :
{
    ValueNodeList expressionList = (ValueNodeList) nodeFactory.getNode(
	C_NodeTypes.VALUE_NODE_LIST,
	getContextManager());
}
{
    <LEFT_PAREN>
        coalesceExpression(expressionList)
		( <COMMA> coalesceExpression(expressionList) )*
    <RIGHT_PAREN>
    {
        return (ValueNode)nodeFactory.getNode(
                C_NodeTypes.COALESCE_FUNCTION_NODE,
                coalesceOrValue,
                expressionList,
                getContextManager());
    }
}

/*
 * <A NAME="coalesceExpression">coalesceExpression</A>
 */
void
coalesceExpression(ValueNodeList expressionList) throws StandardException :
{
	ValueNode	expression;
}
{
	expression = additiveExpression(null,0)
	{
		expressionList.addElement(expression);
	}
}

/*
 * <A NAME="absFunction">absFunction</A>
 */
ValueNode
absFunction() throws StandardException :
{
    ValueNode value;
}
{
    <LEFT_PAREN> value = additiveExpression(null,0) <RIGHT_PAREN>
    {
        return (ValueNode)nodeFactory.getNode(
                C_NodeTypes.ABSOLUTE_OPERATOR_NODE,
                value,
                getContextManager());
    }
}
/*
 * <A NAME="modFunction">modFunction</A>
 */
ValueNode
modFunction() throws StandardException :
{
    ValueNode int1;
	ValueNode int2;
}
{
    <LEFT_PAREN> int1 = additiveExpression(null,0) <COMMA>
            int2 = additiveExpression(null,0) <RIGHT_PAREN>
    {
        return (ValueNode)nodeFactory.getNode(
                C_NodeTypes.MOD_OPERATOR_NODE,
                int1, int2,
                getContextManager());
    }
}

/*
 * <A NAME="datetimeField">datetimeField</A>
 */
int
datetimeField() :
{
	int field;
}
{
	field = nonSecondDatetimeField()
	{
		return field;
	}
|
	<SECOND>
	{
		return DateTimeDataValue.SECOND_FIELD;
	}
}


ValueNode
characterValueFunction() throws StandardException :
{
	ValueNode 	value = null;
	ValueNode 	str1 = null;
	ValueNode 	str2;
	ValueNode 	locale = null;
	Token		upperTok = null;
	Token		lowerTok = null;
	ValueNode	startPosition;
    ValueNode	length = null;
}
{
	<SUBSTR> <LEFT_PAREN> value = additiveExpression(null,0) <COMMA> startPosition = additiveExpression(null,0) [ <COMMA> length = additiveExpression(null,0) ] <RIGHT_PAREN>
	{
        return getSubstringNode( value, startPosition, length, Boolean.FALSE );
	}
|
    <RIGHT> <LEFT_PAREN> value = additiveExpression(null,0) <COMMA> length = additiveExpression(null,0) <RIGHT_PAREN>
    {
        return getRightOperatorNode(value, length);
    }
|
    <LEFT> <LEFT_PAREN> value = additiveExpression(null,0) <COMMA> length = additiveExpression(null,0) <RIGHT_PAREN>
    {
        return getLeftOperatorNode(value, length);
    }
|
	<REPLACE> <LEFT_PAREN> value = additiveExpression(null,0) <COMMA> str1 = additiveExpression(null,0) <COMMA> str2 = additiveExpression(null,0) <RIGHT_PAREN>
	{
        return getReplaceNode( value, str1, str2 );
	}
|
	( upperTok = <UPPER> | lowerTok = <LOWER> ) <LEFT_PAREN> value = additiveExpression(null,0) [ <COMMA> locale = additiveExpression(null,0) ] <RIGHT_PAREN>
	{
	    if (locale == null)
	    {
		    return (ValueNode) nodeFactory.getNode(
					C_NodeTypes.SIMPLE_STRING_OPERATOR_NODE,
					value,
					(upperTok != null) ? "upper" : "lower",
					getContextManager());
		}
		else
		{
		    return (ValueNode) nodeFactory.getNode(
					C_NodeTypes.SIMPLE_LOCALE_STRING_OPERATOR_NODE,
					value,
					locale,
					(upperTok != null) ? "upperWithLocale" : "lowerWithLocale",
					getContextManager());
		}

	}
|
	( upperTok = <UCASE> | lowerTok = <LCASE> ) <LEFT_PAREN> value = additiveExpression(null,0) [ <COMMA> locale = additiveExpression(null,0) ] <RIGHT_PAREN>
	{
	    if (locale == null)
	    {
		    return (ValueNode) nodeFactory.getNode(
					C_NodeTypes.SIMPLE_STRING_OPERATOR_NODE,
					value,
					(upperTok != null) ? "upper" : "lower",
					getContextManager());
		}
		else
		{
		    return (ValueNode) nodeFactory.getNode(
					C_NodeTypes.SIMPLE_LOCALE_STRING_OPERATOR_NODE,
					value,
					locale,
					(upperTok != null) ? "upperWithLocale" : "lowerWithLocale",
					getContextManager());
		}
	}
|
    /* REPEAT(string, num) */
    <REPEAT> <LEFT_PAREN> str1 = additiveExpression(null,0) <COMMA>
            str2 = additiveExpression(null,0) <RIGHT_PAREN>
    {
        return (ValueNode) nodeFactory.getNode(
	    					C_NodeTypes.REPEAT_OPERATOR_NODE,
		    				str1,
			    			str2,
			    			ReuseFactory.getInteger(BinaryOperatorNode.REPEAT),
						    getContextManager());
    }
|
	value = trimFunction()
	{
		return value;
	}
|
    value = stripFunction()
    {
        return value;
    }
|
    /* LOCATE( string1, string2[, start] )
     * LOCATE is a SQLJ reserved word.
     */
    <LOCATE> <LEFT_PAREN> str1 = additiveExpression(null,0) <COMMA>
            str2 = additiveExpression(null,0)
            [ <COMMA> value = additiveExpression(null,0) ]
            <RIGHT_PAREN>
    {
		// if start is missing, start is equal to 1
        return (ValueNode) nodeFactory.getNode(
                            C_NodeTypes.LOCATE_FUNCTION_NODE,
                            str1,
                            str2,
                            (value == null) ? getNodeFactory().getNode(
                                        C_NodeTypes.INT_CONSTANT_NODE,
                                        ReuseFactory.getInteger(1),
                                        getContextManager() )
											: value,
                            ReuseFactory.getInteger(TernaryOperatorNode.LOCATE),
                            null,
                            getContextManager());
    }
}


ValueNode
trimFunction() throws StandardException :
{
	ValueNode	source;
	Integer		trimType;
	ValueNode	ansiTrimNode;
}
{
	trimType = trimType() <LEFT_PAREN> source = additiveExpression(null,0) <RIGHT_PAREN>
	{
		return getTrimOperatorNode(trimType, null, source, null);
	}
|
	<TRIM> ansiTrimNode = ansiTrim()
	{
		return ansiTrimNode;
	}

}


ValueNode
ansiTrim() throws StandardException  :
{
    Integer trimSpec = ReuseFactory.getInteger(StringDataValue.BOTH);
    ValueNode trimChar = null;
    ValueNode trimSource = null;
}
{
    LOOKAHEAD ({ansiTrimSpecFollows()})
    <LEFT_PAREN> trimSpec = ansiTrimSpec()
    (
         // LEADING FROM <source>
         LOOKAHEAD(<FROM>)
         <FROM> trimSource = additiveExpression(null,0) <RIGHT_PAREN>
         {
             return getTrimOperatorNode(trimSpec, trimChar, trimSource, null);
         }
     |
         // LEADING <char> FROM <source>
         trimChar = additiveExpression(null,0) <FROM> trimSource = additiveExpression(null,0) <RIGHT_PAREN>
         {
             return getTrimOperatorNode(trimSpec, trimChar, trimSource, null);
         }
    )
|
    LOOKAHEAD ({!ansiTrimSpecFollows()})
    <LEFT_PAREN> trimChar = additiveExpression(null,0)
    (
        <FROM> trimSource = additiveExpression(null,0) <RIGHT_PAREN>
        {
            return getTrimOperatorNode(trimSpec, trimChar, trimSource, null);
        }
    |
        <RIGHT_PAREN>
        {
            // expr was trim(e)-- we assigned e to trimChar but it is really the trimSource
            return getTrimOperatorNode(trimSpec, null, trimChar, null);
        }
    )
}

Integer
ansiTrimSpec() :
{
}
{
	(<TRAILING>|<T>)
	{
		return ReuseFactory.getInteger(StringDataValue.TRAILING);
	}
|
	(<LEADING>|<L>)
	{
		return ReuseFactory.getInteger(StringDataValue.LEADING);
	}
|
	(<BOTH>|<B>)
	{
		return ReuseFactory.getInteger(StringDataValue.BOTH);
	}
}


Integer
trimType() :
{
}
{
	<RTRIM>
	{
		return ReuseFactory.getInteger(StringDataValue.TRAILING);
	}
|
	<LTRIM>
	{
		return ReuseFactory.getInteger(StringDataValue.LEADING);
	}
}

ValueNode
stripFunction() throws StandardException :
{
	ValueNode	source;
	Integer		trimType;
	ValueNode	ansiTrimNode;
}
{
	<STRIP> ansiTrimNode = ansiStrip()
	{
		return ansiTrimNode;
	}

}

ValueNode
ansiStrip() throws StandardException  :
{
    Integer trimSpec = ReuseFactory.getInteger(StringDataValue.BOTH);
    ValueNode trimChar = null;
    ValueNode trimSource = null;
}
{
    <LEFT_PAREN> trimSource = additiveExpression(null,0)
    (
        LOOKAHEAD ({ansiTrimSpecFollows()})
        (
            <COMMA> trimSpec = ansiTrimSpec()
            (
                // <source> COMMA LEADING COMMA <trimChar>
                <COMMA> trimChar = additiveExpression(null,0) <RIGHT_PAREN>
                {
                    return getTrimOperatorNode(trimSpec, trimChar, trimSource, null);
                }
            |
                // <source> COMMA LEADING
                <RIGHT_PAREN>
                {
                    return getTrimOperatorNode(trimSpec, null, trimSource, null);
                }
            )
        )
    |
        LOOKAHEAD ({!ansiTrimSpecFollows()})
        (
            <COMMA>
            (
                // <source> COMMA COMMA <trimChar>
                <COMMA> trimChar = additiveExpression(null,0) <RIGHT_PAREN>
                {
                    return getTrimOperatorNode(trimSpec, trimChar, trimSource, null);
                }
            |
                <RIGHT_PAREN>
                {
                    return getTrimOperatorNode(trimSpec, null, trimSource, null);
                }
            )
        |
            // <source>
            <RIGHT_PAREN>
            {
                return getTrimOperatorNode(trimSpec, null, trimSource, null);
            }
        )
    )
}



/*
 * <A NAME="valueExpressionPrimary">valueExpressionPrimary</A>
 */
ValueNode
valueExpressionPrimary() throws StandardException :
{
	ValueNode	value;
	int			tokKind;
}
{
	/* This LOOKAHEAD is required to distinguish
	 * a escapedValueFunction() from other escaped
	 * clauses. The former always has an FN as its
	 * second token.
	 */
	LOOKAHEAD( { escapedValueFunctionFollows() } )
	<LEFT_BRACE> <FN> value = escapedValueFunction() <RIGHT_BRACE>
	{
		return value;
	}
|
	LOOKAHEAD({getToken(2).kind == SCHEMA || getToken(2).kind == SQLID})
	<CURRENT> (<SCHEMA> | <SQLID>)
	{
		return (ValueNode) nodeFactory.getNode(
						C_NodeTypes.CURRENT_SCHEMA_NODE,
						getContextManager());
	}
|
    LOOKAHEAD({getToken(2).kind == SESSION_PROPERTY})
    <CURRENT> <SESSION_PROPERTY>
    {
        return (ValueNode) nodeFactory.getNode(
                    C_NodeTypes.CURRENT_SESSION_PROPERTY_NODE,
                    getContextManager());
    }
|
	LOOKAHEAD({getToken(2).kind == ISOLATION})
	<CURRENT> <ISOLATION>
	{
		return (ValueNode) nodeFactory.getNode(
						C_NodeTypes.CURRENT_ISOLATION_NODE,
						getContextManager());
	}
|
	/* Omitted "case_expression" */
	value = valueSpecification()
	{
		return value;
	}
|
	// This LOOKAHEAD is required to distinguish a newInvocation() from
	// an aggregateNode() and a columnReference(). It is necessary because
	// NEW is not a reserved word.
	LOOKAHEAD( { newInvocationFollows(1) } )
	value = newInvocation()
	{
		return value;
	}
|
        // This LOOKAHEAD is required to distinguish an
        // window/aggregate function from
	// miscBuiltins(). Both can start with an identifier.

	LOOKAHEAD( { windowOrAggregateFunctionFollows() } )
	value = windowOrAggregateFunctionNode()
	{
		return value;
	}
|
	// This LOOKAHEAD is required because both miscBuiltins() and
	// columnReference can start with an identifier()
	LOOKAHEAD( { miscBuiltinFollows() } )
	value = miscBuiltins()
	{
		return value;
	}
|
	value = columnReference()
	{
		return value;
	}
|
	<LEFT_PAREN>
	(
		// This LOOKAHEAD is required because a subquery can have
		// queryExpressions nested arbitrarily deep inside of parentheses,
		// so both subquery() and valueExpression() can start with
		// LEFT_PAREN. We disambiguate this case by only considering it
		// to be a subquery if it starts with SELECT or VALUES, which
		// are the first tokens to come after the LEFT_PAREN in a subquery.
		LOOKAHEAD( {getToken(1).kind == SELECT || getToken(1).kind == VALUES} )
		value = subquery(SubqueryNode.EXPRESSION_SUBQUERY, null)
		|

		LOOKAHEAD( {getToken(1).kind == LEFT_BRACKET})
		 value = valueExpression()
		|

		/*
		** NOTE: The optional intervalQualfier() here makes sense only for
		** the MINUS operator.  We will have to add a semantic check that the
		** valueExpression() here is a MINUS operator if the intervalQualifier
		** is supplied.
		*/

		value = valueExpression()
	)
	<RIGHT_PAREN>
	{
		return value;
	}
|
	value = castSpecification()
	{
		return value;
	}
|
    value = nextValueExpression()
	{
		return value;
	}
}

/*
 * <A NAME="miscBuiltins">miscBuiltins</A>
 */
ValueNode
miscBuiltins() throws StandardException :
{
	ValueNode value;
}
{
    /*
     * If you add rule to miscBuiltinsCore(), you must add the appropriate
     *     LOOKAHEAD rule here.
     * SQRT and LOCATE are non-reserved keywords, so we need to disambiguate
     *     the grammar: "SQRT(" and "LOCATE(" introduce the SQRT and LOCATE
     *     built-in functions, not a static method invocation alias.
     */
    LOOKAHEAD( {
             ( (getToken(1).kind == GET_CURRENT_CONNECTION ||
                getToken(1).kind == ABS ||
                getToken(1).kind == ABSVAL ||
                getToken(1).kind == SQRT ||
                getToken(1).kind == MOD ||
                getToken(1).kind == COALESCE ||
                getToken(1).kind == NVL ||
                getToken(1).kind == VALUE ||
                getToken(1).kind == SUBSTRING ||
                getToken(1).kind == SUBSTR ||
                getToken(1).kind == RIGHT ||
                getToken(1).kind == LEFT ||
                getToken(1).kind == REPEAT ||
                getToken(1).kind == REPLACE ||
                getToken(1).kind == UPPER ||
                getToken(1).kind == LOWER ||
                getToken(1).kind == UCASE ||
                getToken(1).kind == LCASE ||
                getToken(1).kind == LTRIM ||
                getToken(1).kind == RTRIM ||
                getToken(1).kind == TRIM ||
                getToken(1).kind == STRIP ||
                getToken(1).kind == DATE ||
                getToken(1).kind == TIME ||
                getToken(1).kind == TIMESTAMP ||
                getToken(1).kind == TRUNC ||
                getToken(1).kind == TRUNCATE ||
                getToken(1).kind == DOUBLE ||
                getToken(1).kind == CHAR ||
                getToken(1).kind == VARCHAR ||
                getToken(1).kind == INTEGER ||
                getToken(1).kind == INT ||
                getToken(1).kind == SMALLINT ||
                getToken(1).kind == ARRAY ||
                getToken(1).kind == TINYINT ||
                getToken(1).kind == LONGINT ||
                getToken(1).kind == YEAR ||
                getToken(1).kind == QUARTER ||
                getToken(1).kind == MONTH ||
                getToken(1).kind == MONTHNAME ||
                getToken(1).kind == WEEK ||
                getToken(1).kind == WEEKDAY ||
                getToken(1).kind == WEEKDAYNAME ||
                getToken(1).kind == DAYOFYEAR ||
                getToken(1).kind == DAY ||
                getToken(1).kind == HOUR ||
                getToken(1).kind == MINUTE ||
                getToken(1).kind == SECOND ||
                getToken(1).kind == EXTRACT ||
                getToken(1).kind == LENGTH ||
                getToken(1).kind == LOCATE ||
                getToken(1).kind == DIGITS ||
                getToken(1).kind == XMLPARSE ||
                getToken(1).kind == XMLSERIALIZE ||
                getToken(1).kind == XMLEXISTS ||
                getToken(1).kind == XMLQUERY ||
                getToken(1).kind == GROUPING) &&
                getToken(2).kind == LEFT_PAREN
              )
    } )
	/* miscBuiltins() are composed of the core
	 * system, string and numeric functions,
	 * date functions
	 * and static method calls.
	 */
	value = miscBuiltinsCore( false /* not JDBC escape */)
	{
		return value;
	}
|
	value = datetimeValueFunction()
	{
		return value;
	}
|
    value = timestampArithmeticFuncion()
    {
        return value;
    }
|
	/* This is where we build a node for static method aliases */
	value = routineInvocation()
	{
		return value;
	}
}

ValueNode
miscBuiltinsCore( boolean isJDBCEscape) throws StandardException :
{
	ValueNode value;
}
{
	/* miscBuiltinsCore() are the core
	 * system, string and numeric functions.
	 * NOTE: date functions not currently considered
	 * core for purposes of the grammar since
	 * they can only be escaped when they appear
	 * as functions (not special registers).
     *
     * NOTE: If you add a new rule here, you must add the appropriate
     *    LOOKAHEAD rule to miscBuiltins().
	 */

	<GET_CURRENT_CONNECTION> <LEFT_PAREN> <RIGHT_PAREN>
	{
		checkInternalFeature("GETCURRENTCONNECTION()");
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
								nodeFactory.getNode(
									C_NodeTypes.GET_CURRENT_CONNECTION_NODE,
									getContextManager()),
								getContextManager());
	}
|
	value = numericValueFunction()
	{
		return value;
	}
|
	value = characterValueFunction()
	{
		return value;
	}
|
	value = dataTypeScalarFunction()
	{
		return value;
	}
|
	<COALESCE>  value = coalesceFunction("COALESCE")
	{
		return value;
	}
|
	<NVL>  value = coalesceFunction("COALESCE")
	{
		return value;
	}
|
	<VALUE>  value = coalesceFunction("VALUE")
	{
		return value;
	}
|
	<LENGTH> <LEFT_PAREN> value = additiveExpression(null,0) <RIGHT_PAREN>
	{
		ContextManager	localCM = getContextManager();
                if( isJDBCEscape)
                        return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.CHAR_LENGTH_OPERATOR_NODE,
								getTrimOperatorNode(
									ReuseFactory.getInteger(StringDataValue.TRAILING),
									null,
									value,
									localCM),
								localCM);
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.DB2_LENGTH_OPERATOR_NODE,
                                                        value,
                                                        localCM);
	}
|
    <GROUPING> <LEFT_PAREN> value = additiveExpression(null,0) <RIGHT_PAREN>
    {
        return (ValueNode) nodeFactory.getNode(
        							C_NodeTypes.GROUPING_FUNCTION_NODE,
                                    value,
                                    getContextManager());
    }
|
	<DIGITS> <LEFT_PAREN> value = additiveExpression(null,0) <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.DIGITS_OPERATOR_NODE,
                                                        value,
                                                        ReuseFactory.getInteger(UnaryOperatorNode.DIGITS_OP),
                                                        null,
                                                        getContextManager());
	}
|
	value = xmlFunction()
	{
		return value;
	}
}


/*
 * <A NAME="dataTypeScalarFunction">dataTypeScalarFunction</A>
 */
ValueNode
	dataTypeScalarFunction() throws StandardException :
{
	DataTypeDescriptor dts;
	ValueNode value;           //converted result
	ValueNode operand;
	int charType;
	int length = -1;
}
{
	//Note: When you add a new data type function, in addition to adding it
	// here, you need to add it to miscBuiltins()
	value = dateTimeScalarFunction()
	{
		return value;
	}
	|
	 dts = numericFunctionType() <LEFT_PAREN> operand = additiveExpression(null,0) <RIGHT_PAREN>
	  {
			value = (ValueNode) nodeFactory.getNode(
									C_NodeTypes.CAST_NODE,
									operand,
									dts,
									getContextManager());
			((CastNode) value).setForDataTypeFunction(true);
			((CastNode) value).setForExternallyGeneratedCASTnode();

			return value;
	  }
	 | charType = charOrVarchar() <LEFT_PAREN> operand = additiveExpression(null,0) [ <COMMA> length = length() ] <RIGHT_PAREN>
	{
		// Always check db2 limits for this function. It's new
		checkTypeLimits(charType,length);
		value = (ValueNode) nodeFactory.getNode(
												C_NodeTypes.CAST_NODE,
												operand,
												new Integer(charType),
												new Integer(length),
												getContextManager());

		((CastNode) value).setForDataTypeFunction(true);
		((CastNode) value).setForExternallyGeneratedCASTnode();
		return value;
	}
}

/*
 * <A NAME="xmlFunction">xmlFunction</A>
 *
 * This method parses the built-in functions used with
 * the XML datatype.
 *
 */
ValueNode
	xmlFunction() throws StandardException :
{
	ValueNode value;
	checkVersion(DataDictionary.DD_VERSION_DERBY_10_1, "XML");

	// We only allow XML operations if the classpath has all
	// of the required external classes (namley, JAXP and Xalan).
	com.splicemachine.db.iapi.types.XML.checkXMLRequirements();
}
{
	<XMLPARSE> <LEFT_PAREN>
		xmlDocOrContent() value = xmlParseValue() <RIGHT_PAREN>
	{
		return value;
	}
|
	<XMLSERIALIZE> <LEFT_PAREN> value = xmlSerializeValue() <RIGHT_PAREN>
	{
		return value;
	}
|
	<XMLEXISTS> <LEFT_PAREN> value = xmlQueryValue(true) <RIGHT_PAREN>
	{
		return value;
	}
|
	<XMLQUERY> <LEFT_PAREN> value = xmlQueryValue(false) <RIGHT_PAREN>
	{
		return value;
	}
}

/*
 * <A NAME="xmlParseValue">xmlParseValue</A>
 *
 * Syntax is as follows:
 *
 *     XMLPARSE( DOCUMENT <string-value-expression> PRESERVE WHITESPACE )
 *
 * The result of this operation will be an XML value, which can either
 * be used transiently or else can be stored persistently in a table that
 * has an XML column.  For example:
 *
 * ij> CREATE TABLE x_table (id INT, xdoc XML);
 * 0 rows inserted/updated/deleted
 * ij> INSERT INTO x_table VALUES (1, XMLPARSE(DOCUMENT '<simp> doc </simp>'
 * PRESERVE WHITESPACE));
 * 1 row inserted/updated/deleted
 *
 * We only allow XML documents (as opposed to XML content) to be
 * parsed into XML values.  Note that we require the "PRESERVE WHITESPACE"
 * keyword to be explicit; this is because the SQL/XML (2003) spec says that
 * if no whitespace option is given, the default is "STRIP WHITESPACE", which
 * we don't support (yet).
 *
 * By the time we get to this method, the "DOCUMENT" keyword has already
 * been parsed.
 *
 */
ValueNode
	xmlParseValue() throws StandardException :
{
	ValueNode value;
	boolean wsOption;
}
{
	value = additiveExpression(null,0) wsOption = xmlPreserveWhitespace() {
		return (ValueNode) nodeFactory.getNode(
					C_NodeTypes.XML_PARSE_OPERATOR_NODE,
					value,
					ReuseFactory.getInteger(UnaryOperatorNode.XMLPARSE_OP),
					new Object[] {(wsOption ? Boolean.TRUE : Boolean.FALSE)},
					getContextManager());
	}
}

/*
 * <A NAME="xmlPreserveWhitespace">xmlPreserveWhitespace</A>
 *
 * For now, we only support the PRESERVE WHITESPACE option.
 *
 */
boolean
	xmlPreserveWhitespace() throws StandardException :
{
}
{
	LOOKAHEAD({ (getToken(1).kind != STRIP) &&
		(getToken(1).kind != PRESERVE) })
	{
		throw StandardException.newException(
			SQLState.LANG_XML_KEYWORD_MISSING, "PRESERVE WHITESPACE",
			ReuseFactory.getInteger(getToken(1).beginLine),
			ReuseFactory.getInteger(getToken(1).beginColumn));
	}
|
	<STRIP> <WHITESPACE>
	{ // don't preserve whitespace.
		throw StandardException.newException(
			SQLState.LANG_UNSUPPORTED_XML_FEATURE, "STRIP WHITESPACE");
	}
|
	<PRESERVE> <WHITESPACE>
	{ // must preserve whitespace.
		return true;
	}
}

/*
 * <A NAME="xmlSerializeValue">xmlSerializeValue</A>
 *
 * Syntax is as follows:
 *
 *   XMLSERIALIZE( <xml-value-expression> AS <string-data-type> )
 *
 * The result of this operation will be a string value with the type specified
 * by the user.  For example:
 *
 * ij> SELECT id, XMLSERIALIZE(xdoc AS varchar(30)) FROM x_table;
 * ID         |2
 * ------------------------------------------
 * 1          |<simp> doc </simp>
 *
 */
ValueNode
	xmlSerializeValue() throws StandardException :
{
	ValueNode value;
	DataTypeDescriptor targetType;
}
{
	value = additiveExpression(null,0)
		targetType = xmlSerializeTargetType()
	{
		return (ValueNode) nodeFactory.getNode(
					C_NodeTypes.XML_SERIALIZE_OPERATOR_NODE,
					value,
					ReuseFactory.getInteger(UnaryOperatorNode.XMLSERIALIZE_OP),
					new Object[] {targetType},
					getContextManager());
	}
}

/*
 * <A NAME="xmlSerializeTargetType">xmlSerializeTargetType</A>
 *
 * Parse the target type of an XMLSERIALIZE operation.
 *
 */
DataTypeDescriptor xmlSerializeTargetType() throws StandardException :
{
	DataTypeDescriptor targetType;
}
{
	LOOKAHEAD({ (getToken(1).kind != AS) })
	{
		throw StandardException.newException(
			SQLState.LANG_XML_KEYWORD_MISSING, "AS",
			ReuseFactory.getInteger(getToken(1).beginLine),
			ReuseFactory.getInteger(getToken(1).beginColumn));
	}
|
	<AS> targetType = dataTypeDDL()
	{
		return targetType;
	}
}

/*
 * <A NAME="xmlQueryValue">xmlQueryValue</A>
 *
 * This method is used for parsing the XMLEXISTS and XMLQUERY operators
 * (which operator depends on the received boolean parameter).
 *
 * For XMLEXISTS, the syntax is as follows:
 *
 *   XMLEXISTS( <xpath-expression> PASSING BY REF <xml-value-expression> )
 *
 * The result of this operation will be a boolean true/false/unknown value:
 *   -- Unknown if either <xquery-expression> or <xml-value-expression> is null;
 *   -- True if evaluation of the given query expression against the
 *      given xml-value returns at least one node.
 *   -- False otherwise.
 *
 * For example:
 *
 * ij> SELECT id FROM x_table WHERE XMLEXISTS('/simple' PASSING BY REF xdoc);
 * ID
 * -----------
 * 1
 *
 * ====
 *
 * For XMLQUERY, the syntax is as follows:
 *
 *   XMLQUERY( <xquery-expression>
 *      PASSING BY REF <xml-value-expression>
 *      [ RETURNING SEQUENCE [ BY REF ] ]
 *      EMPTY ON EMPTY
 *   )
 *
 * The result of this operation will be an XMLDataValue.
 *
 * For example:
 *
 * ij> SELECT XMLSERIALIZE(
 *       XMLQUERY('/simple' PASSING BY REF xdoc EMPTY ON EMPTY) AS CHAR(100));
 * ID
 * -----------
 * <simp> doc </simp>
 *
 */
ValueNode
	xmlQueryValue(boolean existsOnly) throws StandardException :
{
	// The query expression (currently must be an expression
	// supported by Xalan--i.e. XPath only).
	ValueNode xqueryExpr = null;

	// Context item for the query; not required by SQL/XML spec,
	// but required by Derby for now.
	ValueNode xmlValue = null;

	// User-specified default passing mechanism.  Since Derby only
	// supports one type of passing mechanism--BY REF--this value
	// isn't currently used.
	short defaultPassingMech = -1;
}
{
	xqueryExpr = additiveExpression(null, 0)
	<PASSING> defaultPassingMech = xmlPassingMechanism()
		xmlValue = xqVarList()
	(
		LOOKAHEAD( { !existsOnly } )
		[ xqReturningClause() [ xmlPassingMechanism() ] ]
			xqEmptyHandlingClause()
		{ /* Right now, we only support one kind of returning clause
		   * (RETURNING SEQUENCE) and one kind of handling clause
		   * (EMPTY ON EMPTY), so there's nothing more to do here--
		   * we just needed to check the syntax.  In the future
		   * we may need to add more logic here to support the
		   * other options.  Note: if no returning clause is
		   * specified, RETURNING SEQUENCE is implied (because
		   * that's all we support).
		   */
		}
	|
		LOOKAHEAD( { existsOnly } )
		{ /* For XMLEXISTS there's nothing more to parse.  We need
		   * this LOOKAHEAD in order to tell the parser that we're
		   * done parsing and thus it shouldn't look for (nor allow)
		   * any more tokens (neither xqReturningClause() nor
		   * xqEmptyHandlingClause() is allowed for the XMLEXISTS
		   * operator).
		   */
		}
	)
	{
		ValueNode vNode = (ValueNode) nodeFactory.getNode(
			(existsOnly
				? C_NodeTypes.XML_EXISTS_OPERATOR_NODE
				: C_NodeTypes.XML_QUERY_OPERATOR_NODE),
			xqueryExpr,
			xmlValue,
			(existsOnly
				? ReuseFactory.getInteger(BinaryOperatorNode.XMLEXISTS_OP)
				: ReuseFactory.getInteger(BinaryOperatorNode.XMLQUERY_OP)),
			getContextManager());

		return vNode;
	}
}

/**
 * <A NAME="xqVarList">xqVarList</A>
 *
 * Parse a list of XML query variables, which can include at most one
 * XML value to be used as the "context item" for the query.  If
 * such a context item was found, return that item; for all other
 * variable declarations we currently throw a "not supported" error
 * because Xalan doesn't allowing binding of variables.
 */

ValueNode xqVarList()
	throws StandardException :
{
	// Placeholder for the XML context item as we parse the
	// argument list.
	ValueNode [] xmlValue = new ValueNode [] { (ValueNode)null };
}
{
	xqVariable(xmlValue)
		( <COMMA> xqVariable(xmlValue) )*
	{
		return xmlValue[0];
	}
}

/**
 * <A NAME="xqVariable">xqVariable</A>
 *
 * Parse an XML query variable.  If the argument is an XML value
 * to be used as the "context item" for a query, then store the
 * value in the first slot of the received ValueNode array;
 * otherwise, throw a "not supported" errror (for now).
 */

void xqVariable(ValueNode [] xmlVal) throws StandardException :
{
	ValueNode curVal;
	String varName = null;
	short passingMech = -1;
}
{
	curVal = additiveExpression(null,0)
	[
		LOOKAHEAD( { getToken(1).kind == AS } )
		<AS> varName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
		{
			/* From XQuery 1.0: "The <identifier> I contained in XQV
			 * shall be an XML 1.1 NCName."  From XML 1.1:
			 *
			 *   [4] NCName ::= (Letter | '_') (NCNameChar)*
			 *   [5] NCNameChar ::= Letter | Digit | '.' | '-' | '_' |
			 *                    CombiningChar | Extender
			 *
			 * Since Derby's definition of an "identifier" is a subset
			 * of NCName, we just use Derby's definition.  This means
			 * that some valid NCNames won't be recognized by Derby--
			 * but since the ones we _do_ recognize are all still valid
			 * NCNames, we're not breaking any rules.
			 */

			/* All of that said, since we use Xalan as the underlying
			 * query engine and Xalan doesn't support variable binding,
			 * there's no point in letting the user specify variables
			 * right now.  So we disallow it.  In the future we'll have
			 * to add logic here to store the variables and pass them
			 * to the correct operator for binding/execution.
			 */
			throw StandardException.newException(
				SQLState.LANG_UNSUPPORTED_XML_FEATURE, "PASSING ... AS");
		}
	]
	(
		[ passingMech = xmlPassingMechanism() ]
		{
			if (varName == null)
			{
				/* We get here if we just parsed an XML context item.
				 * That said, if we already have one (xmlVal[0] is not
				 * null) then we can't allow second one, per SQL/XML[2006]
				 * (6.17: Syntax Rules:5.b.i): "XMQ shall contain exactly
				 * one <XML query context item> XQCI."
				 */
				if (xmlVal[0] != null)
				{
					throw StandardException.newException(
						SQLState.LANG_MULTIPLE_XML_CONTEXT_ITEMS);
				}

				xmlVal[0] = curVal;

				/* Note: It's possible that a passing mechanism was
				 * specified for the context item; if so its value is
				 * stored in passingMech.  However, we don't actually
			 	 * store that passing mechanism anywhere because we
				 * (currently) only support BY REF, so we know what
			 	 * it has to be.  If we add support for other passing
			 	 * mechanisms (namely, BY VALUE) in the future, we'll
			 	 * have to store the passing mechanism provided by
			 	 * the user and process it at compilation/execution
				 * time.
				 */
			}
		}
	)
	{ // By this time we've parsed everything we need so there's nothing
	  // more to do.  The reason we're left with this empty block is
	  // is that most of the syntax is optional.  We end up here if
	  // none of the optional syntax was given, in which case all we
	  // need to do is store curVal--and we already did that.
	}
}

/*
 * <A NAME="xmlPassingMechanism">xmlPassingMechanism</A>
 *
 * For now, we only support the BY REF option because
 * that gives us better performance (allows us to avoid
 * performing potentially deep copies of XML nodes).  This
 * means that if the same XML value is passed BY REF into
 * two different XML arguments for a single operator, then
 * every node in the first XML argument must have an
 * identical node in the second XML argument, and the
 * ids for both nodes must be the same.  That said,
 * since we don't support variable binding yet, this
 * becomes a non-issue because we can't pass XML values.
 * In the future, though, we may choose to support the
 * passing/binding of variables (the only reason we
 * don't now is because Xalan doesn't support it) and
 * if we do, BY REF should provide better performance
 * due to lack of deep copying.
 */
short
	xmlPassingMechanism() throws StandardException :
{
}
{
	LOOKAHEAD( { getToken(2).kind == REF })
	<BY> <REF>
	{ // pass the XML value by reference
		return com.splicemachine.db.iapi.types.XML.XQ_PASS_BY_REF;
	}
|
	<BY> <VALUE>
	{ // pass a 'copy' of the XML value.
		throw StandardException.newException(
			SQLState.LANG_UNSUPPORTED_XML_FEATURE, "BY VALUE");
	}
}

/*
 * <A NAME="xqReturningClause">xqReturningClause</A>
 *
 * For now we only support "RETURNING SEQUENCE".  The reason
 * is that this applies to the XMLQUERY operator and the
 * results of evaluating a query expression in Xalan against
 * an XML value can be an arbritary sequence of items--including
 * atomic values.  For simplicity we just return the values
 * as they are, without doing any further work.  SQL/XML[2006]
 * says that if we supported RETURNING CONTENT then we'd have
 * to construct an XQuery document from the results--but we don't
 * do that extra work for now, so we just say that we return
 * SEQUENCE.
 *
 * NOTE: This means that we may not be able to store the results
 * of an XMLQUERY operation into a Derby XML column.  Right now
 * an XML column can only hold valid DOCUMENT nodes, which we
 * we define as an XML value whose serialized form can be parsed
 * by a JAXP DocumentBuilder (because that's what Derby's XMLPARSE
 * operator uses and the result is always a Document node).
 * Internally this means that we can only store a sequence if it
 * contains exactly one org.w3c.dom.Node that is an instance of
 * org.w3c.dom.Document.  If the result of an XMLQUERY operation
 * does not fit this criteria then it will *not* be storable into
 * Derby XML columns.
 */
short
	xqReturningClause() throws StandardException :
{
}
{
	LOOKAHEAD( { getToken(2).kind == SEQUENCE } )
	<RETURNING> <SEQUENCE>
	{ // XMLQUERY should return result as a sequence.
	  // NOTE: since Derby XML columns only allow DOCUMENT(UNTYPED),
	  // the result of an XMLQUERY operator that returns SEQUENCE
	  // might not be storable into an XML column.
		return com.splicemachine.db.iapi.types.XML.XQ_RETURN_SEQUENCE;
	}
|
	<RETURNING> <CONTENT>
	{ // XMLQUERY should return 'content'.
		throw StandardException.newException(
			SQLState.LANG_UNSUPPORTED_XML_FEATURE, "RETURNING CONTENT");
	}
}

/*
 * <A NAME="xqEmptyHandlingClause">xqEmptyHandlingClause</A>
 *
 * Defines what the behavior should be when an XMLQUERY operator
 * results in an empty sequence.  For now we just return the
 * empty sequence.
 */
short
	xqEmptyHandlingClause() throws StandardException :
{
}
{
	LOOKAHEAD( { getToken(1).kind == EMPTY })
	<EMPTY> <ON> <EMPTY>
	{ // XMLQUERY should return an empty sequence when result of
	  // the query is an empty sequence (i.e. when there are no
	  // results).
		return com.splicemachine.db.iapi.types.XML.XQ_EMPTY_ON_EMPTY;
	}
|
	<NULL> <ON> <EMPTY>
	{ // XMLQUERY should return a null XML value when result of
	  // the query is an empty sequence (i.e. when there are no
	  // results).
		throw StandardException.newException(
			SQLState.LANG_UNSUPPORTED_XML_FEATURE, "NULL ON EMPTY");
	}
}

/*
 * <A NAME="numericFunctionType">numericFunctionType</A>
 */
DataTypeDescriptor
numericFunctionType() throws StandardException :

{
	DataTypeDescriptor dts;
}
{
	dts = doubleType()
	{
		return dts;
	}
	|
	dts = exactIntegerType()
	{
		return dts;
	}
}

/*
 * <A NAME="dateTimeScalarFunction">dateTimeScalarFunction</A>
 */
ValueNode
dateTimeScalarFunction() throws StandardException :
{
	ValueNode	value;
	ValueNode	timestampNode;
        int             field;
}
{
    /*
     * NOTE: If you add a new rule here, you must add the appropriate
     *    LOOKAHEAD rule to miscBuiltins().
     */
        <TIME> <LEFT_PAREN> value = additiveExpression(null,0) <RIGHT_PAREN>
	{
		ValueNode castValue = (ValueNode) nodeFactory.getNode(
							C_NodeTypes.CAST_NODE,
                                                        value,
                                                        DataTypeDescriptor.getBuiltInDataTypeDescriptor( Types.TIME),
                                                        getContextManager());
		((CastNode) castValue).setForExternallyGeneratedCASTnode();
		return castValue;
    }
|
        <DATE> <LEFT_PAREN> value = additiveExpression(null,0) <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.UNARY_DATE_TIMESTAMP_OPERATOR_NODE,
                                                        value,
                                                        DataTypeDescriptor.getBuiltInDataTypeDescriptor( Types.DATE),
                                                        getContextManager());
    }
|
        <TIMESTAMP> <LEFT_PAREN> value = additiveExpression(null,0) timestampNode = timestampFunctionCompletion( value)
	{
                return timestampNode;
    }
|
        (<TRUNC> | <TRUNCATE>) <LEFT_PAREN>
	{
	    if (miscBuiltinFollows()) {
	        value = miscBuiltins();
        } else {
            value = additiveExpression(null,0);
        }
        return truncateFunctionCompletion(value);
    }
|
        <EXTRACT> <LEFT_PAREN> field = datetimeField() <FROM> value = additiveExpression(null,0) <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.EXTRACT_OPERATOR_NODE,
								ReuseFactory.getInteger(field),
								value,
								getContextManager());
	}
|
        <QUARTER> <LEFT_PAREN> value = additiveExpression(null,0) <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.EXTRACT_OPERATOR_NODE,
								ReuseFactory.getInteger(DateTimeDataValue.QUARTER_FIELD),
								value,
								getContextManager());
	}
|
        <MONTHNAME> <LEFT_PAREN> value = additiveExpression(null,0) <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.EXTRACT_OPERATOR_NODE,
								ReuseFactory.getInteger(DateTimeDataValue.MONTHNAME_FIELD),
								value,
								getContextManager());
	}
|
        <WEEK> <LEFT_PAREN> value = additiveExpression(null,0) <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.EXTRACT_OPERATOR_NODE,
								ReuseFactory.getInteger(DateTimeDataValue.WEEK_FIELD),
								value,
								getContextManager());
	}
|
        field = datetimeField() <LEFT_PAREN> value = additiveExpression(null,0) <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.EXTRACT_OPERATOR_NODE,
								ReuseFactory.getInteger(field),
								value,
								getContextManager());
	}
}


/*
 * <A NAME="truncateFunctionCompletion">truncateFunctionCompletion</A>
 */
ValueNode
truncateFunctionCompletion(ValueNode truncateOperand) throws StandardException :
{
        /* default truncValue to DAY */
        ValueNode truncValue = (CharConstantNode) nodeFactory.getNode(
                               								C_NodeTypes.CHAR_CONSTANT_NODE,
                               								"DAY",  // default to DAY
                               								getContextManager());
}
{
    ( <RIGHT_PAREN> | <COMMA> truncValue = additiveExpression(null,0) <RIGHT_PAREN> )
    {
        return createTruncateTypeNode(truncateOperand, truncValue);
    }
}

/*
 * <A NAME="timestampFunctionCompletion">timestampFunctionCompletion</A>
 */
ValueNode
timestampFunctionCompletion( ValueNode firstArg) throws StandardException :
{
        ValueNode timeValue;
}
{
        <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.UNARY_DATE_TIMESTAMP_OPERATOR_NODE,
                                                        firstArg,
                                                        DataTypeDescriptor.getBuiltInDataTypeDescriptor( Types.TIMESTAMP),
                                                        getContextManager());
        }
|
        <COMMA> timeValue = additiveExpression(null,0) <RIGHT_PAREN>
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.TIMESTAMP_OPERATOR_NODE,
                                                        firstArg,
                                                        timeValue,
                                                        getContextManager());
        }
}

/*
 * <A NAME="booleanLiteral">booleanLiteral</A>
 */
Token
booleanLiteral() :
{
	Token tok;
}
{
	tok = <TRUE>
	{
		return tok;
	}
|
	tok = <FALSE>
	{
		return tok;
	}
}

/*
 * <A NAME="generalValueSpecification">generalValueSpecification</A>
 */
ValueNode
generalValueSpecification() throws StandardException :
{
		ValueNode	parm;
}
{
	parm = dynamicParameterSpecification()
	{
		return parm;
	}
|
	parm = userNode()
	{
		return parm;
	}
|
	parm = currentRoleNode()
	{
		return parm;
	}
}

ValueNode
userNode() throws StandardException :
{
}
{
	<USER>
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.USER_NODE,
								getContextManager());
	}
|
	<CURRENT_USER>
	{
		return (ValueNode) nodeFactory.getNode(
						C_NodeTypes.CURRENT_USER_NODE,
						getContextManager());
	}
|
	<SESSION_USER>
	{
		return (ValueNode) nodeFactory.getNode(
						C_NodeTypes.SESSION_USER_NODE,
						getContextManager());
	}
|
    <GROUP_USER>
    {
        return (ValueNode) nodeFactory.getNode(
                        C_NodeTypes.GROUP_USER_NODE,
        						getContextManager());
    }
}


/*
 * <A NAME="currentRoleNode">currentRoleNode</A>
 */
ValueNode
currentRoleNode() throws StandardException :
{
}
{
	<CURRENT_ROLE>
	{
		checkVersion( DataDictionary.DD_VERSION_DERBY_10_5, "ROLES");
		checkSqlStandardAccess("CURRENT_ROLE");
		return (ValueNode) nodeFactory.getNode(
			C_NodeTypes.CURRENT_ROLE_NODE,
			getContextManager());
	}
}


/*
 * <A NAME="newInvocation">newInvocation</A>
 */
JavaToSQLValueNode
newInvocation() throws StandardException :
{
	QueryTreeNode	newNode;
	Vector	parameterList = new Vector();
	String	javaClassName;
}
{
	<NEW> javaClassName = javaClassName() methodCallParameterList(parameterList)
	{
		if (!javaClassName.startsWith("com.splicemachine.dbag.") && !javaClassName.startsWith("com.splicemachine.dbtalog.") && !javaClassName.startsWith("com.ibm.db2j."))
		{
			checkInternalFeature(javaClassName);
		}
		newNode = (QueryTreeNode) nodeFactory.getNode(
									   C_NodeTypes.NEW_INVOCATION_NODE,
									   javaClassName,
									   parameterList,
									   lastTokenDelimitedIdentifier,
									   getContextManager());

		/*
		** Assume this is being returned to the SQL domain.  If it turns
		** out that this is being returned to the Java domain, we will
		** get rid of this node.
		*/
		return (JavaToSQLValueNode) nodeFactory.getNode(
								C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
								newNode,
								getContextManager());
	}
}

/*
 * <A NAME="vtiTableConstruct">vtiTableConstruct</A>
 *
 * Parse a TABLE() constructor that corresponds to an internal
 * VTI invocation.  For example:
 *
 *    TABLE ( <qualifiedName> (arg1, arg2, ...) )
 *
 * where <qualifiedName> is a table name that Derby will map internally
 * to a VTI (ex. "SYSCS_DIAG.SPACE_TABLE").  The list of arguments
 * will then be passed to the VTI when it is invoked (DERBY-2152).
 *
 * An example query where this might occur is as follows:
 *
 *   SELECT * FROM TABLE(SYSCS_DIAG.SPACE_TABLE('SPLICE', 'T1')) x
 *
 * in which case SYSCS_DIAG.SPACE_TABLE will be mapped (internally)
 * to the "com.splicemachine.dbag.SpaceTable" diagnostic VTI.  Thus
 * the equivalent call prior to DERBY-2152 would have been:
 *
 *   SELECT * FROM NEW com.splicemachine.dbag.SpaceTable('SPLICE', 'T1')) x
 *
 * Note that this latter syntax is still supported.
 */
JavaToSQLValueNode
vtiTableConstruct() throws StandardException :
{
    NewInvocationNode newNode = null;
    QueryTreeNode invocationNode = null;
    Vector parameterList = new Vector();
    TableName vtiTableName = null;
    TableDescriptor td;
    MethodCallNode	methodNode;
}
{
    <TABLE> <LEFT_PAREN>
        vtiTableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
        methodCallParameterList(parameterList)
    <RIGHT_PAREN>
    {
        /* The fact that we pass a NULL table descriptor to the
        * following call is an indication that we are mapping to a
        * VTI table function (i.e. one that accepts arguments).
        * Since we have the table name we do not need to pass in a
        * TableDescriptor--we'll just create one from the table
        * name. See NewInvocationNode for more.
        */
        newNode = (NewInvocationNode) nodeFactory.getNode
        (
            C_NodeTypes.NEW_INVOCATION_NODE,
            vtiTableName,  // TableName
            null,          // TableDescriptor
            parameterList,
            lastTokenDelimitedIdentifier,
            getContextManager());

        if ( newNode.isBuiltinVTI() ) { invocationNode = newNode; }
        else
        {
            methodNode = (MethodCallNode) nodeFactory.getNode(
                C_NodeTypes.STATIC_METHOD_CALL_NODE,
                vtiTableName,
                null,
                getContextManager());
            methodNode.addParms(parameterList);

            invocationNode = methodNode;
        }


        /*
        ** Assume this is being returned to the SQL domain.  If it turns
        ** out that this is being returned to the Java domain, we will
        ** get rid of this node.
        */
        return (JavaToSQLValueNode) nodeFactory.getNode(
                    C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
                    invocationNode,
                    getContextManager());
    }
}

/*
 * <A NAME="staticMethodInvocation">staticMethodInvocation</A>
 */
ValueNode
staticMethodInvocation(String javaClassName) throws StandardException :
{
	Vector	parameterList = new Vector();
	MethodCallNode	methodNode;
}
{
	methodNode = staticMethodName(javaClassName) methodCallParameterList(parameterList)
	{
		methodNode.addParms(parameterList);

		/*
		** Assume this is being returned to the SQL domain.  If it turns
		** out that this is being returned to the Java domain, we will
		** get rid of this node.
		*/
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
								methodNode,
								getContextManager());
	}
}

/**
 * <A NAME="methodCallParameterList">methodCallParameterList</A>
*/

void methodCallParameterList(Vector parameterList) throws StandardException :
{
}
{
	<LEFT_PAREN>
		[ methodParameter(parameterList)
			( <COMMA> methodParameter(parameterList) )* ]
	<RIGHT_PAREN>
}


/*
 * <A NAME="routineInvocation">routineInvocation</A>
 */
ValueNode
routineInvocation() throws StandardException :
{
	ValueNode	valueNode;
}
{
	LOOKAHEAD( { !distinctUDAFollows() } )
    valueNode = routineExpression()
    {
        return valueNode;
    }
|
	LOOKAHEAD( { distinctUDAFollows() } )
    valueNode = distinctUDA()
    {
        return valueNode;
    }
}

/*
 * <A NAME="routineExpression">routineExpression</A>
 */
ValueNode
routineExpression() throws StandardException :
{

	Vector	parameterList = new Vector();
	TableName	routineName;
	MethodCallNode	methodNode;
}
{
	routineName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
		methodCallParameterList(parameterList)
	{
		methodNode = (MethodCallNode) nodeFactory.getNode(
								C_NodeTypes.STATIC_METHOD_CALL_NODE,
								routineName,
								null,
								getContextManager());

		methodNode.addParms(parameterList);

		/*
		** Assume this is being returned to the SQL domain.  If it turns
		** out that this is being returned to the Java domain, we will
		** get rid of this node.
		*/
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
								methodNode,
								getContextManager());
	}
}

/*
 * <A NAME="distinctUDA">distinctUDA</A>
 */
ValueNode
distinctUDA() throws StandardException :
{
	ValueNode		value;
	TableName  aggName;
}
{
	aggName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	<LEFT_PAREN>
        <DISTINCT> value = additiveExpression(null, 0)
	<RIGHT_PAREN>
	{
        //
        // The parser can't distinguish one-arg function calls from
        // non-distinct aggregates. That has to be figured out at
        // bind() time.
        //
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.AGGREGATE_NODE,
								value,
								aggName,
								Boolean.TRUE,
								"",
								getContextManager());
	}
}

/*
 * <A NAME="javaClass">javaClass</A>
 */

String
javaClass() throws StandardException :
{
	String javaClassName;
}
{
	javaClassName = javaClassName()
	{
		return javaClassName;
	}
}

/*
 * <A NAME="columnMethodInvocation">columnMethodInvocation</A>
 */
ValueNode
columnMethodInvocation() throws StandardException :
{
	ValueNode	columnReference;
	ValueNode	methodNode;
}
{
	columnReference = columnNameForInvocation()
	methodNode = nonStaticMethodInvocation(columnReference)
	{
		return methodNode;
	}
}

/*
 * <A NAME="columnNameForInvocation">columnNameForInvocation</A>
 */
ValueNode
columnNameForInvocation() throws StandardException :
{
	String firstName;
	String secondName = null;
	String thirdName = null;
	String		columnName = null;
	String		tableName = null;
	String		schemaName = null;
	TableName	tabName = null;
	ValueNode	retval;
}
{
	firstName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	[
		// This LOOKAHEAD is required because we have the following cases:
		// schema.table.column.method()
		// table.column.method()
		// column.method()
		//
		// We have to look ahead to ensure that there is at least one more
		// PERIOD after the current one, so that we don't consider the
		// method name to be a table or column name
		LOOKAHEAD( {
					getToken(1).kind == PERIOD &&
					getToken(3).kind == PERIOD
				} )
		<PERIOD> secondName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
		[
			// See above: we don't want to mistake the method name for a
			// column name.
			LOOKAHEAD( {
						getToken(1).kind == PERIOD &&
						getToken(3).kind == PERIOD
					} )
			<PERIOD> thirdName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
		]
	]
	{
		// Figure out what each identifier stands for
		if (thirdName == null)
		{
			if (secondName == null)
			{
				// There's only one identifier, so it must be a column name
				columnName = firstName;
			}
			else
			{
				// There are two identifiers, so they are table and column names
				tableName = firstName;
				columnName = secondName;
			}
		}
		else
		{
			// There are three identifiers,
			// so they are schema, table, and column names
			schemaName = firstName;
			tableName = secondName;
			columnName = thirdName;
		}

		if (tableName != null)
		{
			// There is a table name, so get a TableName node
			tabName =
				(TableName) nodeFactory.getNode(
							C_NodeTypes.TABLE_NAME,
							schemaName,
							tableName,
							new Integer(nextToLastIdentifierToken.beginOffset),
							new Integer(nextToLastIdentifierToken.endOffset),
							getContextManager());
		}

		// Get the column reference
		retval = (ValueNode) nodeFactory.getNode(
									C_NodeTypes.COLUMN_REFERENCE,
									columnName,
									tabName,
									new Integer(lastIdentifierToken.beginOffset),
									new Integer(lastIdentifierToken.endOffset),
									getContextManager());

		return retval;
	}
}

/*
 * <A NAME="columnReference">columnReference</A>
 */
ValueNode
columnReference() throws StandardException :
{
	String		firstName;
	String		secondName = null;
	String		thirdName = null;
	String		columnName = null;
	String		tableName = null;
	String		schemaName = null;
	TableName	tabName = null;
	ValueNode arrayElement = null;
	String	sign = "";
}
{
	firstName = identifier(Limits.MAX_IDENTIFIER_LENGTH, false)
	[
		// This LOOKAHEAD is needed to ensure that, if the identifier
		// after the PERIOD is a method name , we
		// don't treat it as part of the column reference.
		LOOKAHEAD( {
					getToken(1).kind == PERIOD &&
					getToken(3).kind != LEFT_PAREN
				} )
		<PERIOD> secondName = identifier(Limits.MAX_IDENTIFIER_LENGTH, false)
		[
			// This LOOKAHEAD is needed to ensure that, if the identifier
			// after the PERIOD is a method name , we
			// don't treat it as part of the column reference.
			LOOKAHEAD( {
						getToken(1).kind == PERIOD &&
						getToken(3).kind != LEFT_PAREN
					} )
			<PERIOD> thirdName = identifier(Limits.MAX_IDENTIFIER_LENGTH, false)
		]
	    ]
               [ <LEFT_BRACKET> arrayElement = numericLiteral(sign) <RIGHT_BRACKET>]
	{
		// Figure out what each name stands for
		if (thirdName == null)
		{
			if (secondName == null)
			{
				// Only one name, must be column name
				columnName = firstName;
			}
			else
			{
				// Two names: table.column
				tableName = firstName;
				columnName = secondName;
			}
		}
		else
		{
			// Three names: schema.table.column
			schemaName = firstName;
			tableName = secondName;
			columnName = thirdName;
		}

		IdUtil.checkIdentifierLengthLimit(columnName, Limits.MAX_IDENTIFIER_LENGTH);
		if (schemaName != null)
			IdUtil.checkIdentifierLengthLimit(schemaName, Limits.MAX_IDENTIFIER_LENGTH);
		if (tableName != null)
			IdUtil.checkIdentifierLengthLimit(tableName, Limits.MAX_IDENTIFIER_LENGTH);

		if (tableName != null)
		{
			tabName = (TableName) nodeFactory.getNode(
							C_NodeTypes.TABLE_NAME,
							schemaName,
							tableName,
							new Integer(nextToLastIdentifierToken.beginOffset),
							new Integer(nextToLastIdentifierToken.endOffset),
							getContextManager());
		}

		ColumnReference columnReference = (ColumnReference) nodeFactory.getNode(
								C_NodeTypes.COLUMN_REFERENCE,
								columnName,
								tabName,
								new Integer(lastIdentifierToken.beginOffset),
								new Integer(lastIdentifierToken.endOffset),
								getContextManager());
		if (arrayElement == null)
		    return columnReference;
		return (ValueNode) nodeFactory.getNode(
                                C_NodeTypes.ARRAY_OPERATOR_NODE,
                                arrayElement,
                                columnReference,
                                getContextManager());


	}
}

/*
void
columnReference() throws StandardException :
{}
{
	/*
	**
	** I re-wrote the above rule because it caused a grammar ambiguitity.
	** The problem is that we are parsing a dot-separated list of identifiers,
	** and the grammar doesn't know what the identifiers stand for, but the
	** syntax assumed that it did.  For example, in schema.table.column,
	** the grammar doesn't know when it parses the first identifier whether
	** it will be a catalog name, schema name, table name, or column name.
	**
	** I think this problem could be solved by increasing the lookahead.
	** I will try that solution next.  I like that solution better because,
	** if it works, it will be easier for the grammar to figure out what
	** each identifier stands for.
	**

	[ <MODULE> <PERIOD> <IDENTIFIER> |
	  [ [ [ <IDENTIFIER> <PERIOD> ] <IDENTIFIER> <PERIOD> ] <IDENTIFIER> <PERIOD> ]
	]
	<IDENTIFIER>
}
*/

OrderByList
orderByClause(ResultSetNode rs) throws StandardException :
{
	OrderByList orderCols;
}
{
	<ORDER> <BY> orderCols = sortSpecificationList(rs)
	{
        forbidNextValueFor();

		return orderCols;
	}
}

int
atIsolationLevel() throws StandardException :
{
	int isolationLevel;
}
{
	<WITH> isolationLevel = isolationLevelDB2Abbrev()
	{
		return isolationLevel;
	}

}

OrderByList
sortSpecificationList(ResultSetNode rs) throws StandardException :
{
	OrderByList orderCols = (OrderByList) nodeFactory.getNode(
											C_NodeTypes.ORDER_BY_LIST,
											rs,
											getContextManager());
}
{
	sortSpecification(orderCols) ( <COMMA> sortSpecification(orderCols) ) *
	{
		return orderCols;
	}
}

void
sortSpecification(OrderByList orderCols) throws StandardException :
{	OrderByColumn orderCol; }
{
	orderCol = sortKey() /* [ collateClause() ] */ [ orderingSpecification(orderCol) ] [ nullOrdering(orderCol) ]
	{
		orderCols.addOrderByColumn(orderCol);
	}
}

OrderByColumn
sortKey() throws StandardException :
{
	ValueNode columnExpression;
}
{
	columnExpression = additiveExpression(null,0)
	{
		return (OrderByColumn) nodeFactory.getNode(
								C_NodeTypes.ORDER_BY_COLUMN,
								columnExpression,
								getContextManager());
	}
}



void
orderingSpecification(OrderByColumn orderCol) :
{}
{
	<ASC>
|
	<DESC>
	{
		orderCol.setDescending();
	}
}

/*
 * The data type comparison functions need to know whether NULL values
 * should sort higher than non-NULL values, or lower. The answer to this
 * depends on whether the user specified ASCending or DESCending, and on
 * whether the user specified NULLS FIRST, or NULLS LAST, as follows:
 *
 * +===============+========+========+
 * | ORDER BY says | ASC    | DESC   |
 * +===============+========+========+
 * | NULLS FIRST   | less   | greater|
 * +===============+========+========+
 * | NULLS LAST    | greater| less   |
 * +===============+========+========+
 */
void
nullOrdering(OrderByColumn orderCol) :
{}
{
        LOOKAHEAD( { getToken(2).kind == LAST } )
        <NULLS> <LAST>
        {
            if (! orderCol.isAscending())
                orderCol.setNullsOrderedLow();
        }
|
        <NULLS> <FIRST>
        {
            if (orderCol.isAscending())
                orderCol.setNullsOrderedLow();
        }
}


/*
 * <A NAME="offsetFetchFirstClause">offsetFetchFirstClause</A>
 */
boolean
offsetFetchFirstClause( ValueNode[] clauses ) throws StandardException :
{}
{
    LOOKAHEAD ( { getToken(1).kind == OFFSET || getToken(1).kind == FETCH } )
    sqlStandardOffsetFetchFirst( clauses )
    {
        return false;
    }
|
    [
        LOOKAHEAD ( { getToken(1).kind == LEFT_BRACE } )
        jdbcLimitOffset( clauses )
    ]
    {
        return true;
    }
}

/*
 * <A NAME="sqlStandardOffsetFetchFirst">sqlStandardOffsetFetchFirst</A>
 */
void
sqlStandardOffsetFetchFirst( ValueNode[] clauses ) throws StandardException :
{}
{
    [ clauses[ OFFSET_CLAUSE ] = offsetClause() ]
    [ clauses[ FETCH_FIRST_CLAUSE ] = fetchFirstClause() ]
}

/*
 * <A NAME="jdbcLimitOffset">jdbcLimitOffset</A>
 */
void
jdbcLimitOffset( ValueNode[] clauses ) throws StandardException :
{
    ValueNode rowCount = null;
    ValueNode startRow = null;
}
{
    <LEFT_BRACE>
            <LIMIT> ( rowCount = intLiteral() | rowCount = dynamicParameterSpecification() )
            [ <OFFSET> ( startRow = intLiteral() | startRow = dynamicParameterSpecification() ) ]
        <RIGHT_BRACE>
    {
        // LIMIT of 0 means omit the FETCH/FIRST CLAUSE
        if (
             (rowCount instanceof NumericConstantNode) &&
             ((NumericConstantNode) rowCount).getValue().getInt() == 0
           )
        {
            rowCount = null;
        }

        // default OFFSET is 0
        if ( startRow == null )
        {
            startRow = getNumericNode( "0", true );
        }

        clauses[ FETCH_FIRST_CLAUSE ] = rowCount;
        clauses[ OFFSET_CLAUSE ] = startRow;
        return;
    }
}

/*
 * <A NAME="offsetClause">offsetClause</A>
 */
ValueNode
offsetClause() throws StandardException :
{
	ValueNode result = null;
}
{
	// Since OFFSET is not yet a reserved keyword, cf. disambiguation
	// look-ahead for it w.r.t. offsetClause in method nonReservedKeyword.
	// This solves the shift/reduce conflict, and allows us to use OFFSET as an
	// identifier in all contexts.
	<OFFSET>
    ( result = intLiteral()
	| result = dynamicParameterSpecification()
    )
	( <ROW> | <ROWS> )
	{
		return result;
	}
}


/*
 * <A NAME="fetchFirstClause">fetchFirstClause</A>
 */
ValueNode
topNClause() throws StandardException :
{
	// The default number of rows to fetch if the literal is omitted is 1:
	ValueNode result = getNumericNode("1", true);
}
{
	// This lookahead is required to distinquish TOP from
	// a class which starts with TOP (e.g., TOP::)
	LOOKAHEAD
	(
		{
			getToken(1).kind == TOP &&
			!(
				getToken(2).kind == PERIOD ||
				getToken(2).kind == DOUBLE_COLON
			)
		}
	)
	<TOP>
		[ result = intLiteral()
		|
            (
                <QUESTION_MARK>
                {
                    result = makeParameterNode( );
                }
            )
		]
	{
		return result;
	}
}

/*
 * <A NAME="fetchFirstClause">fetchFirstClause</A>
 */
ValueNode
fetchFirstClause() throws StandardException :
{
	// The default number of rows to fetch if the literal is omitted is 1:
	ValueNode result = getNumericNode("1", true);
}
{
	<FETCH> ( <FIRST> | <NEXT> )
		[ result = intLiteral()
		| result = dynamicParameterSpecification()
		] ( <ROW> | <ROWS> ) <ONLY>
	{
		return result;
	}
}


/*
 * <A NAME="forUpdateClause">forUpdateClause</A>
 */
int
forUpdateClause(Vector columnList) throws StandardException :
{
	int	retval;
}
{
	<UPDATE> [ <OF> forUpdateColumnList(columnList) ]
	{
		return CursorNode.UPDATE;
	}
|
	<READ> <ONLY>
	{
		return CursorNode.READ_ONLY;
	}
|
	<FETCH> <ONLY>
	{
		return CursorNode.READ_ONLY;
	}
}

/*
 * <A NAME="forUpdateColumnList">forUpdateColumnList</A>
 */
void
forUpdateColumnList(Vector columnList) throws StandardException :
{
}
{
	forUpdateColumn(columnList) ( <COMMA> forUpdateColumn(columnList) ) *
}

/*
 * <A NAME="forUpdateColumn">forUpdateColumn</A>
 */
void
forUpdateColumn(Vector columnList) throws StandardException :
{
	String		 columnName;
}
{
	/* identifier() used to be columnName() */
	columnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		columnList.addElement(columnName);
	}
}

/*
 * <A NAME="setClauseList">setClauseList</A>
 */
ResultColumnList
setClauseList() throws StandardException :
{
	ResultColumnList	columnList = (ResultColumnList) nodeFactory.getNode(
												C_NodeTypes.RESULT_COLUMN_LIST,
												getContextManager());
}
{
	setClause(columnList) ( <COMMA> setClause(columnList) ) *
	{
		return columnList;
	}
}

ResultColumnList
setClauseListSpecial() throws StandardException :
{
    ResultColumnList    columnList = (ResultColumnList) nodeFactory.getNode(
                                                C_NodeTypes.RESULT_COLUMN_LIST,
                                                getContextManager());
}
{
    setClauseSpecial(columnList) ( <COMMA> setClauseSpecial(columnList) ) *
    {
        return columnList;
    }
}

/*
 * <A NAME="setClause">setClause</A>
 */
void
setClause(ResultColumnList columnList) throws StandardException :
{
	ResultColumn resultColumn;
	ValueNode	 columnName;
	ValueNode	 valueNode;
}
{
	/* identifier() used to be objectColumn() */
	/*
		SQL92 only wants identifiers here (column names)
		but JBuilder expects table.column, so we allow the
		general form.
	 */
	columnName = columnReference() <EQUALS_OPERATOR> valueNode = updateSource(columnName.getColumnName())
	{
		resultColumn = (ResultColumn) nodeFactory.getNode(
										C_NodeTypes.RESULT_COLUMN,
										columnName,
										valueNode,
										getContextManager());
		columnList.addResultColumn(resultColumn);
	}
}

void
setClauseSpecial(ResultColumnList columnList) throws StandardException :
{
    ResultColumn resultColumn;
    ValueNode  columnName;
    ValueNode    valueNode;
}
{
    columnName = columnReference()
    {
        resultColumn = (ResultColumn) nodeFactory.getNode(
                                        C_NodeTypes.RESULT_COLUMN,
                                        columnName,
                                        null, /* valueNode null for now - will be populated later */
                                        getContextManager());
        columnList.addResultColumn(resultColumn);
    }
}

/*
 * <A NAME="updateSource">updateSource</A>
 */
ValueNode
updateSource(String columnName) throws StandardException :
{
	ValueNode	valueNode;
}
{
	valueNode = orExpression(null)
	{
		return valueNode;
	}
|
	valueNode = nullSpecification()
	{
		return valueNode;
	}
|
	<_DEFAULT>
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.DEFAULT_NODE,
								columnName,
								getContextManager());
	}
}

/*
 * <A NAME="nullSpecification">nullSpecification</A>
 */
ValueNode
nullSpecification() throws StandardException :
{}
{
	<NULL>
	{
		return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE,
									getContextManager());
	}
}


/*
 * <A NAME="insertColumnsAndSource">insertColumnsAndSource</A>
 */
StatementNode
insertColumnsAndSource(QueryTreeNode targetTable)
	throws StandardException :
{
	Properties			targetProperties = null;
	ResultSetNode	queryExpression;
	ResultColumnList	columnList = null;
	OrderByList orderCols = null;
    ValueNode[] offsetClauses = new ValueNode[ OFFSET_CLAUSE_COUNT ];
    ValueNode[] topNOut = new ValueNode[ 1 ];
    boolean     hasJDBClimitClause = false;
    Vector parameterList = new Vector();
}
{
	[
		// This LOOKAHEAD is required because a query expression can
		// be a SELECT or VALUES nested arbitrarily deep in parentheses
		// (which looks like a subquery). So, to be sure that a left
		// parenthesis introduces an insertColumnList(), we have to
		// be sure it doesn't introduce a subquery.
		LOOKAHEAD( { getToken(1).kind == LEFT_PAREN && ! subqueryFollows() } )
		<LEFT_PAREN> columnList = insertColumnList() <RIGHT_PAREN>
	]
	[ targetProperties = propertyList(false) <CHECK_PROPERTIES>]
	[ <WITH> withClauseList(parameterList) ]
	queryExpression = queryExpression(null, NO_SET_OP, topNOut)
	[ orderCols = orderByClause(queryExpression) ]
    hasJDBClimitClause = offsetFetchFirstClause( offsetClauses )
	{
		if (orderCols != null && isTableValueConstructor(queryExpression)) {
			// Not allowed by the standard since this is a <contextually typed
			// table value constructor> according SQL 2008, vol2, section 14.11
			// "<insert statement>, SR 17. (I.e. it is not a <subquery> and
			// can't have an ORDER BY).

			throw StandardException.newException(
				SQLState.LANG_SYNTAX_ERROR, "ORDER BY");
		}

        if ((offsetClauses[ OFFSET_CLAUSE ] != null || offsetClauses[ FETCH_FIRST_CLAUSE ] != null) &&
                isTableValueConstructor(queryExpression))
        {
            String tokenName;
            if ( hasJDBClimitClause ) { tokenName = "LIMIT"; }
            else if ( offsetClauses[ OFFSET_CLAUSE ] != null ) { tokenName = "OFFSET"; }
            else if ( topNOut[0] != null ) { tokenName = "TOP"; }
            else { tokenName = "FETCH"; }

            throw StandardException.newException( SQLState.LANG_SYNTAX_ERROR, tokenName );
        }

        if (topNOut[0] != null) {
            hasJDBClimitClause = true;
            offsetClauses[ FETCH_FIRST_CLAUSE ] = topNOut[0];
        }

		StatementNode insertNode =  (StatementNode) nodeFactory.getNode(
							C_NodeTypes.INSERT_NODE,
							targetTable,
							columnList,
							queryExpression,
							targetProperties,
							orderCols,
                            offsetClauses[ OFFSET_CLAUSE ],
                            offsetClauses[ FETCH_FIRST_CLAUSE ],
                            Boolean.valueOf( hasJDBClimitClause ),
							getContextManager());
		insertNode.setWithVector(parameterList.size()>0?parameterList:null);
        return insertNode;
	}
	/* RESOLVE: Ignoring default values for now
|
	[ targetProperties = propertyList(false) <CHECK_PROPERTIES>]
	<_DEFAULT> <VALUES>
	{
		return null;
	}
	*/
}

/*
 * <A NAME="insertColumnList">insertColumnList</A>
 */
ResultColumnList
insertColumnList() throws StandardException :
{
	ResultColumnList	columnList = (ResultColumnList) nodeFactory.getNode(
												C_NodeTypes.RESULT_COLUMN_LIST,
												getContextManager());
}
{
	columnQualifiedNameList(columnList)
	{
		return columnList;
	}
}

/*
 * <A NAME="columnQualifiedNameList">columnQualifiedNameList</A>
 */
void
columnQualifiedNameList(ResultColumnList columnList) throws StandardException :
{}
{
	columnQualifiedNameItem(columnList) ( <COMMA> columnQualifiedNameItem(columnList) ) *
}

/*
 * <A NAME="columnQualifiedNameItem">columnQualifiedNameItem</A>
 */
void
columnQualifiedNameItem(ResultColumnList columnList) throws StandardException :
{
	ValueNode		columnRef;
	ResultColumn	resultColumn;
}
{
	/*
		SQL92 only wants identifiers here (column names)
		but JBuilder expects table.column, so we allow the
		general form.
	 */
	columnRef = columnReference()
	{
		/*
		** Store the column names for the result columns in the
		** result column list.  We don't know yet what valueNodes
		** should be hooked up to each result column, so set that
		** to null for now.
		*/
		resultColumn = (ResultColumn) nodeFactory.getNode(
										C_NodeTypes.RESULT_COLUMN,
										columnRef,
										null,
										getContextManager());
		columnList.addResultColumn(resultColumn);
	}
}

/*
 * <A NAME="rowValueConstructor">rowValueConstructor</A>
 */
ResultSetNode
rowValueConstructor(ResultSetNode leftRSN) throws StandardException :
{
	ResultColumnList	resultColumns = (ResultColumnList) nodeFactory.getNode(
												C_NodeTypes.RESULT_COLUMN_LIST,
												getContextManager());
	ResultSetNode		newRSN;
}
{
	// This LOOKAHEAD is required because a rowValueConstructorList is
	// nested in parentheses, and each element of the list can also be
	// nested in an arbitrary number of parentheses.
	LOOKAHEAD( { rowValueConstructorListFollows() } )
	<LEFT_PAREN> rowValueConstructorList(resultColumns) <RIGHT_PAREN>
	{
		/* If leftRSN is null, simply return the newRSN, else generate and
		 * return a UNION ALL above the 2 RSNs, after verifying that the size()
		 * of both RSNs RCLs is the same.
		 */
		newRSN = (ResultSetNode) nodeFactory.getNode(
								C_NodeTypes.ROW_RESULT_SET_NODE,
								resultColumns,
								null,
								getContextManager());
		if (leftRSN != null)
		{
			if (leftRSN.getResultColumns().size() !=
				newRSN.getResultColumns().size())
			{
				throw StandardException.newException(SQLState.LANG_ROW_VALUE_CONSTRUCTOR_UNMATCHED_COLUMNS);
			}

			newRSN = (ResultSetNode) nodeFactory.getNode(
									C_NodeTypes.UNION_NODE,
									leftRSN,
									newRSN,
									Boolean.TRUE,
									Boolean.TRUE,
									null,
									getContextManager());
		}
		return newRSN;

	}
|
	rowValueConstructorElement(resultColumns)
	{
		/* If leftRSN is null, simply return the newRSN, else generate and
		 * return a UNION ALL above the 2 RSNs, after verifying that the size()
		 * of both RSNs RCLs is the same.
		 */
		newRSN = (ResultSetNode) nodeFactory.getNode(
								C_NodeTypes.ROW_RESULT_SET_NODE,
								resultColumns,
								null,
								getContextManager());
		if (leftRSN != null)
		{
			if (leftRSN.getResultColumns().size() !=
				newRSN.getResultColumns().size())
			{
				throw StandardException.newException(SQLState.LANG_ROW_VALUE_CONSTRUCTOR_UNMATCHED_COLUMNS);
			}

			newRSN = (ResultSetNode) nodeFactory.getNode(
									C_NodeTypes.UNION_NODE,
									leftRSN,
									newRSN,
									Boolean.TRUE,
									Boolean.TRUE,
									null,
									getContextManager());
		}
		return newRSN;
	}
}

/*
 * <A NAME="rowValueConstructorElement">rowValueConstructorElement</A>
 */
void
rowValueConstructorElement(ResultColumnList resultColumns) throws StandardException :
{
	ValueNode	value;
}
{
	value = orExpression(null)
	{
		resultColumns.addResultColumn(
			(ResultColumn) nodeFactory.getNode(
							C_NodeTypes.RESULT_COLUMN,
							null,
							value,
							getContextManager())
				);
	}
|
	value = nullSpecification()
	{
		resultColumns.addResultColumn(
			(ResultColumn) nodeFactory.getNode(
							C_NodeTypes.RESULT_COLUMN,
							null,
							value,
							getContextManager())
				);
	}
|
	<_DEFAULT>
	{
		resultColumns.addResultColumn(
			(ResultColumn) nodeFactory.getNode(
							C_NodeTypes.RESULT_COLUMN,
							null,
							(ValueNode) nodeFactory.getNode(
								C_NodeTypes.DEFAULT_NODE,
								null,
								getContextManager()),
							getContextManager())
				);
	}
|
	{
		throw StandardException.newException(SQLState.LANG_EMPTY_VALUES_CLAUSE);
	}
}

/*
 * <A NAME="rowValueConstructorList">rowValueConstructorList</A>
 */
void
rowValueConstructorList(ResultColumnList resultColumns) throws StandardException :
{}
{
	rowValueConstructorElement(resultColumns)
		( <COMMA> rowValueConstructorElement(resultColumns) ) *
}


/*
 * <A NAME="tableSubquery">tableSubquery</A>
 */
SubqueryNode
tableSubquery(int subqueryType, ValueNode leftOperand) throws StandardException :
{
	SubqueryNode	subqueryNode;
}
{
	subqueryNode = subquery(subqueryType, leftOperand)
	{
		return subqueryNode;
	}
}


/*
 * <A NAME="subquery">subquery</A>
 */
SubqueryNode
subquery(int subqueryType, ValueNode leftOperand) throws StandardException :
{
	ResultSetNode	queryExpression;
	SubqueryNode	subqueryNode;
	OrderByList orderCols = null;
    ValueNode[] offsetClauses = new ValueNode[ OFFSET_CLAUSE_COUNT ];
    ValueNode[] topNOut = new ValueNode[ 1 ];
    boolean     hasJDBClimitClause = false;
}
{
	queryExpression = queryExpression(null, NO_SET_OP, topNOut)
	[ orderCols = orderByClause(queryExpression) ]
    hasJDBClimitClause = offsetFetchFirstClause( offsetClauses )
	{
	    if (topNOut[0] != null) {
	        hasJDBClimitClause = true;
            offsetClauses[ FETCH_FIRST_CLAUSE ] = topNOut[0];
	    }
		subqueryNode = (SubqueryNode) nodeFactory.getNode(
										C_NodeTypes.SUBQUERY_NODE,
										queryExpression,
										ReuseFactory.getInteger(subqueryType),
										leftOperand,
										orderCols,
                                        offsetClauses[ OFFSET_CLAUSE ],
                                        offsetClauses[ FETCH_FIRST_CLAUSE ],
                                        Boolean.valueOf( hasJDBClimitClause ),
										getContextManager());
		return subqueryNode;
	}
}

/*
 * <A NAME="inPredicateValue">inPredicateValue</A>
 */
ValueNode
inPredicateValue(ValueNode leftOperand) throws StandardException :
{
	ValueNode		retval;
	int				tokKind;
}
{
	<LEFT_PAREN>
	(
		// This LOOKAHEAD is necessary because both a subquery and an
		// inValueList can be nested arbitrarily deep in parentheses,
		// so both can start with LEFT_PAREN. To disambiguate, we only
		// consider it a subquery if the first token that comes after
		// all the LEFT_PARENS is either a SELECT or a VALUES.
		LOOKAHEAD( { subqueryFollows() } )
		retval = tableSubquery(SubqueryNode.IN_SUBQUERY, leftOperand)
	|
		retval = inValueList(leftOperand)
	)
	<RIGHT_PAREN>
	{
		return retval;
	}
}

/*
 * <A NAME="inValueList">inValueList</A>
 */
ValueNode
inValueList(ValueNode leftOperand) throws StandardException:
{
	ValueNodeList	inList = (ValueNodeList) nodeFactory.getNode(
											C_NodeTypes.VALUE_NODE_LIST,
											getContextManager());
}
{
	inElement(inList) ( <COMMA> inElement(inList) ) *
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.IN_LIST_OPERATOR_NODE,
								leftOperand,
								inList,
								getContextManager());
	}
}

/*
 * <A NAME="inElement">inElement</A>
 */
void
inElement(ValueNodeList inList) throws StandardException :
{
	ValueNode valueNode;
}
{
	valueNode = additiveExpression(null, 0)
	{
		inList.addElement(valueNode);
	}
}


/*
 * <A NAME="quantifier">quantifier</A>
 */
int
quantifier(int opType) throws StandardException :
{
	int retval = 0;
}
{
	<ALL>
	{
		switch (opType)
		{
			case BinaryOperatorNode.EQ:
				retval = SubqueryNode.EQ_ALL_SUBQUERY;
				break;

			case BinaryOperatorNode.NE:
				retval = SubqueryNode.NE_ALL_SUBQUERY;
				break;

			case BinaryOperatorNode.LE:
				retval = SubqueryNode.LE_ALL_SUBQUERY;
				break;

			case BinaryOperatorNode.LT:
				retval = SubqueryNode.LT_ALL_SUBQUERY;
				break;

			case BinaryOperatorNode.GE:
				retval = SubqueryNode.GE_ALL_SUBQUERY;
				break;

			case BinaryOperatorNode.GT:
				retval = SubqueryNode.GT_ALL_SUBQUERY;
				break;

			default:
				if (SanityManager.DEBUG)
				SanityManager.THROWASSERT(
						"Invalid value for opType (" + opType +
						") passed to quantifier()");
		}
		return retval;
	}
|
	some()
	{
		switch (opType)
		{
			case BinaryOperatorNode.EQ:
				retval = SubqueryNode.EQ_ANY_SUBQUERY;
				break;

			case BinaryOperatorNode.NE:
				retval = SubqueryNode.NE_ANY_SUBQUERY;
				break;

			case BinaryOperatorNode.LE:
				retval = SubqueryNode.LE_ANY_SUBQUERY;
				break;

			case BinaryOperatorNode.LT:
				retval = SubqueryNode.LT_ANY_SUBQUERY;
				break;

			case BinaryOperatorNode.GE:
				retval = SubqueryNode.GE_ANY_SUBQUERY;
				break;

			case BinaryOperatorNode.GT:
				retval = SubqueryNode.GT_ANY_SUBQUERY;
				break;

			default:
				if (SanityManager.DEBUG)
				SanityManager.THROWASSERT(
						"Invalid value for opType (" + opType +
						") passed to quantifier()");
		}
		return retval;
	}
}

/*
 * <A NAME="some">some</A>
 */
void
some() throws StandardException :
{}
{
	<SOME> |
	<ANY>
}

/*
 * <A NAME="existsExpression">existsExpression</A>
 */
SubqueryNode
existsExpression() throws StandardException :
{
	SubqueryNode	subqueryNode;
}
{
	<EXISTS> <LEFT_PAREN>
	subqueryNode = tableSubquery(SubqueryNode.EXISTS_SUBQUERY, null)
	<RIGHT_PAREN>
	{
		return subqueryNode;
	}
}

/*
 * <A NAME="tableExpression">tableExpression</A>
 */
SelectNode
tableExpression(ResultColumnList selectList) throws StandardException :
{
	SelectNode	selectNode;
	FromList	fromList;
	ValueNode	whereClause = null;
	GroupByList	groupByList = null;
	ValueNode	havingClause = null;
	Token		whereToken;
	WindowList  windows = null;
}
{
	fromList = fromClause()
	[ whereToken = <WHERE> whereClause = whereClause(whereToken) ]
	[ groupByList = groupByClause() ]
	[ havingClause = havingClause() ]
	[ windows = windowClause() ]
	{

		// fix for HAVING without GROUP BY, makes sure we get one
		// aggregate operator by adding a count(*), this fixes beetle 5853, 5890
		if (havingClause != null && groupByList == null) {
			ValueNode vn = (ValueNode) nodeFactory.getNode(
								C_NodeTypes.AGGREGATE_NODE,
								null,
								com.splicemachine.db.impl.sql.compile.CountAggregateDefinition.class,
								Boolean.FALSE, // distinct Boolean.TRUE?
								"COUNT(*)",
								getContextManager());
			AggregateNode n = (AggregateNode) vn;
			n.replaceAggregatesWithColumnReferences(selectList, 0);
		}

		selectNode = (SelectNode) nodeFactory.getNode(
							C_NodeTypes.SELECT_NODE,
							selectList,
							null, 		/* AGGREGATE list */
							fromList,
							whereClause,
							groupByList,
							havingClause,
							windows,
							getContextManager());

		return selectNode;
	}
}



/*
 * <A NAME="fromClause">fromClause</A>
 */
FromList
fromClause() throws StandardException :
{
	FromList fromList = (FromList) nodeFactory.getNode(
									C_NodeTypes.FROM_LIST,
									getNodeFactory().doJoinOrderOptimization(),
									getContextManager());
	int	tokKind;
        Token   beginToken;
        Token   endToken;
}
{
	<FROM> {beginToken = getToken(1);}
	[
		fromListProperties(fromList)
	]
	dummyTableReferenceRule(fromList)
			( <COMMA> dummyTableReferenceRule(fromList) ) * {endToken = getToken(0);}

	{
                fromList.setBeginOffset( beginToken.beginOffset);
                fromList.setEndOffset( endToken.endOffset);
		return fromList;
	}
}

/*
 * <A NAME="fromListProperties">fromListProperties</A>
 */
void
fromListProperties(FromList fromList) throws StandardException :
{
	Properties properties;
}
{
	properties = propertyList(true) <CHECK_PROPERTIES>
	{
		fromList.setProperties(properties);
	}
}

/* This rule created simply as a way to add the result of tableReference()
 * to the fromList.
 */
void
dummyTableReferenceRule(FromList fromList) throws StandardException :
{
	FromTable tableReference;
}
{
	/* If we have a table constructor and the expression is a SELECT
	 * query or a VALUES query then we read the <TABLE> keyword;
	 * otherwise we leave the <TABLE> token in the queue and let
	 * other types of expressions (namely, vtiTableConstruct())
	 * deal with it accordingly.  DERBY-2152.
	 */
	LOOKAHEAD({ getToken(1).kind == TABLE &&
				getToken(2).kind == LEFT_PAREN &&
				(
					getToken(3).kind == SELECT ||
					getToken(3).kind == VALUES
				)
			}) <TABLE>
	tableReference = tableReferenceTypes(false)
	{
		fromList.addFromTable(tableReference);
	}
|
	tableReference = tableReferenceTypes(false)
	{
		fromList.addFromTable(tableReference);
	}
}

FromTable
tableReferenceTypes(boolean nestedInParens) throws StandardException :
{
	FromTable tableReference;
}
{
	tableReference = tableReference(nestedInParens)
	{
		return tableReference ;
	}
|
	<LEFT_BRACE> <OJ> tableReference = tableReference(nestedInParens) <RIGHT_BRACE>
	{
		return tableReference;
	}
}

Object[]
optionalTableClauses() throws StandardException :
{
	Object[]			 otc = null;
	Properties			tableProperties = null;
	ResultColumnList	derivedRCL = null;
	String				correlationName = null;
}
{
	otc = optionalTableProperties()
	{
		otc[OPTIONAL_TABLE_CLAUSES_DERIVED_RCL] = derivedRCL;
		otc[OPTIONAL_TABLE_CLAUSES_CORRELATION_NAME] = correlationName;
		return otc;
	}
|
	[ [ <AS> ]
		correlationName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
		[ <LEFT_PAREN> derivedRCL = derivedColumnList() <RIGHT_PAREN> ]
	    [tableProperties = propertyList(true) <CHECK_PROPERTIES>] ]
	{
		otc = new Object[OPTIONAL_TABLE_CLAUSES_SIZE];
		otc[OPTIONAL_TABLE_CLAUSES_TABLE_PROPERTIES] = tableProperties;
		otc[OPTIONAL_TABLE_CLAUSES_DERIVED_RCL] = derivedRCL;
		otc[OPTIONAL_TABLE_CLAUSES_CORRELATION_NAME] = correlationName;
		return otc;
	}
}

Object[]
optionalTableProperties() throws StandardException :
{
	Object[]			otc = null;
	Properties			tableProperties = null;
}
{
	tableProperties = propertyList(true) <CHECK_PROPERTIES>
	{
		otc = new Object[OPTIONAL_TABLE_CLAUSES_SIZE];
		otc[OPTIONAL_TABLE_CLAUSES_TABLE_PROPERTIES] = tableProperties;
		return otc;
	}
}

/*
 * <A NAME="tableReference">tableReference</A>
 */
FromTable
tableReference(boolean nestedInParens) throws StandardException :
{
    FromTable fromTable;
    TableOperatorNode joinTable = null;
}
{
    fromTable = tableFactor()
        (LOOKAHEAD({joinedTableExpressionFollows()})
            joinTable = joinedTableExpression(
                (joinTable == null) ? fromTable : joinTable,
                nestedInParens)) *
    {
        return joinTable == null ? fromTable : joinTable;
    }
}

FromTable tableFactor() throws StandardException :
{
	JavaToSQLValueNode	javaToSQLNode = null;
	TableName			tableName;
	String				correlationName = null;
	ResultColumnList	derivedRCL = null;
	FromTable			fromTable;
	FromTable			tableReference;
	Object[]			optionalTableClauses = new Object[OPTIONAL_TABLE_CLAUSES_SIZE];
	Properties			tableProperties = null;
	SubqueryNode		derivedTable;
	TypeDescriptor typeDescriptor = null;
}
{
	/* NOTE: this rule has to come first in order to avoid making NEW
	 * a reserved word.
	 */
	/* identifier() used to be correlationName() */
	(LOOKAHEAD({ newInvocationFollows(1) }) javaToSQLNode = newInvocation()
	| javaToSQLNode = vtiTableConstruct()
	)
		[ <AS> ] correlationName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
		[ <LEFT_PAREN>
		  (LOOKAHEAD( { getToken( 2 ).kind == COMMA } ) derivedRCL = derivedColumnList()
		  | typeDescriptor = VTITableDefinition())
		<RIGHT_PAREN> ]
		[ optionalTableClauses = optionalTableProperties() ]
	{
		fromTable = (FromTable) nodeFactory.getNode(
								C_NodeTypes.FROM_VTI,
								javaToSQLNode.getJavaValueNode(),
								correlationName,
								derivedRCL,
								((optionalTableClauses != null) ?
									(Properties) optionalTableClauses[OPTIONAL_TABLE_CLAUSES_TABLE_PROPERTIES] :
									(Properties) null),
								typeDescriptor,
								getContextManager());
		return fromTable;
	}
|
	/* identifier() used to be correlationName() */
	tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
		optionalTableClauses = optionalTableClauses()
	{
		fromTable = (FromTable) nodeFactory.getNode(
											C_NodeTypes.FROM_BASE_TABLE,
											tableName,
												(String) optionalTableClauses[OPTIONAL_TABLE_CLAUSES_CORRELATION_NAME],
												(ResultColumnList) optionalTableClauses[OPTIONAL_TABLE_CLAUSES_DERIVED_RCL],
												(Properties) optionalTableClauses[OPTIONAL_TABLE_CLAUSES_TABLE_PROPERTIES],
											getContextManager());
		return fromTable;
	}
|
	// There is a grammar ambiguity with nested parentheses here.
	// A series of left parentheses could introduce either a table
	// reference or a derived table.  For example:
	//
	//		(((select c from t) a inner join (select d from s) b ))
	//
	// and:
	//
	//		(((select c from t) a)))
	//
	// To distinguish these two cases, we consider anything that starts
	// with a single parenthesis and either SELECT or VALUES to be
	// a derived table, and anything else to be a table reference.
	// Note that we can't use the subqueryFollows() lookahead method,
	// because it skips over all leading left parentheses to decide
	// whether a subquery follows.
	LOOKAHEAD( {
				getToken(1).kind == LEFT_PAREN &&
				(
					getToken(2).kind == SELECT ||
					getToken(2).kind == VALUES
				)
			} )
	derivedTable = derivedTable() [ <AS> ] correlationName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
		[ <LEFT_PAREN> derivedRCL = derivedColumnList() <RIGHT_PAREN> ]
		[ optionalTableClauses = optionalTableProperties() ]
	{
		fromTable = (FromTable) nodeFactory.getNode(
											C_NodeTypes.FROM_SUBQUERY,
											derivedTable.getResultSet(),
											derivedTable.getOrderByList(),
                                            derivedTable.getOffset(),
                                            derivedTable.getFetchFirst(),
                                            Boolean.valueOf( derivedTable.hasJDBClimitClause() ),
											correlationName,
											derivedRCL,
											((optionalTableClauses != null) ?
												(Properties) optionalTableClauses[OPTIONAL_TABLE_CLAUSES_TABLE_PROPERTIES] :
												(Properties) null),
											getContextManager());

		return fromTable;
	}
|
	<LEFT_PAREN> tableReference = tableReferenceTypes(true) <RIGHT_PAREN>
	{
		fromTable = tableReference;

		return fromTable;
	}
}
TypeDescriptor
VTITableDefinition() throws StandardException :
{
	ArrayList                       names = new ArrayList();
	ArrayList                         types = new ArrayList();
	String[]                          nameArray;
	TypeDescriptor[]        typeArray;
	int                                     columnCount;
}
{
	    functionTableReturnColumn( names, types )
	    ( <COMMA> functionTableReturnColumn( names, types ) ) *
	{
		columnCount = names.size();
		nameArray = new String[ columnCount ];
		names.toArray( nameArray );
		typeArray = new TypeDescriptor[ columnCount ];
		types.toArray( typeArray );

		//
		// We do not allow XML as a column datatype because
		// Derby does not yet support the streaming JDBC4
		// interfaces to XML values.
		//
		for ( int i = 0; i < columnCount; i++ )
		{
		    if ( typeArray[ i ].getJDBCTypeId() == JDBC40Translation.SQLXML )
		    { throw StandardException.newException( SQLState.LANG_XML_NOT_ALLOWED_DJRS ); }
		}

		return DataTypeDescriptor.getRowMultiSet( nameArray, typeArray );
	}
}
/*
 * <A NAME="derivedColumnList">derivedColumnList</A>
 */
ResultColumnList
derivedColumnList() throws StandardException :
{
	ResultColumnList	resultColumns =
									(ResultColumnList) nodeFactory.getNode(
											C_NodeTypes.RESULT_COLUMN_LIST,
											getContextManager());
}
{
	columnNameList(resultColumns)
	{
		return resultColumns;
	}
}

/*
 * <A NAME="columnNameList">columnNameList</A>
 */
void
columnNameList(ResultColumnList columnList) throws StandardException :
{}
{
	columnNameItem(columnList) ( <COMMA> columnNameItem(columnList) ) *
}

/*
 * <A NAME="columnNameItem">columnNameItem</A>
 */
void
columnNameItem(ResultColumnList columnList) throws StandardException :
{
	String		columnName;
	ResultColumn	resultColumn;
}
{
	/* identifier() used to be columnName() */
	columnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		/*
		** Store the column names for the result columns in the
		** result column list.  We don't know yet what valueNodes
		** should be hooked up to each result column, so set that
		** to null for now.
		*/
		resultColumn = (ResultColumn) nodeFactory.getNode(
									C_NodeTypes.RESULT_COLUMN,
									columnName,
									null,
									getContextManager());
		columnList.addResultColumn(resultColumn);
	}
}

/*
 * <A NAME="indexColumnList">indexColumnList</A>
 */
void
indexColumnList(Vector columnList) throws StandardException :
{}
{
	indexColumnItem(columnList) ( <COMMA> indexColumnItem(columnList) ) *
}

/*
 * <A NAME="indexColumnItem">indexColumnItem</A>
 */
void
indexColumnItem(Vector columnList) throws StandardException :
{
	String		columnName;
}
{
	/* identifier never ends with a space; appending a space meaning desc */
	columnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) [<ASC> | <DESC> {columnName = columnName + ' ';}]
	{
		/*
		** Store the column names for the index columns in the
		** index column list.
		*/
		columnList.addElement(columnName);
	}
}

/*
 * <A NAME="derivedTable">derivedTable</A>
 */
SubqueryNode
derivedTable() throws StandardException :
{
	SubqueryNode tableSubquery;
}
{
	<LEFT_PAREN>
	tableSubquery = tableSubquery(SubqueryNode.FROM_SUBQUERY, null)
	<RIGHT_PAREN>
	{
		return tableSubquery;
	}
}

TableOperatorNode
joinedTableExpression(ResultSetNode leftRSN, boolean nestedInParens) throws StandardException :
{
	TableOperatorNode joinNode;
}
{
	joinNode = crossJoin(leftRSN, nestedInParens)
	{
		return joinNode;
	}
|
	joinNode = qualifiedJoin(leftRSN, nestedInParens)
	{
		return joinNode;
	}
|
	joinNode = naturalJoin(leftRSN, nestedInParens)
	{
		return joinNode;
	}
}

TableOperatorNode
crossJoin(ResultSetNode leftRSN, boolean nestedInParens)
throws StandardException :
{
    ResultSetNode rightRSN;
}
{
    <CROSS> <JOIN> rightRSN = tableFactor()
    {
        TableOperatorNode ton = newJoinNode(
                leftRSN,
                rightRSN,
                null, // no ON clause in CROSS JOIN
                null, // no USING clause in CROSS JOIN
                JoinNode.INNERJOIN);
        ton.setNestedInParens(nestedInParens);
        return ton;
    }
}

TableOperatorNode
qualifiedJoin(ResultSetNode leftRSN, boolean nestedInParens) throws StandardException :
{
	int					joinType = JoinNode.INNERJOIN;
	ResultSetNode		rightRSN;
	TableOperatorNode	ton = null;
	Object[]			onOrUsingClause = null;
	ResultColumnList	usingClause = null;
	ValueNode			onClause;
}
{
		[ joinType = joinType() ] <JOIN>
		rightRSN = tableReferenceTypes(nestedInParens)
		onOrUsingClause = joinSpecification(leftRSN, rightRSN)
	{
		/* If NATURAL or CROSS is specified, then no joinSpecification()
		 * is required, otherwise it is required. NATURAL and CROSS should
		 * be handled by other rules, so this rule should always see a
		 * joinSpecification().
		 */

		/* Figure out whether an ON or USING clause was used */
		onClause = (ValueNode) onOrUsingClause[ON_CLAUSE];
		usingClause = (ResultColumnList) onOrUsingClause[USING_CLAUSE];

		if (onClause == null && usingClause == null)
		{
			throw StandardException.newException(SQLState.LANG_MISSING_JOIN_SPECIFICATION,
							JoinNode.joinTypeToString(joinType));
		}

		ton = newJoinNode(leftRSN, rightRSN, onClause, usingClause, joinType);

		/* Mark whether or not we are nested within parens */
		ton.setNestedInParens(nestedInParens);
		return ton;
	}
}

TableOperatorNode naturalJoin(ResultSetNode leftRSN, boolean nestedInParens)
throws StandardException :
{
    int joinType = JoinNode.INNERJOIN;
    ResultSetNode rightRSN;
}
{
    <NATURAL> [ joinType = joinType() ] <JOIN> rightRSN = tableFactor()
    {
        JoinNode node = newJoinNode(leftRSN, rightRSN, null, null, joinType);
        node.setNestedInParens(nestedInParens);
        node.setNaturalJoin();
        return node;
    }
}

int
joinType() throws StandardException :
{
	int joinType;
}
{
	<INNER>
	{
		return JoinNode.INNERJOIN;
	}
|
	joinType = outerJoinType() [<OUTER>]
	{
		return joinType;
	}
}

int
outerJoinType() throws StandardException :
{}
{
	<LEFT>
	{
		return JoinNode.LEFTOUTERJOIN;
	}
|
	<RIGHT>
	{
		return JoinNode.RIGHTOUTERJOIN;
	}
}

Object[]
joinSpecification(ResultSetNode leftRSN, ResultSetNode rightRSN)
		throws StandardException :
{
	Object[]			onOrUsingClause = new Object[ON_OR_USING_CLAUSE_SIZE];
	ResultColumnList	usingClause = null;
	ValueNode			joinClause = null;
}
{
	joinClause = joinCondition()
	{
		onOrUsingClause[ON_CLAUSE] = joinClause;
		onOrUsingClause[USING_CLAUSE] = usingClause;
		return onOrUsingClause;
	}
|
    usingClause = namedColumnsJoin()
    {
        onOrUsingClause[ON_CLAUSE] = joinClause;
        onOrUsingClause[USING_CLAUSE] = usingClause;
        return onOrUsingClause;
    }
}

ValueNode
joinCondition() throws StandardException :
{
	ValueNode joinClause;
}
{
	/* valueExpression() was searchCondition() */
	<ON> joinClause = valueExpression()
	{
		return joinClause;
	}
}

ResultColumnList
namedColumnsJoin() throws StandardException :
{
    ResultColumnList usingClause = (ResultColumnList) nodeFactory.getNode(
            C_NodeTypes.RESULT_COLUMN_LIST, getContextManager());
}
{
    <USING> <LEFT_PAREN> columnNameList(usingClause) <RIGHT_PAREN>
    {
        return usingClause;
    }
}

/*
 * <A NAME="tableValueConstructor">tableValueConstructor</A>
 */
ResultSetNode
tableValueConstructor() throws StandardException :
{
	ResultSetNode	resultSetNode;
}
{
	<VALUES> resultSetNode = tableValueConstructorList()
	{
		return resultSetNode;
	}
}

/*
 * <A NAME="tableValueConstructorList">tableValueConstructorList</A>
 */
ResultSetNode
tableValueConstructorList() throws StandardException :
{
	ResultSetNode	resultSetNode;
}
{
	resultSetNode = rowValueConstructor(null)
		( <COMMA> resultSetNode = rowValueConstructor(resultSetNode) ) *
	{
		if (resultSetNode instanceof UnionNode)
		{
			((UnionNode) resultSetNode).markTopTableConstructor();
		}

		return resultSetNode;
	}
}

/*
 * <A NAME="explicitTable">explicitTable</A>
 */

/*
 * <A NAME="datetimeValueFunction">datetimeValueFunction</A>
 */
ValueNode
datetimeValueFunction() throws StandardException :
{
	int prec = -1; // can't be negative, if used
}
{
	LOOKAHEAD({(getToken(1).kind == CURRENT && getToken(2).kind == DATE)}) <CURRENT> <DATE>
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.CURRENT_DATETIME_OPERATOR_NODE,
								ReuseFactory.getInteger(
									CurrentDatetimeOperatorNode.CURRENT_DATE),
								getContextManager());
	}
	| <CURRENT_DATE>
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.CURRENT_DATETIME_OPERATOR_NODE,
								ReuseFactory.getInteger(
									CurrentDatetimeOperatorNode.CURRENT_DATE),
								getContextManager());
	}
|
	LOOKAHEAD({(getToken(1).kind == CURRENT && getToken(2).kind == TIME)}) <CURRENT> <TIME>
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.CURRENT_DATETIME_OPERATOR_NODE,
							ReuseFactory.getInteger(
								CurrentDatetimeOperatorNode.CURRENT_TIME),
							getContextManager());
	}
	| <CURRENT_TIME>
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.CURRENT_DATETIME_OPERATOR_NODE,
							ReuseFactory.getInteger(
								CurrentDatetimeOperatorNode.CURRENT_TIME),
							getContextManager());
	}
|
	LOOKAHEAD({(getToken(1).kind == CURRENT && getToken(2).kind == TIMESTAMP)}) <CURRENT> <TIMESTAMP>
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.CURRENT_DATETIME_OPERATOR_NODE,
							ReuseFactory.getInteger(
								CurrentDatetimeOperatorNode.CURRENT_TIMESTAMP),
							getContextManager());
	}
	| <CURRENT_TIMESTAMP>
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.CURRENT_DATETIME_OPERATOR_NODE,
							ReuseFactory.getInteger(
								CurrentDatetimeOperatorNode.CURRENT_TIMESTAMP),
							getContextManager());
	}
	| <NOW> [ <LEFT_PAREN> <RIGHT_PAREN> ]
	{
		return (ValueNode) nodeFactory.getNode(
							C_NodeTypes.CURRENT_DATETIME_OPERATOR_NODE,
							ReuseFactory.getInteger(
								CurrentDatetimeOperatorNode.CURRENT_TIMESTAMP),
							getContextManager());
	}
}

   /*
   ** Note that set function and aggregate are used
   ** interchangeably in the parser.  The tree has
   ** aggregate nodes.
   */
   ValueNode
   windowOrAggregateFunctionNode() throws StandardException :
   {
       ValueNode winOrAgg;
       ValueNode input;
       QueryTreeNode window = null;
       ValueNode[] rankColsRef = null;
       Boolean ignoreNulls = Boolean.FALSE;
       Integer offset = 1;
       ValueNode defaultValue = null;
   }
   {
       <COUNT> <LEFT_PAREN>
       ( <ASTERISK>
       {
               winOrAgg = (ValueNode) nodeFactory.getNode(
                                   C_NodeTypes.AGGREGATE_NODE,
                                   null,
                                   CountAggregateDefinition.class,
                                   Boolean.FALSE,
                                   "COUNT(*)",
                                   getContextManager());
       }
       |
           winOrAgg = aggregateExpression("COUNT", CountAggregateDefinition.class)
       )
           <RIGHT_PAREN> [ window = overClause() ]
       {
           if (window != null) {
               ((AggregateNode)winOrAgg).setWindowFunction(true);
               winOrAgg =  (ValueNode) nodeFactory.getNode(
                   C_NodeTypes.WRAPPED_AGGREGATE_FUNCTION_NODE,
                   window,
                   winOrAgg,
                   getContextManager());
           }

           return winOrAgg;
       }
   |
       winOrAgg = generalAggregate() [ window = overClause() ]
       {
           if (window != null) {
               ((AggregateNode)winOrAgg).setWindowFunction(true);
               winOrAgg =  (ValueNode) nodeFactory.getNode(
                   C_NodeTypes.WRAPPED_AGGREGATE_FUNCTION_NODE,
                   window,
                   winOrAgg,
                   getContextManager());
           }

           return winOrAgg;
       }
   |
       <DENSERANK> <LEFT_PAREN> <RIGHT_PAREN> window = overClause()
       {
           setWindowFrameMode(window, WindowFrameDefinition.FrameMode.ROWS);
           winOrAgg = (ValueNode) nodeFactory.getNode(
               C_NodeTypes.DENSERANK_FUNCTION_NODE,
               DenseRankFunctionDefinition.class,
               window,
               getContextManager());
           return winOrAgg;
       }
   |
       <RANK> <LEFT_PAREN> <RIGHT_PAREN> window = overClause()
       {
           setWindowFrameMode(window, WindowFrameDefinition.FrameMode.ROWS);
           winOrAgg = (ValueNode) nodeFactory.getNode(
               C_NodeTypes.RANK_FUNCTION_NODE,
               RankFunctionDefinition.class,
               window,
               getContextManager());
           return winOrAgg;
       }
   |
       <ROWNUMBER> <LEFT_PAREN> <RIGHT_PAREN> window = overClause()
       {
           setWindowFrameMode(window, WindowFrameDefinition.FrameMode.ROWS);
           winOrAgg = (ValueNode) nodeFactory.getNode(
               C_NodeTypes.ROW_NUMBER_FUNCTION_NODE,
               RowNumberFunctionDefinition.class,
               window,
               getContextManager());
           return winOrAgg;
       }
   |
       <LASTVALUE> <LEFT_PAREN> input = additiveExpression(null, 0) ignoreNulls = ignoreNulls() <RIGHT_PAREN> window = overClause()
       {
           setWindowFrameMode(window, WindowFrameDefinition.FrameMode.ROWS);
           winOrAgg = (ValueNode) nodeFactory.getNode(
               C_NodeTypes.FIRST_LAST_VALUE_FUNCTION_NODE,
               FirstLastValueFunctionDefinition.class,
               window,
               input,
               ignoreNulls,
               "LAST_VALUE",
               getContextManager());
           return winOrAgg;
       }
   |
       <FIRSTVALUE> <LEFT_PAREN> input = additiveExpression(null, 0) ignoreNulls = ignoreNulls() <RIGHT_PAREN> window = overClause()
       {
           setWindowFrameMode(window, WindowFrameDefinition.FrameMode.ROWS);
           winOrAgg = (ValueNode) nodeFactory.getNode(
               C_NodeTypes.FIRST_LAST_VALUE_FUNCTION_NODE,
               FirstLastValueFunctionDefinition.class,
               window,
               input,
               ignoreNulls,
               "FIRST_VALUE",
               getContextManager());
           return winOrAgg;
       }
   |
       <LEAD> <LEFT_PAREN> input = additiveExpression(null, 0) [ <COMMA> offset = scale() [ <COMMA> defaultValue = literal() ] ] <RIGHT_PAREN> window = overClause()
       {
           setWindowFrameMode(window, WindowFrameDefinition.FrameMode.ROWS);
           winOrAgg = (ValueNode) nodeFactory.getNode(
               C_NodeTypes.LEAD_LAG_FUNCTION_NODE,
               LeadLagFunctionDefinition.class,
               window,
               input,
               "LEAD",
               offset,
               defaultValue,    // optional default value TODO:
               getContextManager());
           return winOrAgg;
       }
   |
       <LAG> <LEFT_PAREN> input = additiveExpression(null, 0) [ <COMMA> offset = scale() [ <COMMA> defaultValue = literal() ] ] <RIGHT_PAREN> window = overClause()
       {
           setWindowFrameMode(window, WindowFrameDefinition.FrameMode.ROWS);
           winOrAgg = (ValueNode) nodeFactory.getNode(
               C_NodeTypes.LEAD_LAG_FUNCTION_NODE,
               LeadLagFunctionDefinition.class,
               window,
               input,
               "LAG",
               offset,
               defaultValue,    // optional default value TODO:
               getContextManager());
           return winOrAgg;
       }
   }

Boolean
ignoreNulls() :
{}
{
    LOOKAHEAD ( { getToken(1).kind == IGNORE && getToken(2).kind == NULLS } )
    ( <IGNORE> <NULLS>
        {
            return Boolean.TRUE;
        }
    )
|
    LOOKAHEAD ( { getToken(1).kind == RESPECT && getToken(2).kind == NULLS } )
    ( <RESPECT> <NULLS>
        {
            return Boolean.FALSE;
        }
    )
|
    {
        return Boolean.FALSE;
    }
}


QueryTreeNode
overClause() throws StandardException :
{
	String windowRef;
	Partition partitionCols = null;
	OrderByList orderCols = null;
	// Default. RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
	WindowFrameDefinition frameDefn = new WindowFrameDefinition(true);
}
{
  LOOKAHEAD({ getToken(2).kind == LEFT_PAREN ||
			  getToken(2).kind == IDENTIFIER })
	<OVER>
  ( // Define window - can be none, any or all of "partition by", "order by", "frame"
    <LEFT_PAREN> [ partitionCols = partitionByClause() ] [ orderCols = orderByClause(null) ] [ frameDefn = frameDefinitionClause() ] <RIGHT_PAREN>
	{
	    if(orderCols == null && frameDefn.getFrameMode() == WindowFrameDefinition.FrameMode.RANGE) {
            frameDefn = new WindowFrameDefinition(false);
	    }
	    OverClause overClause = new OverClause.Builder(getContextManager())
	        .setPartition(partitionCols)
	        .setOrderByClause(orderCols)
	        .setFrameDefinition(frameDefn)
	        .build();

		return (QueryTreeNode) nodeFactory.getNode(
			C_NodeTypes.WINDOW_DEFINITION_NODE,
			null,
			overClause,
			getContextManager());
	}
 |
   // Reference to a previously defined window
   windowRef = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
   {
	   return (QueryTreeNode) nodeFactory.getNode(
			C_NodeTypes.WINDOW_REFERENCE_NODE,
			windowRef,
			getContextManager());
   }
 )

}

WindowFrameDefinition
frameDefinitionClause() throws StandardException:
{
	WindowFrameDefinition frameDefn = null;
	WindowFrameDefinition.FrameMode frameMode = null;
	WindowFrameDefinition.FrameType frameStart = null;
	// If no frameEnd given, defaults to CURRENT ROW
	WindowFrameDefinition.FrameType frameEnd = new WindowFrameDefinition.FrameType(WindowFrameDefinition.Frame.CURRENT_ROW, WindowFrameDefinition.FrameType.NON_VAL);
}
{
   ( frameMode = frameClause() ( frameStart = frameStartEnd() |
        ( <BETWEEN> frameStart = frameStartEnd() <AND> frameEnd = frameStartEnd() )
        ) )
   {
       if (frameStart != null) {
           frameDefn = new WindowFrameDefinition(frameMode, frameStart, frameEnd);
       }
       return frameDefn;
   }
}

WindowFrameDefinition.FrameMode
frameClause():
{
    WindowFrameDefinition.FrameMode frameMode = null;
}
{
    ( <ROWS>
      { frameMode = WindowFrameDefinition.FrameMode.ROWS; } |
      <RANGE>
      { frameMode = WindowFrameDefinition.FrameMode.RANGE; } )
      {
          return frameMode;
      }
}

WindowFrameDefinition.FrameType
frameStartEnd() throws StandardException:
{
    WindowFrameDefinition.FrameType frameType = null;
    // rowOffset only makes sense for <n> PRECEDING or <n> FOLLOWING and n>0; n=0 implies CURRENT ROW
    int rowOffset = WindowFrameDefinition.FrameType.NON_VAL;
}
{
  ( <CURRENT> <ROW>
     { frameType = new WindowFrameDefinition.FrameType(WindowFrameDefinition.Frame.CURRENT_ROW, rowOffset); } |
  ( rowOffset = rowOffset()
        (
          <PRECEDING>
            { frameType = new WindowFrameDefinition.FrameType(WindowFrameDefinition.Frame.PRECEDING, rowOffset); }  |
          <FOLLOWING>
            { frameType = new WindowFrameDefinition.FrameType(WindowFrameDefinition.Frame.FOLLOWING, rowOffset); }
        )
  ) |
  <UNBOUNDED>
      (
          <PRECEDING>
            { frameType = new WindowFrameDefinition.FrameType(WindowFrameDefinition.Frame.UNBOUNDED_PRECEDING, rowOffset); } |
          <FOLLOWING>
            { frameType = new WindowFrameDefinition.FrameType(WindowFrameDefinition.Frame.UNBOUNDED_FOLLOWING, rowOffset); }
      )
  )
  {
     return frameType;
  }
}

int
rowOffset() throws StandardException:
{
    Token intToken;
}
{   // non-negative whole numbers: 0 or (1-9)*
//    intToken = <NON_NEGATIVE_INT: "0" | ["1"-"9"] (<DIGIT>)*>
    intToken = <EXACT_NUMERIC>
    {
        int num = WindowFrameDefinition.FrameType.NON_VAL;
        try {
            num = Integer.parseInt(intToken.image);
        } catch (NumberFormatException nfe) {
            throw StandardException.newException(
                   SQLState.LANG_INVALID_INTEGER_LITERAL, intToken.image);
        }
        return num;
    }
}

ValueNode
aggregateExpression(String aggName, Class aggClass) throws StandardException :
{
	boolean		distinct = false;
	ValueNode	value;
}
{
	[ distinct = setQuantifier() ] value = additiveExpression(null, 0)
	{
		return (ValueNode) nodeFactory.getNode(
								C_NodeTypes.AGGREGATE_NODE,
								value,
								aggClass,
								distinct ? Boolean.TRUE : Boolean.FALSE,
								aggName,
								getContextManager());
	}
}

ValueNode
generalAggregate() throws StandardException :
{
	Token			aggToken;
	String			methodAliasString;
	ValueNode	aggExpr;
	ValueNode		value;
}
{
	aggToken = builtInAggregateType()
	<LEFT_PAREN>
		aggExpr = aggregateExpression(aggName(aggToken), aggClass(aggToken))
	<RIGHT_PAREN>
	{
		return aggExpr;
	}
}

/*
** All built in aggregates are pretty similar to user
** defined aggregates, except we know what to map to
** without looking up the class name.
**
** NOTE: COUNT is omitted here because the COUNT aggregate is
** factored into a different rule, to distinguish between
** COUNT(*) and COUNT(<expression>).
*/
Token
builtInAggregateType() throws StandardException :
{
	Token	retval;
}
{
	(
		retval = <MAX> |
		retval = <AVG> |
		retval = <MIN> |
		retval = <SUM>
	)
	{
		return retval;
	}
}

ValueNode
castSpecification() throws StandardException :
{
	DataTypeDescriptor dts;
	ValueNode		 treeTop;
	ValueNode		 value;
	int				 charType;
	int				 length = -1;
}
{
	<CAST> <LEFT_PAREN> value = castOperand() <AS> dts = dataTypeCast() <RIGHT_PAREN>
	{
		treeTop = (ValueNode) nodeFactory.getNode(
									C_NodeTypes.CAST_NODE,
									value,
									dts,
									getContextManager());
		((CastNode) treeTop).setForExternallyGeneratedCASTnode();

		/* We need to generate a SQL->Java conversion tree above us if
		 * the dataTypeCast is a user type.
		 */
		if (dts.getTypeId().userType())
		{
			treeTop = (ValueNode) nodeFactory.getNode(
							C_NodeTypes.JAVA_TO_SQL_VALUE_NODE,
							nodeFactory.getNode(
											C_NodeTypes.SQL_TO_JAVA_VALUE_NODE,
											treeTop,
											getContextManager()),
							getContextManager());
		}

		return treeTop;
	}

}

/**
 * Next value from a sequence object
 */
ValueNode
nextValueExpression() throws StandardException :
{
	ValueNode		 nextValue;
	TableName sequenceName;
}
{
       <NEXT> <VALUE> <FOR> sequenceName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
       {
        checkVersion(DataDictionary.DD_VERSION_DERBY_10_6, "NEXT VALUE");
		nextValue = (ValueNode) nodeFactory.getNode(
									C_NodeTypes.NEXT_SEQUENCE_NODE,
									sequenceName,
									getContextManager());

		return nextValue;}
}

/*
 * <A NAME="storedAs">storedAs</A>
 */
String
storedAs() :
{
}
{
	<PARQUET>
	{
		return "P";
	}
|
    <AVRO>
	{
		return "A";
	}
|
	<ORC>
	{
		return "O";
	}
|
	<TEXTFILE>
	{
		return "T";
	}
}

/*
 * <A NAME="compressedAs">compressedAs</A>
 */
String
compressedAs() :
{
}
{
	<ZLIB>
	{
		return "zlib";
	}
|
    <SNAPPY>
	{
		return "snappy";
	}
}

/*
 * <A NAME="charOrVarchar">charOrVarchar</A>
 */
int
charOrVarchar() :
{
}
{
	<CHAR>
	{
		return Types.CHAR;
	}
|
	<VARCHAR>
	{
		return Types.VARCHAR;
	}
}

ValueNode
castOperand() throws StandardException :
{
	ValueNode value;
}
{
	value = additiveExpression(null, 0)
	{
		return value;
	}
|
	<NULL>
	{
		return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE,
									getContextManager());
	}
}


/*
 * <A NAME="dynamicParameterSpecification">dynamicParameterSpecification</A>
 */
ParameterNode
dynamicParameterSpecification() throws StandardException :
{}
{
	<QUESTION_MARK>
	{
		return makeParameterNode( );
	}
}

/*
 * <A NAME="whereClause">whereClause</A>
 */
ValueNode
whereClause(Token beginToken) throws StandardException :
{
	ValueNode	value;
	Token		endToken;
}
{
	/* valueExpression() was searchCondition() */
	value = valueExpression()
	{
		endToken = getToken(0);

		value.setBeginOffset( beginToken.endOffset + 1 );
		value.setEndOffset( endToken.endOffset );

		return value;
	}
}

Partition
partitionByClause() throws StandardException :
{
	GroupByList groupingCols;
}
{
	<PARTITION> <BY>
        (
	groupingCols = groupingColumnReferenceList(true)
	{
		return new Partition(groupingCols);
	}
        )
}

GroupByList
groupByClause() throws StandardException :
{
	GroupByList groupingCols;
}
{
	<GROUP> <BY>
        (
	LOOKAHEAD ( { getToken(1).kind == ROLLUP &&
			getToken(2).kind == LEFT_PAREN } )
        <ROLLUP> <LEFT_PAREN> groupingCols = groupingColumnReferenceList(false) <RIGHT_PAREN>
	{
		groupingCols.setRollup();
		return groupingCols;
	}
|
	groupingCols = groupingColumnReferenceList(false)
	{
		return groupingCols;
	}
        )
}

GroupByList
groupingColumnReferenceList(boolean fromPartitionBy) throws StandardException :
{
	GroupByList groupingCols = (GroupByList) nodeFactory.getNode(
									C_NodeTypes.GROUP_BY_LIST,
									getContextManager());
}
{
	groupingColumnReference(groupingCols, fromPartitionBy) ( <COMMA> groupingColumnReference(groupingCols, fromPartitionBy) ) *
	{
		return groupingCols;
	}
}

void
groupingColumnReference(GroupByList groupingCols, boolean fromPartitionBy) throws StandardException :
{
        ValueNode columnExpression;
}
{
	columnExpression = additiveExpression(null, 0)
	{
		/* Aggregates not allowed in group by */
		HasNodeVisitor visitor =
			new HasNodeVisitor(AggregateNode.class);
		columnExpression.accept(visitor);
		if (visitor.hasNode())
		{
			throw StandardException.newException(SQLState.LANG_AGGREGATE_IN_GROUPBY_LIST);
		}

        if (!fromPartitionBy) {
		    visitor =
        	        new HasNodeVisitor(GroupingFunctionNode.class);
                    columnExpression.accept(visitor);
            if (visitor.hasNode())
            {
                throw StandardException.newException(SQLState.LANG_GROUPING_FUNCTION_CONTEXT_ERROR, "GROUPBY");
            }
         }

        // Look for user-defined aggregates too. At the parsing stage,
        // they appear as function calls. Look for function calls
        // inside the expression and mark them so that at bind() time
        // we can reject them if they turn out to be user-defined aggregates
        // rather than ordinary function calls.
        CollectNodesVisitor  functionSniffer = new CollectNodesVisitor( StaticMethodCallNode.class );
        columnExpression.accept( functionSniffer );
        Vector    functionNodes = functionSniffer.getList();
        for ( int i = 0; i < functionNodes.size(); i++ )
        {
            ((StaticMethodCallNode) functionNodes.elementAt( i )).setAppearsInGroupBy();
        }

		if (columnExpression.isParameterNode())
	    	{
			throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, "?");
	    	}
		groupingCols.addGroupByColumn(
			(GroupByColumn) nodeFactory.getNode(
							C_NodeTypes.GROUP_BY_COLUMN,
							columnExpression,
							getContextManager()));
	}
}

ValueNode
havingClause() throws StandardException :
{
	ValueNode value;
}
{
	/* valueExpression() was searchCondition() */
	<HAVING> value = valueExpression()
	{
		return value;
	}
}


WindowList
windowClause() throws StandardException :
{
	WindowList windows = new WindowList();
	windows.setContextManager(getContextManager());
}
{
	<WINDOW> windows = windowDefinition(windows)
	( <COMMA> windows = windowDefinition(windows) )*
	{
		return windows;
	}
}


WindowList
windowDefinition(WindowList wl) throws StandardException :
{
	String windowName;
	OrderByList orderCols = null;
}
{
	windowName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	<AS>
	<LEFT_PAREN> [ orderCols = orderByClause(null) ] <RIGHT_PAREN>
	{
		wl.addWindow(
			(WindowDefinitionNode)nodeFactory.getNode(
				C_NodeTypes.WINDOW_DEFINITION_NODE,
				windowName,
				orderCols,
				getContextManager()));

		return wl;
	}
}

StatementNode
schemaDefinition() throws StandardException :
{
	String	schemaName = null;
	String	authName = null;
	Token ifTok = null;
	Token notTok = null;
    Token existsTok = null;
    Token ifTok2 = null;
    Token notTok2 = null;
    Token existsTok2 = null;

}
{
	/*
	** CREATE SCHEMA:
	** We are not currently handling character set
	** specifications for schema, or schema bodies.
	*/
	<SCHEMA>
	(	[ ifTok = <IF> notTok = <NOT> existsTok = <EXISTS> ] schemaName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) [ ifTok2 = <IF> notTok2 = <NOT> existsTok2 = <EXISTS> ] [ <AUTHORIZATION> authName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) ]
		{
			boolean ifNotExists = ifTok != null && notTok != null && existsTok != null;
			boolean ifNotExists2 = ifTok2 != null && notTok2 != null && existsTok2 != null;
			if (authName != null)
				checkVersion( DataDictionary.DD_VERSION_DERBY_10_2, "AUTHORIZATION");

			if (schemaName.startsWith("SYS"))
				throw StandardException.newException(SQLState.INVALID_SCHEMA_SYS, schemaName);

			return (StatementNode) nodeFactory.getNode(
					C_NodeTypes.CREATE_SCHEMA_NODE,
					schemaName,
					authName,
					((ifNotExists || ifNotExists2) ?
					  new Integer(StatementType.CREATE_IF_NOT_EXISTS) :
                      new Integer(StatementType.CREATE_DEFAULT)),
					getContextManager()
					);
		}
	|
		<AUTHORIZATION> authName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
		{
			checkVersion( DataDictionary.DD_VERSION_DERBY_10_2, "AUTHORIZATION");
			if (authName.startsWith("SYS"))
				throw StandardException.newException(SQLState.INVALID_SCHEMA_SYS, authName);

			return (StatementNode) nodeFactory.getNode(
					C_NodeTypes.CREATE_SCHEMA_NODE,
					authName,
					authName,
					getContextManager()
					);
		}
	)
}


/*
 * <A NAME="roleDefinition">roleDefinition</A>
 */
StatementNode
roleDefinition() throws StandardException :
{
	String	roleName = null;
}
{
	/*
	 * CREATE ROLE
	 *
	 * Not currently supported: [ WITH ADMIN <grantor>]
	 */
	<ROLE> roleName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		checkVersion( DataDictionary.DD_VERSION_DERBY_10_5, "ROLES");
		checkSqlStandardAccess("CREATE ROLE");

		// Reserve namespace for system roles
		if (roleName.startsWith("SYS")) {
			throw StandardException.newException
                            (SQLState.INVALID_ROLE_SYS, roleName);
                }

		return (StatementNode) nodeFactory.getNode(
			C_NodeTypes.CREATE_ROLE_NODE,
			roleName,
			getContextManager());
	}
}

/*
 * <A NAME="sequenceDefinition">sequenceDefinition</A>
 */
StatementNode
sequenceDefinition() throws StandardException :
{
	TableName qualifiedSequenceName = null;
	DataTypeDescriptor dtd =  null;
	Long initialValue = null;
	Long stepValue = null;
	Long maxValue = null;
	Long minValue = null;
    Boolean cycle = Boolean.FALSE;
    Object[] optionalClauses = new Object[ IDX_OPTION_COUNT ];
}
{
	<SEQUENCE> qualifiedSequenceName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
    ( sequenceGeneratorOption( optionalClauses ) ) *
	{
		checkVersion( DataDictionary.DD_VERSION_DERBY_10_6, "SEQUENCES");

        if ( optionalClauses[ IDX_DATA_TYPE ] != null )
        { dtd = (DataTypeDescriptor) optionalClauses[ IDX_DATA_TYPE ]; }

        if ( optionalClauses[ IDX_START_WITH_OPTION ] != null )
        { initialValue = (Long) optionalClauses[ IDX_START_WITH_OPTION ]; }

        if ( optionalClauses[ IDX_INCREMENT_BY_OPTION ] != null )
        { stepValue = (Long) optionalClauses[ IDX_INCREMENT_BY_OPTION ]; }

        if (
                (optionalClauses[ IDX_MAX_VALUE_OPTION ] != null) &&
                ( !( optionalClauses[ IDX_MAX_VALUE_OPTION ] instanceof Boolean ) )
            )
        { maxValue = (Long) optionalClauses[ IDX_MAX_VALUE_OPTION ]; }

        if (
                (optionalClauses[ IDX_MIN_VALUE_OPTION ] != null) &&
                ( !( optionalClauses[ IDX_MIN_VALUE_OPTION ] instanceof Boolean ) )
            )
        { minValue = (Long) optionalClauses[ IDX_MIN_VALUE_OPTION ]; }

        if ( optionalClauses[ IDX_CYCLE_OPTION ] != null )
        { cycle = (Boolean) optionalClauses[ IDX_CYCLE_OPTION ]; }

		return (StatementNode) nodeFactory.getNode(
			C_NodeTypes.CREATE_SEQUENCE_NODE,
			qualifiedSequenceName,
            dtd,
            initialValue,
            stepValue,
            maxValue,
            minValue,
            cycle,
			getContextManager());
	}
}

/*
 * <A NAME="sequenceGeneratorOption">sequenceGeneratorOption</A>
 */
void
sequenceGeneratorOption( Object[] optionalClauses ) throws StandardException :
{
    Object option =  null;
    int  optionIndex = -1;
    Boolean[] cycleOption = new Boolean[ 1 ];
    String optionName = null;
    Token optionToken = null;
}
{
    (
        optionToken = <AS> option = exactIntegerType()
        { optionIndex = IDX_DATA_TYPE; }
	|
        optionToken = <START> <WITH> option = exactIntegerObject()
        { optionIndex = IDX_START_WITH_OPTION; }
	|
        optionToken = <INCREMENT> <BY> option = exactIntegerObject()
        { optionIndex = IDX_INCREMENT_BY_OPTION; }
	|
        (
            ( optionToken = <MAXVALUE> option = exactIntegerObject() )
            |
            LOOKAHEAD( { getToken( 2 ).kind == MAXVALUE } )
            ( <NO> optionToken = <MAXVALUE> ) { option = Boolean.FALSE; }
        )
        { optionIndex = IDX_MAX_VALUE_OPTION; }
	|
        (
            ( optionToken = <MINVALUE> option = exactIntegerObject() )
            |
            LOOKAHEAD( { getToken( 2 ).kind == MINVALUE } )
            ( <NO> optionToken = <MINVALUE> ) { option = Boolean.FALSE; }
        )
        { optionIndex = IDX_MIN_VALUE_OPTION; }
	|
        optionToken = cycleClause( cycleOption )
        {
            option = cycleOption[ 0 ];
            optionIndex = IDX_CYCLE_OPTION;
        }
    )
	{
        if ( optionIndex != -1 )
        {
            if ( optionalClauses[ optionIndex ] != null )
            {
                throw StandardException.newException( SQLState.LANG_DUPLICATE_CS_CLAUSE, optionToken.image );
            }

            optionalClauses[ optionIndex ] = option;
        }
	}
}

/*
 * <A NAME="cycleClause">cycleClause</A>
 */
Token
cycleClause( Boolean[] cycleOption ) throws StandardException :
{
    Token token = null;
}
{
    token = <CYCLE>
    {
        cycleOption[0] = Boolean.TRUE;
        return token;
    }
|
    <NO> token = <CYCLE>
    {
        cycleOption[0] = Boolean.FALSE;
        return token;
    }
}

/*
 * <A NAME="exactIntegerObject">exactNumberObject</A>
 */
Long
exactIntegerObject() throws StandardException :
{
	long exactNumeric;
}
{
	exactNumeric = exactNumber()
    {
        return new Long( exactNumeric );
    }
}

/*
 * <A NAME="stepValue">stepValue</A>
 */
Long
stepValue() throws StandardException :
{
	long stepValue;
}
{
	<INCREMENT> <BY> stepValue = exactNumber()
    {
        return new Long( stepValue );
    }
}


/*
 * <A NAME="dropSequenceStatement">dropSequenceStatement</A>
 */
StatementNode
dropSequenceStatement() throws StandardException :
{
	TableName sequenceName;
}
{
	/*
	 * DROP SEQUENCE <sequencename> RESTRICT
	 */
	<SEQUENCE> sequenceName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) <RESTRICT>
	{
		checkVersion( DataDictionary.DD_VERSION_DERBY_10_6, "SEQUENCES");

		return (StatementNode) nodeFactory.getNode(
			C_NodeTypes.DROP_SEQUENCE_NODE,
			sequenceName,
			getContextManager());
	}
}

/*
 * <A NAME="tableDefinition">tableDefinition</A>
 */
StatementNode
tableDefinition() throws StandardException :
{
	char				lockGranularity = TableDescriptor.DEFAULT_LOCK_GRANULARITY;
	Properties			properties = null;
	TableName			tableName;
	TableElementList	tableElementList = null;
	ResultColumnList	resultColumns = null;
	QueryTreeNode		queryExpression;
	boolean				withData = true;
	boolean             hasJDBClimitClause = false;
	String              queryString = null;
	String              compression = "none";
	boolean             isExternal = false;
	ResultColumnList	partitionedResultColumns = null;
	ValueNode              terminationChar = null;
	ValueNode              escapedByChar = null;
	ValueNode              linesTerminatedByChar = null;
	String              storageFormat = null;
	ValueNode              location = null;
	boolean                mergeSchema = false;
	OrderByList orderCols = null;
    ValueNode[] offsetClauses = new ValueNode[ OFFSET_CLAUSE_COUNT ];
	ValueNode[] topNOut = new ValueNode[ 1 ];
	Boolean     isLogicalKey = Boolean.TRUE;
	Boolean     presplit = Boolean.FALSE;
	ValueNode   splitKeysPath = null;
	ValueNode   columnDelimiter = null;
    ValueNode   characterDelimiter = null;
    ValueNode   timestampFormat = null;
    ValueNode   dateFormat = null;
    ValueNode   timeFormat = null;
}
{
    [ isExternal = isExternal() ]
	<TABLE> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
			// Lookahead needed to choose between
			// tableElementList and tableColumnList
	(		LOOKAHEAD({getToken(1).kind == LEFT_PAREN &&
	                   getToken(3).kind != COMMA &&
	                   getToken(3).kind != RIGHT_PAREN})
			tableElementList = tableElementList()
			[ properties = propertyList(false)<CHECK_PROPERTIES>]
			([<LOGICAL> {isLogicalKey = Boolean.TRUE;} |<PHYSICAL> {isLogicalKey = Boolean.FALSE;}]
			  <SPLITKEYS> {presplit = Boolean.TRUE;}
              <LOCATION> {splitKeysPath = literal();}
              [<COLUMNDELIMITER> {columnDelimiter = literal();}]
              [<CHARACTERDELIMITER> {characterDelimiter = literal();}]
              [<TIMESTAMPFORMAT> {timestampFormat = literal();}]
              [<DATEFORMAT> {dateFormat = literal();}]
              [<TIMEFORMAT> {timeFormat = literal();}]
              {
              		validateParameters(isExternal, storageFormat, terminationChar, escapedByChar,
                                linesTerminatedByChar, location,compression, partitionedResultColumns, tableElementList);
              			return (StatementNode) nodeFactory.getNode(
              								C_NodeTypes.CREATE_TABLE_NODE,
              								tableName,
              								tableElementList,
              								properties,
              								new Character(lockGranularity),
              								presplit,
              								isLogicalKey,
              								splitKeysPath,
              								columnDelimiter,
              								characterDelimiter,
              								timestampFormat,
              								dateFormat,
              								timeFormat,
              								getContextManager());
              			}
            |[<COMMA>]
             [ <COMPRESSED> <WITH> compression =compressedAs() ]
             [<COMMA>]
             [ <PARTITIONED> <BY> <LEFT_PAREN> partitionedResultColumns = tableColumnList() <RIGHT_PAREN> ]
             [<COMMA>]
             [ <ROW> <FORMAT> <DELIMITED>
                [ <FIELDS> <TERMINATED> <BY> { terminationChar=literal(); }  [
                [<COMMA>]
                <ESCAPED> <BY> { escapedByChar=literal(); } ] ]
                [<COMMA>]
                [ <LINES> <TERMINATED> <BY> { linesTerminatedByChar=literal(); } ]
             ]
             [<COMMA>]
             [<STORED> <AS> storageFormat = storedAs() ]
             [<COMMA>]
             [<LOCATION> {location = literal();}]
             [<MERGE> <SCHEMA> {mergeSchema = Boolean.TRUE;}]
			{
			validateParameters(isExternal, storageFormat, terminationChar, escapedByChar,
                        linesTerminatedByChar, location,compression, partitionedResultColumns, tableElementList);
				return (StatementNode) nodeFactory.getNode(
										C_NodeTypes.CREATE_TABLE_NODE,
										tableName,
										tableElementList,
										properties,
										new Character(lockGranularity),
										isExternal,
										partitionedResultColumns,
										terminationChar,
										escapedByChar,
										linesTerminatedByChar,
										storageFormat,
										location,
										compression,
										mergeSchema,
										getContextManager());
			})
		|
			[ <LEFT_PAREN> resultColumns = tableColumnList() <RIGHT_PAREN> ]
						[<COMMA>]
                        [ <PARTITIONED> <BY> <LEFT_PAREN> partitionedResultColumns = tableColumnList() <RIGHT_PAREN> ]
                        [<COMMA>]
                        [ <ROW> <FORMAT> <DELIMITED>
                            [ <FIELDS> <TERMINATED> <BY> { terminationChar=literal(); }  [
                            [<COMMA>]
                            <ESCAPED> <BY> { escapedByChar=literal(); } ] ]
                            [<COMMA>]
                            [ <LINES> <TERMINATED> <BY> { linesTerminatedByChar=literal(); } ]
                        ]
            			[<COMMA>]
                        [<STORED> <AS> storageFormat = storedAs() ]
            			[<COMMA>]
                        [<LOCATION> {location = literal();}]
                        [<COMMA>]
			<AS>
			queryExpression = queryExpression(null, NO_SET_OP, topNOut)
            [ orderCols = orderByClause(null) ]
               hasJDBClimitClause = offsetFetchFirstClause( offsetClauses )

			[<WITH> [ <NO> { withData = false; } ] <DATA>]
			{
                if (withData) {
                    if (! (queryExpression instanceof SelectNode)) {
                       // can't have "WITH DATA" without a query
                       throw StandardException.newException(SQLState.NOT_IMPLEMENTED, "WITH DATA must use a query.");
                    }
                    queryString = parseQueryString(statementSQLText);
                }
				/* Parameters not allowed in create table */
				HasNodeVisitor visitor =
					new HasNodeVisitor(ParameterNode.class);
				queryExpression.accept(visitor);
				if (visitor.hasNode())
				{
					throw StandardException.newException(
						SQLState.LANG_NO_PARAMS_IN_TABLES);
				}
				validateParameters(isExternal, storageFormat, terminationChar, escapedByChar,
                linesTerminatedByChar, location, compression, partitionedResultColumns, tableElementList);
				StatementNode node = (StatementNode)nodeFactory.getNode(
										C_NodeTypes.CREATE_TABLE_NODE,
										tableName,
										resultColumns,
										queryExpression,
										isExternal,
										partitionedResultColumns,
										terminationChar,
										escapedByChar,
										linesTerminatedByChar,
										storageFormat,
										location,
										getContextManager());
                if (node instanceof CreateTableNode) {
                    ((CreateTableNode)node).setQueryString(queryString);
                }
                return node;
			}
	)
}


void
validateParameters(boolean isExternal, String storageFormat, ValueNode terminationChar, ValueNode escapedByChar,
            ValueNode linesTerminatedByChar, ValueNode location, String compression, ResultColumnList partitionedResultColumns, TableElementList tableElementList) throws StandardException :
{
}
{
    {
                if (isExternal && partitionedResultColumns != null){
                     List<String> columnsPartitions = Arrays.asList(partitionedResultColumns.getColumnNames());

                     for(String columnPartititon : columnsPartitions){
                        ColumnDefinitionNode definition = tableElementList.findColumnDefinition(columnPartititon);
                        if(definition ==  null){
                                throw StandardException.newException(SQLState.EXTERNAL_TABLES_PARTITIONS_REQUIRED, columnPartititon);
                            }
                     }
                }

                if (isExternal && storageFormat == null)
                        throw StandardException.newException(
                        						SQLState.STORED_AS_REQUIRED_WITH_EXTERNAL_TABLES);
                if (isExternal && location == null)
                        throw StandardException.newException(
                        						SQLState.LOCATION_REQUIRED_WITH_EXTERNAL_TABLES);

			    //COMPRESSION ERROR WITH TEXT
			    if(compression != "none" && storageFormat.equals("T")){
			           throw StandardException.newException(SQLState.COMPRESSION_NOT_ALLOWED_WITH_TEXT_FILE);
			    }

			    // PARQUET ERRORS
	            if (storageFormat != null && storageFormat.equals("P")) {
	                if (terminationChar !=null || escapedByChar !=null || linesTerminatedByChar != null)
                        throw StandardException.newException(
                        						SQLState.ROW_FORMAT_NOT_ALLOWED_WITH_PARQUET);
	             }
	             // AVRO ERRORS
                if (storageFormat != null && storageFormat.equals("A")) {
                    if (terminationChar !=null || escapedByChar !=null || linesTerminatedByChar != null)
                         throw StandardException.newException(
                                                SQLState.ROW_FORMAT_NOT_ALLOWED_WITH_AVRO);
                 }
	             // ORC Errors
	            if (storageFormat != null && storageFormat.equals("O")) {
	                if (terminationChar !=null || escapedByChar !=null || linesTerminatedByChar != null)
                        throw StandardException.newException(
                        						SQLState.ROW_FORMAT_NOT_ALLOWED_WITH_ORC);
	             }
                // STORAGE OR LOCATION WITHOUT EXTERNAL
	             if ( (storageFormat != null || location !=null) && !isExternal)
	                throw StandardException.newException(
                                            	SQLState.STORED_AS_OR_LOCATION_WITHOUT_EXTERNAL);

	   }
}

ResultColumnList
tableColumnList() throws StandardException :
{
	ResultColumnList resultColumns = (ResultColumnList) nodeFactory.getNode(
											C_NodeTypes.RESULT_COLUMN_LIST,
											getContextManager());
}
{
	columnNameList(resultColumns)
	{
		return resultColumns;
	}
}

/*
 * This method is called when a comment starting with --db-properties is found.
 * Such a comment is a special directive to Derby and allows a sql to pass optimizer
 * overrides. Derby looks for propertyName=value [,propertyName=value]* after
 * --db-properties and returns these properties in a Properties object as a return
 * value of this method.
 * The param propertiesUseAllowed true indicates that users are allowed to
 * specify optimizer overrides in the given context.
 * False means optimizer overrides in the given context are allowed internally
 * only eg impl/load/import.java specifies property insertMode=replace/bulkInsert
 * in the insert statement. This same property will not be acceptable from an
 * insert statement from a user sql.
 */
Properties
propertyList(boolean propertiesUseAllowed) throws StandardException :
{
	Properties properties = new FormatableProperties();
	StringTokenizer commaSeparatedProperties;
	StringTokenizer equalOperatorSeparatedProperty;
}
{
	<SPLICEDASHPROPERTIES> {
		//first use StringTokenizer to get tokens which are delimited by ,s
		commaSeparatedProperties = new StringTokenizer(getToken(1).image,",");
		while (commaSeparatedProperties.hasMoreTokens()) {
			//Now verify that tokens delimited by ,s follow propertyName=value pattern
			String currentProperty = commaSeparatedProperties.nextToken();
			equalOperatorSeparatedProperty = new StringTokenizer(currentProperty,"=", true);
			if (equalOperatorSeparatedProperty.countTokens() != 3)
				throw StandardException.newException(SQLState.PROPERTY_SYNTAX_INVALID);
			else {
				String key = equalOperatorSeparatedProperty.nextToken().trim();
				if (!equalOperatorSeparatedProperty.nextToken().equals("="))
					throw StandardException.newException(SQLState.PROPERTY_SYNTAX_INVALID);
				String value = equalOperatorSeparatedProperty.nextToken().trim();
				verifyImageLength(value);
				/* Trim off the leading and trailing ', and compress all '' to ' */
				if (value.startsWith("'") && value.endsWith("'"))
					value = StringUtil.compressQuotes(value.substring(1, value.length() - 1), SINGLEQUOTES);
				/* Trim off the leading and trailing ", and compress all "" to " */
				else if (value.startsWith("\"") && value.endsWith("\""))
					value = StringUtil.compressQuotes(value.substring(1, value.length() - 1), DOUBLEQUOTES);
				else if (! InsertNode.STATUS_DIRECTORY.equals(key) &&
				         ! InsertNode.BULK_IMPORT_DIRECTORY.equals(key) &&
				         ! DeleteNode.BULK_DELETE_DIRECTORY.equals(key))
					value = value.toUpperCase();
				// Do not allow user to specify multiple values for the same key
				if (properties.put(key, value) != null)
				{
					throw StandardException.newException(SQLState.LANG_DUPLICATE_PROPERTY, key);
				}
		}
	}
	//if this property override is supported in internal mode only, then do that verification here.
	if (!propertiesUseAllowed)
		checkInternalFeature("DERBY-PROPERTIES");
	return properties;
	}
}

/*
 * <A NAME="DB2lockGranularityClause">DB2lockGranularityClause</A>
 */
char
DB2lockGranularityClause() throws StandardException :
{
	char lockGranularity;
}
{
	<LOCKSIZE> lockGranularity = lockGranularity()
	{
		return lockGranularity;
	}
}

/*
 * <A NAME="lockGranularity">lockGranularity</A>
 */
char
lockGranularity() throws StandardException :
{
}
{
	<TABLE>
	{
		return TableDescriptor.TABLE_LOCK_GRANULARITY;
	}
|
	<ROW>
	{
		return TableDescriptor.ROW_LOCK_GRANULARITY;
	}
}

/*
 * <A NAME="indexDefinition">indexDefinition</A>
 */
StatementNode
indexDefinition() throws StandardException :
{
	Boolean		unique = Boolean.FALSE;
	Boolean		excludeNulls = Boolean.FALSE;
	Boolean		excludeDefaults = Boolean.FALSE;
	Properties	properties = null;
	TableName	indexName;
	TableName	tableName;
	ValueNode   hfilePath = null;
	ValueNode   splitKeysPath = null;
	ValueNode   columnDelimiter = null;
	ValueNode   characterDelimiter = null;
    ValueNode   timestampFormat = null;
    ValueNode   dateFormat = null;
    ValueNode   timeFormat = null;
    ValueNode   sampleFraction = null;
    Boolean     sampling = Boolean.FALSE;
    Boolean     preSplit = Boolean.FALSE;
	Vector	    indexColumnList = new Vector();
	Boolean     isLogicalKey = Boolean.TRUE;
}
{
	/*
	** fyi: The INDEX keyword is pushed into the indexType()
	** production to get the grammar to work...
	*/
	[ unique = unique() ] <INDEX>
		indexName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) <ON> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
				<LEFT_PAREN> indexColumnList(indexColumnList) <RIGHT_PAREN>
		[ properties = propertyList(false) <CHECK_PROPERTIES>]
		[ <EXCLUDE>
		    [ <NULL> <KEYS> { excludeNulls = true;} ]
		    [ <_DEFAULT> <KEYS> { excludeDefaults = true;} ]
		]
		[   [<LOGICAL> {isLogicalKey = Boolean.TRUE;} |<PHYSICAL> {isLogicalKey = Boolean.FALSE;}]
		    <SPLITKEYS> {preSplit = Boolean.TRUE;}
		        <LOCATION> {splitKeysPath = literal();}
		         [<COLUMNDELIMITER> {columnDelimiter = literal();}]
		         [<CHARACTERDELIMITER> {characterDelimiter = literal();}]
                 [<TIMESTAMPFORMAT> {timestampFormat = literal();}]
                 [<DATEFORMAT> {dateFormat = literal();}]
                 [<TIMEFORMAT> {timeFormat = literal();}]

		    |<AUTO> {sampling = Boolean.TRUE;}
		     <SPLITKEYS> {preSplit = Boolean.TRUE;}
		     [ <SAMPLE><FRACTION> {sampleFraction = literal();}]
		]
		[<HFILE> <LOCATION> {hfilePath = literal();}]

	{
		/* User allowed to specify schema name on table and index.
		 * If no schema name specified for index, then it "inherits"
		 * its schema name from the table.
		 * If index has a schema name and table does not, then
		 * table "inherits" its schema name from the index.
		 * If schema names are specified for both objects, then the
		 * schema names must be the same.
		 */
		if (indexName.getSchemaName() == null)
		{
			indexName.setSchemaName(tableName.getSchemaName());
		}
		else if (tableName.getSchemaName() == null)
		{
			tableName.setSchemaName(indexName.getSchemaName());
		}
		else
		{
			/* schema name specified for both */
			if (! (indexName.getSchemaName().equals(
						tableName.getSchemaName())))
			{
				throw StandardException.newException(SQLState.LANG_INDEX_AND_TABLE_IN_DIFFERENT_SCHEMAS,
							indexName,
							tableName);
			}
		}
		return (StatementNode) nodeFactory.getNode(
								C_NodeTypes.CREATE_INDEX_NODE,
								unique,
								DEFAULT_INDEX_TYPE,
								indexName,
								tableName,
								indexColumnList,
								excludeNulls,
								excludeDefaults,
								preSplit,
								isLogicalKey,
								sampling,
								sampleFraction,
								splitKeysPath,
								columnDelimiter,
								characterDelimiter,
								timestampFormat,
								dateFormat,
								timeFormat,
								hfilePath,
								properties,
								getContextManager());
	}
}

/*
 * <A NAME="unique">unique</A>
 */
Boolean
unique() throws StandardException :
{
}
{
	<UNIQUE>
	{
		return Boolean.TRUE;
	}
}

/*
 * <A NAME="unique">unique</A>
 */
Boolean
isExternal() throws StandardException :
{
}
{
	<EXTERNAL>
	{
		return Boolean.TRUE;
	}
}

/**
	CREATE PROCEDURE

	procedureElements contains the description of the procedure.
	(CREATE FUNCTIONS shares this lyout), see functionDefinition

	0 - Object[] 3 element array for parameters
	1 - TableName - specific name
	2 - Integer - dynamic result set count
	3 - String language (always java) - ignore
	4 - String external name (also passed directly to create alias node - ignore
	5 - Short parameter style (always java) - ignore
	6 - Short - SQL allowed.
	7 - Boolean - CALLED ON NULL INPUT (always TRUE for procedures)
	8 - TypeDescriptor - return type (always NULL for procedures)
*/

StatementNode
procedureDefinition() throws StandardException :
{
	TableName procedureName;
	Object[] procedureElements = new Object[CreateAliasNode.ROUTINE_ELEMENT_COUNT];
    // These two instances are used to make sure for Python routine
    // The user uses <AS> token to set <EXTERNAL> <NAME> rahter than
    // using <EXTERNAL> <NAME> directly.
	ModifiableBoolean isPyRoutine = new ModifiableBoolean(false);
	ModifiableBoolean hasExternalName = new ModifiableBoolean(false);
}
{
		<PROCEDURE> procedureName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
		procedureElements[0] = procedureParameterList()
		( routineElement(true, false, procedureElements, isPyRoutine, hasExternalName) ) +
		{
		    checkRequiredRoutineClause(JAVA_ROUTINE_CLAUSES, procedureElements);

			return getCreateAliasNode(
							procedureName,
							(String) procedureElements[ CreateAliasNode.EXTERNAL_NAME ],
							procedureElements,
							AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR,
							Boolean.FALSE);
		}
}

void routineElement(boolean isProcedure, boolean isTableFunction, Object[] routineElements, ModifiableBoolean isPyRoutine, ModifiableBoolean hasExternalName) throws StandardException :
{
	int drs;
	int clausePosition = -1;
	Object clauseValue = null;
}
{
	(
		<SPECIFIC> clauseValue = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
			{ clausePosition = CreateAliasNode.TABLE_NAME; throw StandardException.newException(SQLState.NOT_IMPLEMENTED, "SPECIFIC identifier");}
	|
		[ <DYNAMIC> ] <RESULT> <SETS> drs = uint_value()
		{
			if (!isProcedure)
				throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, "RESULT SETS");
			clauseValue = ReuseFactory.getInteger(drs); clausePosition = CreateAliasNode.DYNAMIC_RESULT_SET_COUNT;
		}
	|
        <LANGUAGE>
            (<JAVA> { clauseValue = "JAVA"; clausePosition = CreateAliasNode.LANGUAGE;}
            |
            <PYTHON>
                {
                    if(hasExternalName.get())
                    throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, "PYTHON ROUTINE DOES NOT USE EXTERNAL NAME");
                    clauseValue = "PYTHON";
                    clausePosition = CreateAliasNode.LANGUAGE;
                    isPyRoutine.set(true);
                }
            )
	|
		<DETERMINISTIC>
        {
            clauseValue = Boolean.TRUE;
            clausePosition = CreateAliasNode.DETERMINISTIC;
            checkVersion(DataDictionary.DD_VERSION_DERBY_10_5, "DETERMINISTIC");
        }
	|
		<NOT> <DETERMINISTIC>
        {
            clauseValue = Boolean.FALSE;
            clausePosition = CreateAliasNode.DETERMINISTIC;
            checkVersion(DataDictionary.DD_VERSION_DERBY_10_5, "DETERMINISTIC");
        }
	|
        <EXTERNAL>
        ( <NAME> clauseValue = string()
            {
            if(isPyRoutine.get())
            throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, "PYTHON ROUTINE DOES NOT USE EXTERNAL NAME");
            clausePosition = CreateAliasNode.EXTERNAL_NAME;
            hasExternalName.set(true);
            }
        |
          <SECURITY>
            {   checkVersion(DataDictionary.DD_VERSION_DERBY_10_7,
                            "EXTERNAL SECURITY");
                checkSqlStandardAccess("EXTERNAL SECURITY");
                clauseValue = new Boolean(routineSecurityClause());
                clausePosition = CreateAliasNode.ROUTINE_SECURITY_DEFINER;
            }
        )
	|
	    <AS> clauseValue = string() {clausePosition = CreateAliasNode.EXTERNAL_NAME; } // Python script is after <AS>
	|
		<PARAMETER> <STYLE> clauseValue = parameterStyle( isTableFunction ) { clausePosition = CreateAliasNode.PARAMETER_STYLE; }

	|	<NO> <SQL>				{ clauseValue = ReuseFactory.getShort(RoutineAliasInfo.NO_SQL); clausePosition = CreateAliasNode.SQL_CONTROL; }
	|	<CONTAINS> <SQL>		{ clauseValue = ReuseFactory.getShort(RoutineAliasInfo.CONTAINS_SQL); clausePosition = CreateAliasNode.SQL_CONTROL; }
	|	<READS> <SQL> <DATA>	{ clauseValue = ReuseFactory.getShort(RoutineAliasInfo.READS_SQL_DATA); clausePosition = CreateAliasNode.SQL_CONTROL; }
	|	<MODIFIES> <SQL> <DATA>
		{
			if (!isProcedure)
				throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR, "MODIFIES SQL DATA");
			clauseValue = ReuseFactory.getShort(RoutineAliasInfo.MODIFIES_SQL_DATA); clausePosition = CreateAliasNode.SQL_CONTROL;
		}

	|   clauseValue = calledOnNullInput(isProcedure) { clausePosition = CreateAliasNode.NULL_ON_NULL_INPUT; }
	)

	{
		if (clausePosition != -1) {
			// check for repeated clause
			if (routineElements[clausePosition] != null) {

				String which = ROUTINE_CLAUSE_NAMES[clausePosition];
				throw StandardException.newException(SQLState.LANG_DB2_MULTIPLE_ELEMENTS, which);
			}

			routineElements[clausePosition] = clauseValue;
		}
	}
}

Boolean calledOnNullInput(boolean isProcedure) throws StandardException :
{
	Boolean calledOnNull;
}
{
	(
		<CALLED> { calledOnNull = Boolean.TRUE; }
		| <RETURNS> <NULL> {
		   if (isProcedure)
		     throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR,
		             "RETURNS NULL ON NULL INPUT");

		   calledOnNull = Boolean.FALSE;
		}

	) <ON> <NULL> <INPUT>
	{
		return calledOnNull;
	}
}

boolean  routineSecurityClause() throws StandardException :
{
    boolean result = false;
}
{
    (
        <INVOKER> { result = false;}
    |   <DEFINER> { result = true; }
    )
    {
        return result;
    }
}


Short parameterStyle( boolean isTableFunction ) throws StandardException :
{
}
{
	  <JAVA>
	  {
	      if ( isTableFunction )
	      { throw StandardException.newException( SQLState.LANG_MUST_BE_DJRS ); }

	      return ReuseFactory.getShort(RoutineAliasInfo.PS_JAVA);
	  }
|
	  <SPLICE_JDBC_RESULT_SET>
	  {
	      if ( !isTableFunction )
	      { throw StandardException.newException( SQLState.LANG_NO_DJRS ); }

	      return ReuseFactory.getShort(RoutineAliasInfo.PS_SPLICE_JDBC_RESULT_SET);
	  }
}

Object[]
procedureParameterList() throws StandardException :
{
	Vector[] list = new Vector[3];
	list[0] = new Vector(); // name
	list[1] = new Vector(); // type
	list[2] = new Vector(); // in/out
}
{
	<LEFT_PAREN>
		[ procedureParameterDefinition(list)
				( <COMMA> procedureParameterDefinition(list) )* ]
	<RIGHT_PAREN>
	{
		return list;
	}
}

/*
 * <A NAME="Definition">procedureParameterDefinition</A>
 */
void
procedureParameterDefinition(Vector[] list) throws StandardException :
{
	DataTypeDescriptor	typeDescriptor;
	String				parameterName = "";
	Integer				inout;
}
{
	inout = inoutParameter()

	// Lookahead needed because token could satisfy identifier and dataTypeDDL
	[   LOOKAHEAD( { dataTypeCheck(2) })
	    parameterName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	]
	typeDescriptor = dataTypeDDL()
	{
		list[0].addElement(parameterName);
		list[1].addElement(typeDescriptor.getCatalogType());
		list[2].addElement(inout);
	}
}

Integer
inoutParameter() :
{
	int mode = JDBC30Translation.PARAMETER_MODE_IN;
}
{
	[
		  <IN> { }
		| <OUT> { mode = JDBC30Translation.PARAMETER_MODE_OUT; }
		| <INOUT> { mode = JDBC30Translation.PARAMETER_MODE_IN_OUT; }
	]
	{ return ReuseFactory.getInteger(mode); }
}

/**
	CREATE FUNCTION

	functionElements contains the description of the function.

	0 - Object[] 3 element array for parameters
	1 - TableName - specific name
	2 - Integer - dynamic result set count - always 0
	3 - String language (always java) - required to be set
	4 - String external name (also passed directly to create alias node - ignore
	5 - Short parameter style (always java) - required to be set
	6 - Short - SQL allowed.
	7 - Boolean - CALLED ON NULL INPUT
	8 - TypeDescriptor - return type
*/

StatementNode
functionDefinition() throws StandardException :
{
	TableName functionName;
	TypeDescriptor  returnType;
	Object[] functionElements = new Object[CreateAliasNode.ROUTINE_ELEMENT_COUNT];
    // These two instances are used to make sure for Python routine
    // The user uses <AS> token to set <EXTERNAL> <NAME> rahter than
    // using <EXTERNAL> <NAME> directly.
    ModifiableBoolean isPyRoutine = new ModifiableBoolean(false);
    ModifiableBoolean hasExternalName = new ModifiableBoolean(false);
}
{
		<FUNCTION> functionName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
		functionElements[0] = functionParameterList()
		<RETURNS> returnType = functionReturnDataType()
		( routineElement(false, returnType.isRowMultiSet(), functionElements, isPyRoutine, hasExternalName) ) +
		{
		    functionElements[CreateAliasNode.RETURN_TYPE] = returnType;
		    checkRequiredRoutineClause(JAVA_ROUTINE_CLAUSES, functionElements);

			return getCreateAliasNode(
							functionName,
							(String) functionElements[CreateAliasNode.EXTERNAL_NAME],
							functionElements,
							AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR,
							Boolean.FALSE);
		}
}

Object[]
functionParameterList() throws StandardException :
{
	Vector[] list = new Vector[3];
	list[0] = new Vector(); // name
	list[1] = new Vector(); // type
	list[2] = new Vector(); // in/out - ALWAYS IN
}
{
	<LEFT_PAREN>
		[ functionParameterDefinition(list)
				( <COMMA> functionParameterDefinition(list) )* ]
	<RIGHT_PAREN>
	{
		return list;
	}
}

/*
 * <A NAME="Definition">functionParameterDefinition</A>
 */
void
functionParameterDefinition(Vector[] list) throws StandardException :
{
	DataTypeDescriptor	typeDescriptor;
	String				parameterName = "";
}
{
	// Lookahead needed because token could satisfy identifier and dataTypeDDL
	[   LOOKAHEAD( { dataTypeCheck(2) })
	    parameterName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	]
	typeDescriptor = dataTypeDDL()
	{
		list[0].addElement(parameterName);
		list[1].addElement(typeDescriptor.getCatalogType());
		list[2].addElement(ReuseFactory.getInteger(JDBC30Translation.PARAMETER_MODE_IN));
	}
}


/*
 * <A NAME="functionReturnDataType">functionReturnDataType</A>
 */
TypeDescriptor
functionReturnDataType() throws StandardException :
{
    TypeDescriptor	typeDescriptor;
}
{
    (
        typeDescriptor = catalogType()
         |
        typeDescriptor = functionTableType()
    )
    {
        return typeDescriptor;
    }
}

/*
 * <A NAME="functionTableType">functionTableType</A>
 */
TypeDescriptor
functionTableType() throws StandardException :
{
	ArrayList                       names = new ArrayList();
	ArrayList                         types = new ArrayList();
	String[]                          nameArray;
	TypeDescriptor[]        typeArray;
	int                                     columnCount;
}
{
	<TABLE>
	<LEFT_PAREN>
	    functionTableReturnColumn( names, types )
	    ( <COMMA> functionTableReturnColumn( names, types ) ) *
	<RIGHT_PAREN>
	{
        checkVersion( DataDictionary.DD_VERSION_DERBY_10_4, "CREATE FUNCTION...RETURNS TABLE");

		columnCount = names.size();
		nameArray = new String[ columnCount ];
		names.toArray( nameArray );
		typeArray = new TypeDescriptor[ columnCount ];
		types.toArray( typeArray );

		//
		// We do not allow XML as a column datatype because
		// Derby does not yet support the streaming JDBC4
		// interfaces to XML values.
		//
		for ( int i = 0; i < columnCount; i++ )
		{
		    if ( typeArray[ i ].getJDBCTypeId() == JDBC40Translation.SQLXML )
		    { throw StandardException.newException( SQLState.LANG_XML_NOT_ALLOWED_DJRS ); }
		}

		return DataTypeDescriptor.getRowMultiSet( nameArray, typeArray );
	}
}

/*
 * <A NAME="functionTableReturnColumn">functionTableReturnColumn</A>
 */
void
functionTableReturnColumn
(
    ArrayList names,
    ArrayList types
)
throws StandardException :
{
	String                          name;
	DataTypeDescriptor	typeDescriptor;
}
{
	name = identifier( Limits.MAX_IDENTIFIER_LENGTH, true )
	typeDescriptor = dataTypeDDL()
	{
		names.add( name );
		types.add( typeDescriptor.getCatalogType() );
	}
}

/**
	CREATE TYPE
*/

StatementNode
udtDefinition() throws StandardException :
{
	TableName udtName;
	String externalName;
}
{
		<TYPE> udtName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
		<EXTERNAL> <NAME> externalName = string()
		<LANGUAGE>  <JAVA>
		{
			checkVersion(DataDictionary.DD_VERSION_DERBY_10_6, "CREATE TYPE");
			return getCreateAliasNode(
							udtName,
							externalName,
							null,
							AliasInfo.ALIAS_TYPE_UDT_AS_CHAR,
							Boolean.FALSE);
		}
}

StatementNode
aggregateDefinition() throws StandardException :
{
	TableName aggregateName;
    DataTypeDescriptor  forType;
    DataTypeDescriptor  returnType = null;
	Object[] aggElements = new Object[CreateAliasNode.AGG_ELEMENT_COUNT];
	String externalName;
}
{
		<DERBY> <AGGREGATE> aggregateName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
        <FOR> forType = dataTypeDDL()
        [ <RETURNS> returnType = dataTypeDDL() ]
		<EXTERNAL> <NAME> externalName = string()
		{
            checkVersion(DataDictionary.DD_VERSION_DERBY_10_9, "CREATE DERBY AGGREGATE");

            if ( returnType == null ) { returnType = forType; }
            aggElements[ CreateAliasNode.AGG_FOR_TYPE ] = forType.getCatalogType();
            aggElements[ CreateAliasNode.AGG_RETURN_TYPE ] = returnType.getCatalogType();

            return getCreateAliasNode
            (
                aggregateName,
                externalName,
                aggElements,
                AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR
            );
		}
}

/**
 * WITH... with_query_1 [(col_name[,...])]AS (SELECT ...),
 *  ... with_query_2 [(col_name[,...])]AS (SELECT ...[with_query_1]),
 *  .
 *  .
 *  .
 *  ... with_query_n [(col_name[,...])]AS (SELECT ...[with_query1, with_query_2, with_query_n [,...]])
 *  SELECT
 *
 * <A NAME="methodCallParameterList">methodCallParameterList</A>
*/

void withClauseList(Vector parameterList) throws StandardException :
{
}
{
[ withClause(parameterList)
			( <COMMA> withClause(parameterList) )* ]
}

void withClause(Vector parameterList) throws StandardException :
{
    	int					checkOptionType;
    	ResultColumnList	resultColumns = null;
    	ResultSetNode		queryExpression;
    	TableName			tableName;
        Token beginToken = null;
       	Token				checkTok = null;
    	Token				endToken;
    	OrderByList         orderCols = null;
        ValueNode[] offsetClauses = new ValueNode[ OFFSET_CLAUSE_COUNT ];
        ValueNode[] topNOut = new ValueNode[ 1 ];
        boolean     hasJDBClimitClause = false;
        boolean isRecursive = false;
    }
    {
    	[<RECURSIVE> {
    	   isRecursive = true;
    	}]
    	tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
    		beginToken = <AS>
    		[<LEFT_PAREN>]
    		queryExpression = queryExpression(null, NO_SET_OP, topNOut)
    		[ orderCols = orderByClause(queryExpression) ]
            hasJDBClimitClause = offsetFetchFirstClause( offsetClauses )
            [<RIGHT_PAREN>]
    	{
    		checkOptionType = ViewDescriptor.NO_CHECK_OPTION;
    		endToken = getToken(0);
    		/* Parameters not allowed in create view */
    		HasNodeVisitor visitor = new HasNodeVisitor(ParameterNode.class);
    		queryExpression.accept(visitor);
    		if (visitor.hasNode()) {
    			throw StandardException.newException(SQLState.LANG_NO_PARAMS_IN_VIEWS);
    		}
    	    if (topNOut[0] != null) {
    	        hasJDBClimitClause = true;
                offsetClauses[ FETCH_FIRST_CLAUSE ] = topNOut[0];
    	    }

            if (isRecursive) {
			    if (!(queryExpression instanceof UnionNode) ||  !((UnionNode)queryExpression).all)
				    throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR,
					    	"WITH RECURSIVE requires UNION-ALL operation at the top level of the definition");

			    ((UnionNode)queryExpression).setIsRecursive(true);
			}

    		parameterList.add(nodeFactory.getNode(
    								C_NodeTypes.CREATE_VIEW_NODE,
    								tableName,
    								resultColumns,
    								queryExpression,
    								ReuseFactory.getInteger(checkOptionType),
    								StringUtil.slice(statementSQLText,
    												beginToken.beginOffset,
    												endToken.endOffset,false),
    								orderCols,
                                    offsetClauses[ OFFSET_CLAUSE ],
                                    offsetClauses[ FETCH_FIRST_CLAUSE ],
                                    Boolean.valueOf( hasJDBClimitClause ),
                                    Boolean.valueOf(isRecursive),
    								getContextManager()));
    }
}

StatementNode
viewDefinition(Token beginToken) throws StandardException :
{
	int					checkOptionType;
	ResultColumnList	resultColumns = null;
	ResultSetNode		queryExpression;
	TableName			tableName;
	Token				checkTok = null;
	Token				endToken;
	OrderByList         orderCols = null;
    ValueNode[] offsetClauses = new ValueNode[ OFFSET_CLAUSE_COUNT ];
    ValueNode[] topNOut = new ValueNode[ 1 ];
    boolean     hasJDBClimitClause = false;
    boolean     isRecursive = false;
}
{
	[<RECURSIVE> {
        isRecursive = true;
	}]
	<VIEW> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
		[ <LEFT_PAREN> resultColumns = viewColumnList() <RIGHT_PAREN> ]
		<AS>
		    		[<LEFT_PAREN>]
		queryExpression = queryExpression(null, NO_SET_OP, topNOut)
		[ orderCols = orderByClause(queryExpression) ]
        hasJDBClimitClause = offsetFetchFirstClause( offsetClauses )
            		[<RIGHT_PAREN>]
	{
		checkOptionType = ViewDescriptor.NO_CHECK_OPTION;
		endToken = getToken(0);
		/* Parameters not allowed in create view */
		HasNodeVisitor visitor = new HasNodeVisitor(ParameterNode.class);
		queryExpression.accept(visitor);
		if (visitor.hasNode())
		{
			throw StandardException.newException(SQLState.LANG_NO_PARAMS_IN_VIEWS);
		}

	    if (topNOut[0] != null) {
	        hasJDBClimitClause = true;
            offsetClauses[ FETCH_FIRST_CLAUSE ] = topNOut[0];
	    }

        if (isRecursive) {
			if (!(queryExpression instanceof UnionNode) ||  !((UnionNode)queryExpression).all)
				    throw StandardException.newException(SQLState.LANG_SYNTAX_ERROR,
					    	"WITH RECURSIVE requires UNION-ALL operation at the top level of the definition");

			((UnionNode)queryExpression).setIsRecursive(true);
		}


		return (StatementNode) nodeFactory.getNode(
								C_NodeTypes.CREATE_VIEW_NODE,
								tableName,
								resultColumns,
								queryExpression,
								ReuseFactory.getInteger(checkOptionType),
								StringUtil.slice(statementSQLText,
												beginToken.beginOffset,
												endToken.endOffset,false),
								orderCols,
                                offsetClauses[ OFFSET_CLAUSE ],
                                offsetClauses[ FETCH_FIRST_CLAUSE ],
                                Boolean.valueOf( hasJDBClimitClause ),
                                Boolean.valueOf(isRecursive),
								getContextManager());
	}
}

ResultColumnList
viewColumnList() throws StandardException :
{
	ResultColumnList	resultColumns = (ResultColumnList) nodeFactory.getNode(
											C_NodeTypes.RESULT_COLUMN_LIST,
											getContextManager());
}
{
	/* RESOLVE: Passing null parameter for now just to keep Java happy */
	columnNameList(resultColumns)
	{
		return resultColumns;
	}
}

StatementNode
triggerDefinition() throws StandardException :
{
	Boolean				isBefore;
	Boolean				isRow = Boolean.FALSE;  // STATEMENT implicit by default
	TableName			tableName;
	TableName			triggerName;
	Token[]				tokenHolder = new Token[1];
	Token				beginToken;
	Token				checkTok = null;
	Token				endToken;
	int					actionBegin;
	int					actionEnd;
	TriggerEventDML		triggerEvent;
	QueryTreeNode		actionNode;
	ResultColumnList	triggerColumns = (ResultColumnList) nodeFactory.getNode(
											C_NodeTypes.RESULT_COLUMN_LIST,
											getContextManager());
	Vector				refClause = null;
}
{
	<TRIGGER> triggerName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	    isBefore = beforeOrAfter()
		triggerEvent = triggerEvent(triggerColumns)		// { INSERT | DELETE | UPDATE [ colList	] }
		<ON> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
		[ refClause = triggerReferencingClause() ]		// REFERENCING OLD/NEW AS
		[ <FOR> <EACH> isRow = rowOrStatement() ]
		[ <MODE> <DB2SQL> ]
		//we are not top level statement
		actionNode = proceduralStatement(tokenHolder)
		// the trigger body
	{
		actionEnd = getToken(0).endOffset;
		actionBegin = tokenHolder[0].beginOffset;

		// No DML in action node for BEFORE triggers.
		if (isBefore.booleanValue() && (actionNode instanceof DMLModStatementNode)) {
				throw StandardException.newException(
					SQLState.LANG_UNSUPPORTED_TRIGGER_STMT,
					((StatementNode) actionNode).statementToString(), "BEFORE");
					}


		// no params in trigger action
 		HasNodeVisitor visitor = new HasNodeVisitor(ParameterNode.class);
		actionNode.accept(visitor);
		if (visitor.hasNode())
		{
			throw StandardException.newException(SQLState.LANG_NO_PARAMS_IN_TRIGGER_ACTION);
		}

		return (StatementNode) nodeFactory.getNode(
								C_NodeTypes.CREATE_TRIGGER_NODE,
								triggerName,
								tableName,
								triggerEvent,
								triggerColumns,
								isBefore,
								isRow,
								Boolean.TRUE, 				// enabled
								refClause,			// referencing clause
								null,// when clause node
								null, 		// when clause text
								ReuseFactory.getInteger(0),
											// when clause begin offset
								actionNode,
								StringUtil.slice(statementSQLText,
									actionBegin,
									actionEnd,false),
								ReuseFactory.getInteger(actionBegin),
								getContextManager());
	}
}

StatementNode
synonymDefinition() throws StandardException :
{
	TableName synonymName;
	TableName targetName;
}
{
    <SYNONYM> synonymName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) <FOR>
		 targetName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		checkVersion(DataDictionary.DD_VERSION_DERBY_10_1,
			     "CREATE SYNONYM");

		return getCreateAliasNode
			(
				synonymName,
				targetName,
				null,
				AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR,
				Boolean.FALSE
			);
	}
}


Boolean
beforeOrAfter() :
{}
{
	<BEFORE>
	{
		return Boolean.TRUE;
	}
| 	<AFTER>
	{
		return Boolean.FALSE;
	}
}

TriggerEventDML
triggerEvent(ResultColumnList rcl) throws StandardException :
{}
{
	<INSERT>
	{
		return TriggerEventDML.INSERT;
	}
| 	<DELETE>
	{
		return TriggerEventDML.DELETE;
	}
|	<UPDATE> [ <OF> columnNameList(rcl) ]
	{
		return TriggerEventDML.UPDATE;
	}
}

Boolean
rowOrStatement() :
{
}
{
	token = <ROW>
	{
		return Boolean.TRUE;
	}
| 	token = <STATEMENT>
	{
		return Boolean.FALSE;
	}
}

Vector
triggerReferencingClause() throws StandardException :
{
	Vector vector = new Vector();
}
{
	<REFERENCING> triggerReferencingExpression(vector) ( triggerReferencingExpression(vector) )*
	{
		return vector;
	}
}

void
triggerReferencingExpression(Vector vector) throws StandardException :
{
	String	identifier;
	boolean isNew = true;
	boolean	isRow = true;
}
{
	(
	  <NEW> [ <ROW> | <TABLE> { isRow = false;} ]
	  |
	  <OLD> {isNew = false;} [ <ROW> | <TABLE> { isRow = false;} ]
	  |
	  <NEW_TABLE> { isRow = false;}
	  |
	  <OLD_TABLE> { isNew = false; isRow = false;}
	)

	<AS> identifier = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		vector.addElement(new TriggerReferencingStruct(isRow, isNew, identifier));
	}
}


/*
 * <A NAME="defaultClause">defaultClause</A>
 */
ValueNode
defaultClause(long[] autoIncrementInfo, String columnName) throws StandardException :
{
	ValueNode	value;
	Token		beginToken;
	Token		endToken;
}
{
	[ <WITH> ] beginToken = <_DEFAULT> value = defaultOption(beginToken, autoIncrementInfo, columnName)
	{
		return value;
	}
|
	value = generatedColumnOption(autoIncrementInfo)
	{
		return value;
	}

}

/*
 * <A NAME="defaultNullOnlyClause">defaultNullOnlyClause</A>
 */
ValueNode
defaultNullOnlyClause() throws StandardException :
{
}

{
	 <_DEFAULT> <NULL>
	 {
		return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE,
									getContextManager());
	 }
}

/*
 * <A NAME="generatedColumnOption">generatedColumnOption</A>
 */

//ToCleanUp
//A specific class not such long[] should exists for autoIncrementInfo ...

ValueNode
generatedColumnOption(long[] autoIncrementInfo) throws StandardException :
{
	ValueNode	value = null;
}
{
    {
	autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_START_INDEX] = 1;
	autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_INC_INDEX] = 1;
	autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX] = 1;
	autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY] = ColumnDefinitionNode.CREATE_AUTOINCREMENT;
    }

	<GENERATED>
    (
        value = generatedAlways( autoIncrementInfo )
        {
            return value;
        }
    |
        value = generatedByDefault( autoIncrementInfo )
        {
            return value;
        }
    )

}

/*
 * <A NAME="generatedAlways">generatedAlways</A>
 */
ValueNode
generatedAlways(long[] autoIncrementInfo) throws StandardException :
{
	ValueNode	value = null;
}
{
	 <ALWAYS>
    (
        LOOKAHEAD ( { getToken(1).kind == AS && getToken(2).kind == IDENTITY } )
        asIdentity( autoIncrementInfo )
        {
            return value;
        }
    |
        LOOKAHEAD ( { getToken(1).kind == AS && getToken(2).kind == LEFT_PAREN } )
        value = generationClause()
        {
            return value;
        }
    )
}

/*
 * <A NAME="generatedByDefault">generatedByDefault</A>
 */

ValueNode
generatedByDefault(long[] autoIncrementInfo) throws StandardException :
{
	ValueNode	value = null;
}
{
	 <BY> <_DEFAULT> asIdentity( autoIncrementInfo )
     {
		checkVersion(DataDictionary.DD_VERSION_DERBY_10_1,
			     "GENERATED BY DEFAULT");

		value = (ValueNode) nodeFactory.getNode(C_NodeTypes.DEFAULT_NODE,
							getContextManager()) ;

		return value;
    }

}

/*
 * <A NAME="asIdentity">asIdentity</A>
 */

void
asIdentity( long[] autoIncrementInfo) throws StandardException :
{
}
{
	<AS> <IDENTITY> [<LEFT_PAREN> autoIncrementBeginEnd(autoIncrementInfo) <RIGHT_PAREN>]
    {
		return;
    }

}

/*
 * <A NAME="generationClause">generationClause</A>
 */
ValueNode
generationClause() throws StandardException :
{
	ValueNode	value = null;
	Token beginToken = null;
	Token endToken = null;
}
{
	<AS> beginToken = <LEFT_PAREN> value = valueExpression() endToken = <RIGHT_PAREN>
    {
		checkVersion(DataDictionary.DD_VERSION_DERBY_10_5, "GENERATED COLUMN");

		return (ValueNode) nodeFactory.getNode
        (
            C_NodeTypes.GENERATION_CLAUSE_NODE,
            value,
            StringUtil.slice
            (
                statementSQLText,
                beginToken.endOffset + 1,
                endToken.beginOffset - 1,
                true
            ),
            getContextManager()
        );
    }
}

/*
 * <A NAME="autoIncrementBeginEnd">autoIncrementBeginEnd</A>
 */
void
autoIncrementBeginEnd(long[] autoIncrementInfo) throws StandardException :
{
	long		autoIncrementInitial = 1;
	long		autoIncrementIncrement = 1;
}
{
        <INCREMENT> <BY> autoIncrementIncrement = exactNumber()
    {
		autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_INC_INDEX] = autoIncrementIncrement;
		autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY] = ColumnDefinitionNode.CREATE_AUTOINCREMENT;
		return;
    }
|
		<START> <WITH> autoIncrementInitial = exactNumber() [<COMMA> <INCREMENT> <BY> autoIncrementIncrement = exactNumber() ]
    {
		autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_START_INDEX] = autoIncrementInitial;
		autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_INC_INDEX] = autoIncrementIncrement;
		autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY] = ColumnDefinitionNode.CREATE_AUTOINCREMENT;
		return;
    }
}

/*
 * <A NAME="defaultOption">defaultOption</A>
 */
ValueNode
defaultOption(Token beginToken, long[] autoIncrementInfo,
	String columnName) throws StandardException :
{
	Token		endToken;
	Token		errorTok = null;
	Token		initialTok = null;
	ValueNode	value;
}
{
	//Look ahead required to tell NULL from a class name which starts with
	// NULL (e.g., NULL::)
	LOOKAHEAD( {getToken(1).kind == NULL && !(getToken(2).kind == PERIOD ||
			getToken(2).kind == DOUBLE_COLON)})
	<NULL>
	{
		return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE,
									getContextManager());
	}
|
	value = DB2DefaultOption(columnName)
	{
		endToken = getToken(0);
		value.setBeginOffset( beginToken.beginOffset );
		value.setEndOffset( endToken.endOffset );
		value = (ValueNode) nodeFactory.getNode(
								C_NodeTypes.DEFAULT_NODE,
								value,
								StringUtil.slice(statementSQLText,
									beginToken.beginOffset + 7,
									endToken.endOffset,true),
								getContextManager()
							);
		return value;
	}
}

/*
 * <A NAME="DB2DefaultOption">DB2DefaultOption</A>
 */
ValueNode
DB2DefaultOption(String columnName) throws StandardException :
{
	ValueNode	value;
}
{
	// DB2 spec says default can only be one of the
	// following: <constant>, <datetime-special-register> (ex.
	// "current time"), CURRENT SCHEMA, USER, NULL, or
	// <cast-function>.  We currently support all of these
	// except the 'blob' function that is part of the DB2 valid
	// <cast-function> grammar.  See beetle 5281 for plans
	// support 'blob' function in future.

	LOOKAHEAD({getToken(2).kind == SCHEMA || getToken(2).kind == SQLID})
	<CURRENT> (<SCHEMA> | <SQLID>)
	{
		return (ValueNode) nodeFactory.getNode(
						C_NodeTypes.CURRENT_SCHEMA_NODE,
						getContextManager());
	}
|
	/* Revert DB2 restriction: DERBY-3013. Accept standard SQL CURRENT_USER,
	 * SESSION_USER in addition to USER.
	 */
	value = userNode()
	{
		return value;
	}
|
	value = currentRoleNode()
	{
		return value;
	}
|
	LOOKAHEAD({
				getToken(1).kind == DATE ||
                getToken(1).kind == TIME ||
                getToken(1).kind == TIMESTAMP
			})
	value = miscBuiltins()
	{ // these functions are allowed as valid <cast-function> defaults.
	  // Once "BLOB" is allowed as a cast-function (5281), a case should be
	  // added for that, as well.
		return value;
	}
|
	LOOKAHEAD( {getToken(2).kind == LEFT_PAREN ||
		       (getToken(4).kind == LEFT_PAREN &&
		        getToken(2).kind != COMMA)} )
		// Check against comma: see Derby-331
		// Before adding this, the following was erroneously
		// flagged as invalid:
		//	   create table foo(.., b int default 0, unique (a))
	value = miscBuiltins()
	{
		// If we have a function (as indicated by an open paren,
		// which can be either the 2nd token (w/ normal function name)
		// or the 4th token (w/ qualified function name)), then
		// it's not valid.  Catch it here and throw an "invalid
		// default" error (42894) instead of letting it go as
		// a syntax error (this matches DB2 UDB behavior).
		throw StandardException.newException(
			SQLState.LANG_DB2_INVALID_DEFAULT_VALUE,
			columnName);
	}
|
	value = datetimeValueFunction()
	{
		return value;
	}
|
	// Only (valid) thing left is literals (i.e. actual constants).
	value = literal()
	{
		return value;
	}

}

/*
 * <A NAME="literal">literal</A>
 */
ValueNode
literal() throws StandardException :
{
	String	sign = "";
	Token	tok;
	String  datetimeString;
	String  bitString;
	ValueNode		constantNode;
}
{
	[ sign = sign() ] constantNode = numericLiteral(sign)
	{
		return constantNode;
	}
|
	constantNode = stringLiteral()
	{
		return	constantNode;
	}
|
	constantNode = hexLiteral()
	{
		return	constantNode;
	}
|
	constantNode = dateTimeLiteral()
	{
		return constantNode;
	}
|
	tok = booleanLiteral()
	{
		return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.BOOLEAN_CONSTANT_NODE,
									StringUtil.SQLEqualsIgnoreCase(tok.image, "true") ?
										Boolean.TRUE : Boolean.FALSE,
 									getContextManager());
	}
/*
	JDBC and ODBC do not support the interval type, so let's not do it
	ourselves for now.
|
	tok = <INTERVAL_LITERAL>
	{
		return nodeFactory.getIntervalNode(tok.image,
					getTypeCompilationFactory(),
					getContextManager());
	}
*/
}


/*
 * <A NAME="int">intLiteral</A>
 */
NumericConstantNode
intLiteral() throws StandardException :
{
	Token	tok;
	String sign = null;
	NumericConstantNode result;
}
{
	[ sign = sign() ] tok = <EXACT_NUMERIC>
	{
		/*
		** The various java parse utilities can't handle leading +,
		** so only concatenate leading -.
		*/

		String num = tok.image;

		if (sign != null && sign.equals("-"))
			num = sign.concat(num);

		try {
			result = getNumericNode(num, true);
		} catch (NumberFormatException e) {
			throw StandardException.newException(
				SQLState.LANG_INTEGER_LITERAL_EXPECTED);
		}

		return result;
	}
}


/*
 * <A NAME="numericLiteral">numericLiteral</A>
 */
ValueNode
numericLiteral(String sign) throws StandardException :
{
	Token	tok;
}
{
	tok = <EXACT_NUMERIC>
	{
		/*
		** The various java parse utilities can't handle leading +,
		** so only concatenate leading -.
		*/

		String num = tok.image;

		if (sign.equals("-"))
			num = sign.concat(num);

		return getNumericNode(num, false);
	}
|
	tok = <APPROXIMATE_NUMERIC>
	{
		StringBuilder doubleImage;
		String doubleString;
		int ePosn, dotPosn; // Position of letter e and '.' in value
		Double		doubleValue;

		doubleImage = new StringBuilder(sign);
		doubleImage.append(tok.image);
		doubleString = doubleImage.toString();

		ePosn = doubleString.indexOf('E');
		if (ePosn == -1)
			ePosn = doubleString.indexOf('e');
		if (SanityManager.DEBUG)
			SanityManager.ASSERT(ePosn != -1, "no E or e in approximate numeric");

		// there is a limit on the length of a floatingpoint literal in DB2
		if (doubleString.length() > Limits.DB2_MAX_FLOATINGPOINT_LITERAL_LENGTH)
			throw StandardException.newException(SQLState.LANG_DB2_TOO_LONG_FLOATING_POINT_LITERAL, doubleString, TypeId.DOUBLE_NAME);
		// if there is no '.' before the e, put one in
		dotPosn = doubleString.substring(0,ePosn).indexOf('.');
		if (dotPosn == -1) {
			doubleImage.insert(ePosn,'.');
			doubleString = doubleImage.toString();
			ePosn++;
		}

		try
		{
			doubleValue = Double.valueOf(doubleString);

		}
		catch (NumberFormatException nfe)
		{
			throw StandardException.newException(SQLState.LANG_FORMAT_EXCEPTION, TypeId.DOUBLE_NAME);
		}

		double dv = doubleValue.doubleValue();

		// When the value is 0 it's possible rounded, try to detect it by checking if the mantissa is 0.0
		//   "proof of correctness": any nonzero value (mantissa) with less than 30 characters will not be
		//                           rounded to 0.0 by a float/real. This correctly detects the case when
		//                           the radix/exponent being "too small" (1e-900) giving a value rounded to zero.
		if ( (dv == 0.0d) && (Double.parseDouble(doubleString.substring(0, ePosn-1)) != 0.0d) )
		{
			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, TypeId.DOUBLE_NAME);
		}

		if (Double.isNaN(dv) || Double.isInfinite(dv))
			throw StandardException.newException(SQLState.LANG_OUTSIDE_RANGE_FOR_DATATYPE, TypeId.DOUBLE_NAME);

		return (ValueNode) nodeFactory.getNode(
									C_NodeTypes.DOUBLE_CONSTANT_NODE,
									doubleValue,
									getContextManager());
	}
}

/*
 * <A NAME="dateTimeLiteral">dateTimeLiteral</A>
 */
ValueNode
dateTimeLiteral() throws StandardException :
{
	ValueNode	constantNode;
}
{
// RESOLVE: There is an incompatibility between Derby and DB2 here. The DB2 SQL parser does not recognize
// JDBC date/time escapes. They are handled in a JDBC pre-processor. However embedded Derby does not have
// a separate pre-processor. JDBC date/time escapes are handled by the Derby SQL parser. This will only
// be visible if Derby is accessed through a non-JDBC pathway. (ODBC?) In that case Derby will allow
// the JDBC date/time escape while DB2 will not.
	(
		( <LEFT_BRACE> constantNode = escapedDateTimeLiteral() <RIGHT_BRACE> )
	)
	{
		return constantNode;
	}
}

/*
 * <A NAME="escapedDateTimeLiteral">escapedDateTimeLiteral</A>
 */
ValueNode
escapedDateTimeLiteral() throws StandardException :
{
	ValueNode constantNode;
}
{
	<D> constantNode = bareDateLiteral()
	{
		return constantNode;
	}
|
	<T> constantNode = bareTimeLiteral()
	{
		return constantNode;
	}
|
	<TS> constantNode = bareTimestampLiteral()
	{
		return constantNode;
	}
}

/*
 * <A NAME="bareDateLiteral">bareDateLiteral</A>
 */
ValueNode
bareDateLiteral() throws StandardException :
{
	String dateString;
}
{
	dateString = string()
	{
		return (ValueNode) nodeFactory.getNode(
						C_NodeTypes.USERTYPE_CONSTANT_NODE,
						getLanguageConnectionContext().getDataValueFactory().getDateValue(dateString, true),
						getContextManager());
	}
}

/*
 * <A NAME="bareTimeLiteral">bareTimeLiteral</A>
 */
ValueNode
bareTimeLiteral() throws StandardException :
{
	String timeString;
}
{
	timeString = string()
	{
		return (ValueNode) nodeFactory.getNode(
						C_NodeTypes.USERTYPE_CONSTANT_NODE,
						getLanguageConnectionContext().getDataValueFactory().getTimeValue(timeString, true),
						getContextManager());
	}
}

/*
 * <A NAME="bareTimestampLiteral">bareTimestampLiteral</A>
 */
ValueNode
bareTimestampLiteral() throws StandardException :
{
	String timestampString;
}
{
	timestampString = string()
	{
		return (ValueNode) nodeFactory.getNode(
						C_NodeTypes.USERTYPE_CONSTANT_NODE,
						getLanguageConnectionContext().getDataValueFactory().getTimestampValue(timestampString, true),
						getContextManager());
	}
}

/*
 * <A NAME="string">string</A>
 */
String
string() throws StandardException :
{
	Token	tok;
}
{
	tok = <STRING>
	{
		verifyImageLength(tok.image);
		/* Trim off the leading and trailing ', and compress all '' to ' */
		return StringUtil.compressQuotes(tok.image.substring(1, tok.image.length() - 1),
							  SINGLEQUOTES);
	}
}

/*
 * <A NAME="stringLiteral">stringLiteral</A>
 */
CharConstantNode
stringLiteral() throws StandardException :
{
	Token	tok;
	String	string;
}
{
	tok = <STRING>
	{
		//there is a maximum limit on the length of the string
		if (tok.image.length()-2 > Limits.DB2_MAX_CHARACTER_LITERAL_LENGTH)//-2 is for the beginning and ending quote
			throw StandardException.newException(SQLState.LANG_DB2_STRING_CONSTANT_TOO_LONG, StringUtil.formatForPrint(tok.image));
		string = StringUtil.compressQuotes(tok.image.substring(1, tok.image.length() - 1), SINGLEQUOTES);
		/* Trim quotes from string. */
		return (CharConstantNode) nodeFactory.getNode(
								C_NodeTypes.CHAR_CONSTANT_NODE,
								string,
								getContextManager());
	}
}

/*
 * <A NAME="hexLiteral">hexLiteral</A>
 */
ValueNode
hexLiteral() throws StandardException :
{
	Token	tok;
}
{
	tok = <HEX_STRING>
	{
		String hexLiteral = tok.image;

		//there is a maximum limit on the length of the hex constant
		if (hexLiteral.length()-3 > Limits.DB2_MAX_HEX_LITERAL_LENGTH)//-3 is for X' at the beginning and ' at the end
			throw StandardException.newException(SQLState.LANG_DB2_STRING_CONSTANT_TOO_LONG, StringUtil.formatForPrint(hexLiteral));
		if ((hexLiteral.length()-3)%2 == 1)
			throw StandardException.newException(SQLState.LANG_DB2_INVALID_HEXADECIMAL_CONSTANT, StringUtil.formatForPrint(hexLiteral));

		int bitLength = ((hexLiteral.length() - 3) / 2);
		return (ValueNode)
				nodeFactory.getNode(C_NodeTypes.VARBIT_CONSTANT_NODE,
									hexLiteral.substring(2, hexLiteral.length() - 1), ReuseFactory.getInteger(bitLength),
									getContextManager());
	}
}


TableName
constraintNameDefinition() throws StandardException :
{
	TableName constraintName;
}
{
	/* changed constraintName() to qualifiedName() for compaction */
	<CONSTRAINT> constraintName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return constraintName;
	}
}

/*
 * DB2 requires column check constraints to refer to only that column. Derby
 * doesn't care if check constraints are column level or table level. For DB2 compatibility
 * check that column check constraints only refer to that column.
 */
ConstraintDefinitionNode
checkConstraintDefinition(TableName constraintName, String columnName)
							throws StandardException :
{
	Token		beginToken;
	Token		endToken;
	ValueNode	value;
	ResultColumnList rclList = null;
}
{
	/* valueExpression() was searchCondition() */
	<CHECK>  beginToken =
		<LEFT_PAREN> value = valueExpression() endToken = <RIGHT_PAREN>
	{
		if (columnName != null)
		{
			/* Column check constraint */
			rclList = (ResultColumnList) nodeFactory.getNode(
									C_NodeTypes.RESULT_COLUMN_LIST,
									getContextManager());
			rclList.addElement((ResultColumn) nodeFactory.getNode(
									C_NodeTypes.RESULT_COLUMN,
									columnName,
									null,
									getContextManager()));
		}

		value.setBeginOffset( beginToken.beginOffset );
		value.setEndOffset( endToken.endOffset );
		return (ConstraintDefinitionNode) nodeFactory.getNode(
					C_NodeTypes.CONSTRAINT_DEFINITION_NODE,
					constraintName,
					ReuseFactory.getInteger(DataDictionary.CHECK_CONSTRAINT),
					rclList,
					null,
					value,
					StringUtil.slice(statementSQLText,
						beginToken.beginOffset,
						endToken.endOffset,true),
					getContextManager()
					);
	}
}


/*
 * <A NAME="spsRenameStatement">spsRenameStatement</A>
 */
StatementNode
spsRenameStatement() throws StandardException :
{
	StatementNode qtn;
}
{
	<RENAME> (
		qtn = renameTableStatement() |
		qtn = renameIndexStatement() |
		qtn = renameColumnStatement()
		)
	{
		return qtn;
	}
}

/*
 * <A NAME="renameTableStatement">renameTableStatement</A>
 */
StatementNode
renameTableStatement() throws StandardException :
{
	StatementNode qtn;
	TableName tableName;
	String newTableName;
}
{
	<TABLE> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) <TO> newTableName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		return (StatementNode) nodeFactory.getNode(
								C_NodeTypes.RENAME_NODE,
								tableName,
								null,
								newTableName,
								Boolean.FALSE,
								ReuseFactory.getInteger(StatementType.RENAME_TABLE),
								getContextManager());
	}
}

/*
 * <A NAME="renameIndexStatement">renameIndexStatement</A>
 */
StatementNode
renameIndexStatement() throws StandardException :
{
	String oldIndexName;
	String newIndexName;
}
{
	<INDEX> oldIndexName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) <TO> newIndexName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		StatementNode qtn = (StatementNode) nodeFactory.getNode(
								C_NodeTypes.RENAME_NODE,
								null,
								oldIndexName,
								newIndexName,
								Boolean.FALSE,
ReuseFactory.getInteger(StatementType.RENAME_INDEX),
								getContextManager());

		return qtn;

	}
}
StatementNode
renameColumnStatement() throws StandardException :
{
	String newColumnName;
        ValueNode oldColumnReference;
}
{
	<COLUMN> oldColumnReference = columnReference()
		<TO> newColumnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		if (((ColumnReference)oldColumnReference).getTableNameNode() == null)
			throw StandardException.newException(
				SQLState.LANG_OBJECT_DOES_NOT_EXIST,
				"RENAME COLUMN",
				((ColumnReference)oldColumnReference).getColumnName());
		return (StatementNode) nodeFactory.getNode(
			C_NodeTypes.RENAME_NODE,
			((ColumnReference)oldColumnReference).getTableNameNode(),
			((ColumnReference)oldColumnReference).getColumnName(),
			newColumnName,
			Boolean.FALSE,
			ReuseFactory.getInteger(StatementType.RENAME_COLUMN),
				getContextManager());
	}
}


StatementNode
lockStatement() throws StandardException :
{
	Boolean						exclusiveMode;
	TableName					tableName;
}
{
	<LOCK> <TABLE> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) <IN> exclusiveMode = lockMode() <MODE>
	{
		return (StatementNode) nodeFactory.getNode(
								C_NodeTypes.LOCK_TABLE_NODE,
								tableName,
								exclusiveMode,
								getContextManager());
	}
}

Boolean
lockMode() :
{
}
{
	<EXCLUSIVE>
	{
		return Boolean.TRUE;
	}
|
	<SHARE>
	{
		return Boolean.FALSE;
	}
}

StatementNode
execStatement() throws StandardException :
{
	TableName	stmtName;
}
{
	<EXECUTE> <STATEMENT> stmtName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return (StatementNode) nodeFactory.getNode(
								C_NodeTypes.EXEC_SPS_NODE,
								stmtName,
								getContextManager());
	}
}

TransactionStatementNode
setIsolationStatement() throws StandardException :
{
	TransactionStatementNode tranNode;
}
{
	setIsolationHeader() [ ( <EQUALS_OPERATOR> | <TO> ) ] tranNode = transactionMode()
	{
		return tranNode;
	}
}

void
setIsolationHeader() throws StandardException :
{}
{
	<ISOLATION>
|
        LOOKAHEAD( { getToken(1).kind == CURRENT && getToken(2).kind == ISOLATION } )
	<CURRENT> <ISOLATION>
}


TransactionStatementNode
transactionMode() throws StandardException :
{
	int isolationLevel;
}
{
	isolationLevel = isolationLevelDB2OrReset()
	{
		return (TransactionStatementNode) nodeFactory.getNode(
								C_NodeTypes.SET_TRANSACTION_ISOLATION_NODE,
								ReuseFactory.getInteger(isolationLevel),
								getContextManager());
	}
}

int
isolationLevelDB2OrReset() :
{
	int isolationLevel;
}
{
        (
                <RESET> { return ExecutionContext.UNSPECIFIED_ISOLATION_LEVEL; }
                | isolationLevel = isolationLevelDB2() { return isolationLevel; }
        )
}

int
isolationLevelDB2() :
{
        int isolationLevel;
}
{
	(
                isolationLevel = isolationLevelDB2Abbrev() { return isolationLevel; }
                | ( ( <REPEATABLE> <READ> ) | <SERIALIZABLE> )
                        { return ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL; }
		| <CURSOR> <STABILITY>
                        { return ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL; }

		| <DIRTY> <READ>
                        { return ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL; }

		|
                        LOOKAHEAD( { getToken(1).kind == READ && getToken(2).kind == COMMITTED } )
                        <READ> <COMMITTED>
                        { return ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL; }

		|
                        LOOKAHEAD( { getToken(1).kind == READ && getToken(2).kind == UNCOMMITTED } )
                        <READ> <UNCOMMITTED>
                        { return ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL; }
	)
}

int
isolationLevelDB2Abbrev() :
{
}
{
	(
		<RR>
                        { return ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL; }

		| <RS> { return ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL; }

		| <CS>
                        { return ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL; }

		| <UR>
                        { return ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL; }
	)
}


int
isolationLevel() :
{
	int isolationLevel;
}
{
	<ISOLATION> <LEVEL> isolationLevel = levelOfIsolation()
	{
		return isolationLevel;
	}
}

int
levelOfIsolation() :
{
}
{
	<READ>
	{
		return levelOfIsolationRead();
	}
|
    <REPEATABLE> <READ>
    {
		return ExecutionContext.REPEATABLE_READ_ISOLATION_LEVEL;
    }
|
	<SERIALIZABLE>
	{
		return ExecutionContext.SERIALIZABLE_ISOLATION_LEVEL;
	}
}

int
levelOfIsolationRead() :
{
}
{
	<UNCOMMITTED>
	{
		return ExecutionContext.READ_UNCOMMITTED_ISOLATION_LEVEL;
	}
|
	<COMMITTED>
	{
		return ExecutionContext.READ_COMMITTED_ISOLATION_LEVEL;
	}
}


/*
 * <A NAME="simpleValueSpecification">simpleValueSpecification</A>
 */
ValueNode
simpleValueSpecification() throws StandardException :
{
	ValueNode	value;
}
{
	value = literal()
	{
		return value;
	}
}


/*
 * <A NAME="setRoleStatement">setRoleStatement</A>
 */
StatementNode
setRoleStatement() throws StandardException :
{
	StatementNode role;
}
{
	/*
	 * SET ROLE { <rolename> | NONE | ? }
	 *
	 * Can also be prepared with ? argument, cf. SET SCHEMA.
	 */
	<ROLE> role = setRoleSpecification()
	{
		if (parameterList != null && parameterList.size() > 0)
		{
			setUpAndLinkParameters();
			// set the type of parameter node, it should be a varchar
			// max Limits.MAX_IDENTIFIER_LENGTH - non nullable
			ParameterNode p = (ParameterNode)parameterList.elementAt(0);
			p.setType(new DataTypeDescriptor
					  (TypeId.getBuiltInTypeId(Types.VARCHAR),
					   false,
					   Limits.MAX_IDENTIFIER_LENGTH));
		}
		return role;
	}
}


/*
 * <A NAME="setRoleSpecification">setRoleSpecification</A>
 */
StatementNode
setRoleSpecification() throws StandardException :
{
	String roleName = null;
        checkVersion( DataDictionary.DD_VERSION_DERBY_10_5, "ROLES");
        checkSqlStandardAccess("SET ROLE");
}
{
	<NONE>
	{
		return (StatementNode) nodeFactory.getNode
			(C_NodeTypes.SET_ROLE_NODE,
			 roleName,
			 null,
			 getContextManager());
	}
|
	roleName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		return (StatementNode) nodeFactory.getNode
			(C_NodeTypes.SET_ROLE_NODE,
			 roleName,
			 null,
			 getContextManager());
	}
|
	dynamicParameterSpecification()
	{
		return (StatementNode) nodeFactory.getNode
			(C_NodeTypes.SET_ROLE_NODE,
			 null,
			 ReuseFactory.getInteger(StatementType.SET_ROLE_DYNAMIC),
			 getContextManager());
	}
|
	roleName = string()
	{
		roleName = IdUtil.parseRoleId(roleName);

		return (StatementNode) nodeFactory.getNode(
			C_NodeTypes.SET_ROLE_NODE,
			roleName,
			null,
			getContextManager());
	}
}


StatementNode
setSchemaStatement() throws StandardException :
{
	StatementNode setSchema;
}
{
	setSchemaHeader() [<EQUALS_OPERATOR>] setSchema = setSchemaValues()
	{
		if (parameterList != null && parameterList.size() > 0)
		{
			setUpAndLinkParameters();
			// set the type of parameter node, it should be a varchar max Limits.MAX_IDENTIFIER_LENGTH - non nullable
			ParameterNode p = (ParameterNode)parameterList.elementAt(0);
			p.setType(new DataTypeDescriptor(TypeId.getBuiltInTypeId(Types.VARCHAR), false, Limits.MAX_IDENTIFIER_LENGTH));
		}
		return setSchema;
	}
}

void
setSchemaHeader() throws StandardException :
{}
{
	<SCHEMA>
|
        LOOKAHEAD( { getToken(1).kind == CURRENT && ( getToken(2).kind == SCHEMA ||  getToken(2).kind == SQLID ) } )
	<CURRENT> ( <SCHEMA>  | <SQLID> )
}

StatementNode
setSchemaValues() throws StandardException :
{
	String schemaName;
}
{
	schemaName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		return (StatementNode) nodeFactory.getNode(
								C_NodeTypes.SET_SCHEMA_NODE,
								schemaName,
								null,
								getContextManager());
	}
|
	<USER>
	{
		return (StatementNode) nodeFactory.getNode(
								C_NodeTypes.SET_SCHEMA_NODE,
								null,
								ReuseFactory.getInteger(StatementType.SET_SCHEMA_USER),
								getContextManager());
	}
|   dynamicParameterSpecification()
	{
		return (StatementNode) nodeFactory.getNode(
								C_NodeTypes.SET_SCHEMA_NODE,
								null,
								ReuseFactory.getInteger(StatementType.SET_SCHEMA_DYNAMIC),
								getContextManager());
	}
|	schemaName = string()
	{
		/* Max length for schema name is Limits.MAX_IDENTIFIER_LENGTH */
		IdUtil.checkIdentifierLengthLimit(schemaName, Limits.MAX_IDENTIFIER_LENGTH);
		return (StatementNode) nodeFactory.getNode(
								C_NodeTypes.SET_SCHEMA_NODE,
								schemaName,
								null,
								getContextManager());
	}
}

StatementNode
setSessionPropertyStatement() throws StandardException :
{
    List properties = null;
}
{
    <SESSION_PROPERTY> properties = sessionPropertyList()
    {
        return (StatementNode) nodeFactory.getNode(
                                        C_NodeTypes.SET_SESSION_PROPERTY_NODE,
                                        properties,
                                        getContextManager());
    }
}

List sessionPropertyList() throws StandardException :
{
    ArrayList list = new ArrayList();
}
{
    sessionPropertyPair(list) ( <COMMA> sessionPropertyPair(list) ) *
    {
         return list;
    }
}

void
sessionPropertyPair(List list) throws StandardException :
{
    String propertyName;
    ValueNode propertyValue;
}
{
    propertyName=identifier(Limits.MAX_IDENTIFIER_LENGTH, true) <EQUALS_OPERATOR> (
        propertyValue = literal()
        {

             String val = ((ConstantNode)propertyValue).getValue().getString();

             list.add(new Pair(propertyName, val));
        }
        |
        <NULL>
        {
             list.add(new Pair(propertyName, null));
        }
    )
}

// Set the locale for messages coming from the database system. This
// is for support only, so we can get messages in our preferred language
// (usually English). I didn't want to create all the execution wiring
// to do this, so this command executes in the parser
StatementNode
setMessageLocaleStatement() throws StandardException :
{
	String messageLocale;
}
{
	<MESSAGE_LOCALE> messageLocale = string()
	{
		getContextManager().setMessageLocale(messageLocale);

		return (StatementNode) nodeFactory.getNode(
											C_NodeTypes.NOP_STATEMENT_NODE,
											getContextManager());
	}
}

/*
 * <A NAME="valueSpecification">valueSpecification</A>
 */
ValueNode
valueSpecification() throws StandardException :
{
	ValueNode	   value;
	ValueNode	   leftExpression;
	ValueNode	   rightExpression;
}
{
	value = literal()
	{
		return value;
	}
|
	value = generalValueSpecification()
	{
		return value;
	}
|
	<NULLIF> <LEFT_PAREN> leftExpression = additiveExpression(null, 0) <COMMA> rightExpression = additiveExpression(null, 0) <RIGHT_PAREN>
	{
		// "NULLIF(L, R)" is the same as "L=R ? untyped NULL : L"
		// An impl assumption here is that Derby can promote CHAR to any comparable datatypes such as numeric
		ContextManager cm = getContextManager();
		ValueNodeList thenElseList = (ValueNodeList) nodeFactory.getNode(C_NodeTypes.VALUE_NODE_LIST, cm);

		//Use untyped null for then clause at this point. At the bind time, we will cast it to the datatype of L
		thenElseList.addElement((ValueNode) nodeFactory.getNode(
									C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE,
									cm));
		thenElseList.addElement(leftExpression);

		return (ValueNode) nodeFactory.getNode(
											C_NodeTypes.CONDITIONAL_NODE,
											(ValueNode) nodeFactory.getNode(
														C_NodeTypes.BINARY_EQUALS_OPERATOR_NODE,
														leftExpression,
														rightExpression,
														cm),
											thenElseList,
											Boolean.TRUE,//this node is for nullif
											cm);
	}
|
	// CASE WHEN P1 THEN [T1 | NULL] (WHEN Pi THEN [Ti | NULL])* [ELSE E | NULL] END
	<CASE> value = whenThenExpression()
	{
		return value;
	}
|
    // create table foo (col1 int array);
    // Handles arrays like values ( [0,0,0] ), ([0]), ([0,1])
    // insert into foo values ([0,0,0]);
    // select col1[0]
	<LEFT_BRACKET> value = arrayExpression()
	{
	    return value;
	}

}


/*
 * <A NAME="arrayExpression">arrayExpression</A>
 */
ValueNode
arrayExpression() throws StandardException :
{
	ValueNodeList list = (ValueNodeList) nodeFactory.getNode(
    	C_NodeTypes.VALUE_NODE_LIST,
    	getContextManager());
}
{
    arrayElement( list) ( <COMMA> arrayElement( list) ) *
	<RIGHT_BRACKET>
	{
		ContextManager cm = getContextManager();
		return((ValueNode) nodeFactory.getNode(C_NodeTypes.ARRAY_CONSTANT_NODE,
												list,
												cm));
	}
}


/*
 * <A NAME="arrayElement">arrayElement</A>
 */
void
arrayElement(ValueNodeList list) throws StandardException :
{
	ValueNode	   expr;
}
{
    expr = additiveExpression(null,0)
	{
	    list.addElement(expr);
	}
}




/*
 * <A NAME="caseExpression">caseExpression</A>
 */
ValueNode
caseExpression() throws StandardException :
{
	ValueNode	   expr;
}
{
	<END>
	{
		ValueNode value = (ValueNode) nodeFactory.getNode(
										C_NodeTypes.CAST_NODE,
										(ValueNode) nodeFactory.getNode(C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE,
																		getContextManager()),
										DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.CHAR, 1),
										getContextManager());
		((CastNode) value).setForExternallyGeneratedCASTnode();
		return value;
	}
|
	<ELSE> expr = thenElseExpression() <END>
	{
		return expr;
	}
|
	expr = whenThenExpression()
	{
		return expr;
	}
}

/*
 * <A NAME="whenThenExpression">whenThenExpression</A>
 */
ValueNode
whenThenExpression() throws StandardException :
{
	ValueNode	   expr;
	ValueNode	   thenExpr;
	ValueNode	   elseExpr;
}
{
	<WHEN> expr = orExpression(null)
		   (<OR> expr = orExpression(expr) )*
	<THEN> thenExpr = thenElseExpression()
	elseExpr = caseExpression()
	{
		ContextManager cm = getContextManager();
		ValueNodeList thenElseList = (ValueNodeList) nodeFactory.getNode(C_NodeTypes.VALUE_NODE_LIST, cm);
		thenElseList.addElement(thenExpr); // then
		thenElseList.addElement(elseExpr); // else

		return((ValueNode) nodeFactory.getNode(C_NodeTypes.CONDITIONAL_NODE,
												expr,
												thenElseList,
												Boolean.FALSE,
												cm));
	}
}

/*
 * <A NAME="thenElseExpression">thenElseExpression</A>
 */
ValueNode
thenElseExpression() throws StandardException :
{
	ValueNode	   expr;
}
{
	LOOKAHEAD ( {getToken(1).kind == NULL} )
	<NULL>
	{
		ValueNode value = (ValueNode) nodeFactory.getNode(
										C_NodeTypes.CAST_NODE,
										(ValueNode) nodeFactory.getNode(C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE,
																		getContextManager()),
										DataTypeDescriptor.getBuiltInDataTypeDescriptor(Types.CHAR, 1),
										getContextManager());
		((CastNode) value).setForExternallyGeneratedCASTnode();
		return value;
	}
|
	expr = additiveExpression(null, 0)
	{
		return expr;
	}
}

TableElementNode
tableConstraintDefinition() throws StandardException :
{
	Properties properties = null;
	ConstraintDefinitionNode tcdn;
	TableName		constraintName = null;
	//initialize following two booleans before handling table level constraints
	explicitNotNull = false;
	explicitNull = false;
}
{
	[ constraintName = constraintNameDefinition() ]
		tcdn = tableConstraint(constraintName)
		[ properties = propertyList(false) <CHECK_PROPERTIES>]
	{
		if (properties != null)
		{
			tcdn.setProperties(properties);
		}
		return tcdn;
	}
}

ConstraintDefinitionNode
tableConstraint(TableName constraintName) throws StandardException :
{
	ConstraintDefinitionNode tcdn;
}
{
	tcdn = uniqueConstraintDefinition(constraintName)
	{
		return tcdn;
	}
|
	tcdn = referentialConstraintDefinition(constraintName)
	{
		return tcdn;
	}
|
	tcdn = checkConstraintDefinition(constraintName, null)
	{
		return tcdn;
	}
}

ConstraintDefinitionNode
uniqueConstraintDefinition(TableName constraintName) throws StandardException :
{
	int constraintType;
	ResultColumnList uniqueColumnList;
}
{
	//for table level constraint, parameter will be null
	constraintType = uniqueSpecification(null)
		<LEFT_PAREN> uniqueColumnList = uniqueColumnList() <RIGHT_PAREN>
	{
		//go through the unique columns list and if any of the columns in the
		//list is explicitly defined null, throw an exception for this. Columns
		//for which no nullability is defined are by default nullable. But in
		//case of create table, there nullability changes automatically to
		//non-nullable if primary key is defined on it. But if user explicitly
		//defines the nullability, then defining a primary key on it in create
		//table will result in an exception.
		if (constraintType ==  DataDictionary.PRIMARYKEY_CONSTRAINT)
		{
			for (int index = 0; index < uniqueColumnList.size(); index++)
			{
				String primaryKeyColumnName = ((ResultColumn) uniqueColumnList.elementAt(index)).getName();
				if (explicitlyNullableColumnsList.contains(primaryKeyColumnName))
				{
					String errorState =
						(checkVersion (DataDictionary.DD_VERSION_DERBY_10_4, null))
							? SQLState.LANG_ADD_PRIMARY_KEY_ON_NULL_COLS
							: SQLState.LANG_DB2_ADD_UNIQUE_OR_PRIMARY_KEY_ON_NULL_COLS;
					throw StandardException.newException(errorState, primaryKeyColumnName);
				}
			}
		}
		return (ConstraintDefinitionNode) nodeFactory.getNode(
						C_NodeTypes.CONSTRAINT_DEFINITION_NODE,
						constraintName,
						ReuseFactory.getInteger(constraintType),
						uniqueColumnList,
						null,
						null,
						null,
						getContextManager()
						);
	}
}

//the second parameter to the following method will always be null for a table level
//constraint but not for a column level constraint
int
uniqueSpecification(String columnName) throws StandardException :
{
}
{
	<UNIQUE>
	{
		return DataDictionary.UNIQUE_CONSTRAINT;
	}
|
	<PRIMARY> <KEY>
	{
		//explicitNull can be true only if it's column level constraint and
		//that column has null constraint defined on it. In that case, defining
		//a column-level constraint of primary key on it will result in an error.
		if (explicitNull)
		{
			String errorState =
				(checkVersion (DataDictionary.DD_VERSION_DERBY_10_4, null))
					? SQLState.LANG_ADD_PRIMARY_KEY_ON_NULL_COLS
					: SQLState.LANG_DB2_ADD_UNIQUE_OR_PRIMARY_KEY_ON_NULL_COLS;

			throw StandardException.newException(errorState, columnName);
		}
		return DataDictionary.PRIMARYKEY_CONSTRAINT;
	}
}

ResultColumnList
uniqueColumnList() throws StandardException :
{
	ResultColumnList	resultColumns = (ResultColumnList) nodeFactory.getNode(
											C_NodeTypes.RESULT_COLUMN_LIST,
											getContextManager());
}
{
	columnNameList(resultColumns)
	{
		return resultColumns;
	}
}

ConstraintDefinitionNode
referentialConstraintDefinition(TableName constraintName) throws StandardException :
{
	ResultColumnList fkRcl = (ResultColumnList) nodeFactory.getNode(
										C_NodeTypes.RESULT_COLUMN_LIST,
										getContextManager());
	ResultColumnList refRcl = (ResultColumnList) nodeFactory.getNode(
										C_NodeTypes.RESULT_COLUMN_LIST,
										getContextManager());
	TableName referencedTable;
	int[] refActions = {StatementType.RA_NOACTION,
			    StatementType.RA_NOACTION}; //default values
}
{
	<FOREIGN> <KEY> <LEFT_PAREN> columnNameList(fkRcl) <RIGHT_PAREN>
		referencedTable = referencesSpecification(refRcl, refActions)
	{
		return (ConstraintDefinitionNode) nodeFactory.getNode(
						C_NodeTypes.FK_CONSTRAINT_DEFINITION_NODE,
						constraintName,
						referencedTable,
						fkRcl,
						refRcl,
						refActions,
						getContextManager());
	}
}

TableName
referencesSpecification(ResultColumnList rcl, int[] refActions) throws StandardException :
{
	TableName tableName = null;
}
{
	<REFERENCES> tableName = referencedTableAndColumns(rcl)
		// not supporting MATCH or referential actions beyond syntax for default
		[ <ON> referentialTriggeredAction(refActions) ]
	{
		return tableName;
	}
}

TableName
referencedTableAndColumns(ResultColumnList rcl) throws StandardException :
{
	TableName	tableName = null;
}
{
	tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) [ <LEFT_PAREN> columnNameList(rcl) <RIGHT_PAREN> ]
	{
		return tableName;
	}
}

void
referentialTriggeredAction(int [] refActions) throws StandardException :
{}
{
	( refActions[1] = updateRule() [<ON> refActions[0] = deleteRule() ] |
	refActions[0] = deleteRule() [<ON> refActions[1] = updateRule() ] )
}

int
updateRule() :
{
	int action;
}
{
	<UPDATE> action = updateReferentialAction()
	{
		return action;
	}
}

int
deleteRule()  :
{
	int action;
}
{
	<DELETE> action = deleteReferentialAction()
	{
		return action;
	}

}

int
updateReferentialAction() :
{}
{

	  <RESTRICT> {return StatementType.RA_RESTRICT;}
	| <NO> <ACTION> {return StatementType.RA_NOACTION;}

}

int
deleteReferentialAction() :
{}
{
	<CASCADE> {return StatementType.RA_CASCADE;}
	| <RESTRICT> {return StatementType.RA_RESTRICT;}
	| <NO> <ACTION> {return StatementType.RA_NOACTION;}
	| <SET>
	   (  <NULL> {return StatementType.RA_SETNULL;}
              |<_DEFAULT>  {return StatementType.RA_SETDEFAULT;}
	   )
}

/*
 * <A NAME="columnConstraintDefinition">columnConstraintDefinition</A>
 */
void
columnConstraintDefinition(DataTypeDescriptor[] dataTypeDescriptor,
						   TableElementList tableElementList,
						   String columnName) throws StandardException :
{
	int constraintType;
	TableElementNode tcdn;
	TableName constraintName = null;
}
{
	[ constraintName = constraintNameDefinition() ]
		tcdn = columnConstraint(constraintName, dataTypeDescriptor, columnName)
	{
		/* NOT NULL constraints are handled by marking the dataTypeDescriptor
		 * as being non-nullable.
		 */
		if (tcdn == null)
		{
			return;
		}

		/* All other constraints, whether column or table will be added as
		 * table constraints.  We do this to facilitate the handling of
		 * multiple column constraints on the same column.
		 */
		tableElementList.addTableElement(tcdn);
	}
}

/*
 * <A NAME="columnConstraint">columnConstraint</A>
 */
ConstraintDefinitionNode
columnConstraint(TableName constraintName,
				 DataTypeDescriptor[] dataTypeDescriptor,
				 String columnName) throws StandardException :
{
	int constraintType;
	Properties properties = null;
	ConstraintDefinitionNode tcdn;
	ResultColumnList refRcl = (ResultColumnList) nodeFactory.getNode(
										C_NodeTypes.RESULT_COLUMN_LIST,
										getContextManager());
	TableName referencedTable;
	int[] refActions = {StatementType.RA_NOACTION,
                            StatementType.RA_NOACTION} ; //default: NO ACTION
}
{
	<NOT> <NULL>
	{
		//if column is explicitly defined not nullable, set following flag
		explicitNotNull = true;
		//if both null and not null constraints are defined for a column,
		//throw an exception
		if (explicitNull)
                   throw StandardException.newException(SQLState.LANG_ADDING_COLUMN_WITH_NULL_AND_NOT_NULL_CONSTRAINT, columnName);

		// columns with generation clauses can omit the datatype
		if ( dataTypeDescriptor[0] == null ) { throw StandardException.newException(SQLState.LANG_NOT_NULL_NEEDS_DATATYPE); }

		dataTypeDescriptor[0] = dataTypeDescriptor[0].getNullabilityType(false);
		return null;
	}
|
	//pass the columnname as the second parameter. It will be used to throw an
	//exception if null constraint is defined for this column-level primary
	//key constraint
	constraintType = uniqueSpecification(columnName)
		[ properties = propertyList(false) <CHECK_PROPERTIES>]
	{
		ResultColumnList uniqueColumnList =
										(ResultColumnList) nodeFactory.getNode(
												C_NodeTypes.RESULT_COLUMN_LIST,
												getContextManager());
		uniqueColumnList.addElement(
			(ResultColumn) nodeFactory.getNode(
							C_NodeTypes.RESULT_COLUMN,
							columnName,
							null,
							getContextManager()));

		return (ConstraintDefinitionNode) nodeFactory.getNode(
						C_NodeTypes.CONSTRAINT_DEFINITION_NODE,
						constraintName,
						ReuseFactory.getInteger(constraintType),
						uniqueColumnList,
						properties,
						null,
						null,
						getContextManager()
						);
	}
|
	referencedTable = referencesSpecification(refRcl, refActions)
		[ properties = propertyList(false)<CHECK_PROPERTIES>]
	{
		ResultColumnList fkRcl = (ResultColumnList) nodeFactory.getNode(
											C_NodeTypes.RESULT_COLUMN_LIST,
											getContextManager());
		fkRcl.addElement(
					(ResultColumn) nodeFactory.getNode(
									C_NodeTypes.RESULT_COLUMN,
									columnName,
									null,
									getContextManager())
				);
		tcdn = (ConstraintDefinitionNode) nodeFactory.getNode(
						C_NodeTypes.FK_CONSTRAINT_DEFINITION_NODE,
						constraintName,
						referencedTable,
						fkRcl,
						refRcl,
						refActions,
						getContextManager());
		if (properties != null)
		{
			tcdn.setProperties(properties);
		}
		return tcdn;
	}
|
	tcdn = checkConstraintDefinition(constraintName, columnName)
	{
		return tcdn;
	}
}


/*
 * <A NAME="dropRoleStatement">dropRoleStatement</A>
 */
StatementNode
dropRoleStatement() throws StandardException :
{
	String roleName;
}
{
	/*
	 * DROP ROLE <rolename>
	 */
	<ROLE> roleName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		checkVersion( DataDictionary.DD_VERSION_DERBY_10_5, "ROLES");
		checkSqlStandardAccess("DROP ROLE");

		return (StatementNode) nodeFactory.getNode(
			C_NodeTypes.DROP_ROLE_NODE,
			roleName,
			getContextManager());
	}
}


StatementNode
dropSchemaStatement() throws StandardException :
{
	String schemaName;
}
{
	<SCHEMA> schemaName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) <RESTRICT>
	{
		StatementNode stmt =  (StatementNode) nodeFactory.getNode(
							C_NodeTypes.DROP_SCHEMA_NODE,
							schemaName,
							new Integer(StatementType.DROP_RESTRICT),
							getContextManager());

		return stmt;
	}
}

StatementNode
alterTableStatement() throws StandardException :
{
	StatementNode		node;
	TableName			tableName;
}
{
	<TABLE> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) node = alterTableBody(tableName)
	{
		return node;
	}
}

StatementNode
alterTableBody(TableName tableName) throws StandardException :
{
	StatementNode sn;
	char				lockGranularity = '\0';
	String               newTableName;
	TableElementList	tableElementList =
									(TableElementList) nodeFactory.getNode(
												C_NodeTypes.TABLE_ELEMENT_LIST,
												getContextManager());
	int[]				changeType = new int[1];
	int[]				behavior = new int[1];
        String indexName = null;
}
{
//insert special key before compress so that only internal SP can know
	<COMPRESS>
	(
		sn = inplaceCompress(tableName)
		|
		sn = sequentialCompress(tableName)
	)
	{
		return sn;
	}
|
//This means update or drop the statistics of all the indexes on the table
	<ALL>
	(
		sn = dropStatistics(tableName)
		|
		sn = updateStatistics(tableName)
	)
	{
		return sn;
	}
|
//This means update the statistics of the index name supplied for the table
	<UPDATE> <STATISTICS>
        (
		indexName =  identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
        )
	{
		checkVersion( DataDictionary.DD_VERSION_DERBY_10_5, "SYSCS_UPDATE_STATISTICS");
		//This will make sure that this ALTER TABLE...syntax can't be called directly.
		//This sql can only be generated internally (right now it is done for
		//syscs_util.SYSCS_UPDATE_STATISTICS procedure
		checkInternalFeature("UPDATE STATISTICS");
		changeType[0] = DDLStatementNode.UPDATE_STATISTICS;
		return (StatementNode) nodeFactory.getNode(
							C_NodeTypes.ALTER_TABLE_NODE,
							tableName,
							changeType,
							Boolean.FALSE,
							indexName,
							null,
							getContextManager());
	}
|
	<STATISTICS> <DROP>
        (
		indexName =  identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
        )
	{
		checkVersion( DataDictionary.DD_VERSION_DERBY_10_9, "SYSCS_UPDATE_STATISTICS");
		//This will make sure that this ALTER TABLE...syntax can't be called directly.
		//This sql can only be generated internally (right now it is done for
		//syscs_util.SYSCS_UPDATE_STATISTICS procedure
		checkInternalFeature("DROP STATISTICS");
		changeType[0] = DDLStatementNode.DROP_STATISTICS;
		return (StatementNode) nodeFactory.getNode(
							C_NodeTypes.ALTER_TABLE_NODE,
							tableName,
							changeType,
							Boolean.FALSE,
							indexName,
							null,
							getContextManager());
	}
|
	<DROP>
        (
		sn = dropColumnDefinition(tableName, tableElementList, changeType, behavior)
		|
		sn = dropTableConstraintDefinitionCore(tableName, tableElementList, changeType, behavior)
        )
	    {
		     return sn;
        }
|
	lockGranularity = alterTableAction( tableElementList, changeType, behavior )
	{
		return (StatementNode) nodeFactory.getNode(
							C_NodeTypes.ALTER_TABLE_NODE,
							tableName,
							changeType,
							tableElementList,
							new Character(lockGranularity),
							behavior,
							getContextManager());
	}
}

/*
 * Called for ALTER TABLE ALL DROP STATISTICS. This is an internal
 *  syntax and can't be invoked by a user directly. DERBY-4115. This
 *  will drop all the statistics for the given table name
 *
 * By the time we get here, we've parsed
 *    ALTER TABLE tablename ALL
 * and here we parse DROP STATISTICS clause
 */
StatementNode
dropStatistics(TableName tableName) throws StandardException :
{
}
{
	<DROP> <STATISTICS>
	{
		checkVersion( DataDictionary.DD_VERSION_DERBY_10_9, "SYSCS_DROP_STATISTICS");
		//This will make sure that this ALTER TABLE...syntax can't be called directly.
		//This sql can only be generated internally (right now it is done for
		//syscs_util.SYSCS_DROP_STATISTICS procedure
		checkInternalFeature("DROP STATISTICS");
		int[] changeType = new int[1];
		changeType[0] = DDLStatementNode.DROP_STATISTICS;
		return (StatementNode) nodeFactory.getNode(
							C_NodeTypes.ALTER_TABLE_NODE,
							tableName,
							changeType,
							Boolean.TRUE,
							null,
							null,
							getContextManager());
	}
}

/*
 * Called for ALTER TABLE ALL UPDATE STATISTICS. This is an internal
 *  syntax and can't be invoked by a user directly. DERBY-269. This
 *  will update all the statistics for the given table name
 *
 * By the time we get here, we've parsed
 *    ALTER TABLE tablename ALL
 * and here we parse UPDATE STATISTICS clause
 */
StatementNode
updateStatistics(TableName tableName) throws StandardException :
{
}
{
	<UPDATE> <STATISTICS>
	{
		checkVersion( DataDictionary.DD_VERSION_DERBY_10_5, "SYSCS_UPDATE_STATISTICS");
		//This will make sure that this ALTER TABLE...syntax can't be called directly.
		//This sql can only be generated internally (right now it is done for
		//syscs_util.SYSCS_UPDATE_STATISTICS procedure
		checkInternalFeature("UPDATE STATISTICS");
		int[] changeType = new int[1];
		changeType[0] = DDLStatementNode.UPDATE_STATISTICS;
		return (StatementNode) nodeFactory.getNode(
							C_NodeTypes.ALTER_TABLE_NODE,
							tableName,
							changeType,
							Boolean.TRUE,
							null,
							null,
							getContextManager());
	}
}

StatementNode
inplaceCompress(TableName tableName) throws StandardException :
{
        Token purge = null;
        Token defragment = null;
        Token truncate = null;
}
{
	<INPLACE>
        (
		[ purge = <PURGE> ]
		[ defragment = <DEFRAGMENT> ]
		[ truncate = <TRUNCATE_END> ]
        )
	{
		checkInternalFeature("COMPRESS");
		return (StatementNode) nodeFactory.getNode(
							C_NodeTypes.ALTER_TABLE_NODE,
							tableName,
							new Boolean(purge != null),
							new Boolean(defragment != null),
							new Boolean(truncate != null),
							getContextManager());
	}
}



StatementNode
sequentialCompress(TableName tableName) throws StandardException :
{
	Token				tok = null;
}
{
	[ tok = <SEQUENTIAL> ]
	{
		checkInternalFeature("COMPRESS");
		return (StatementNode) nodeFactory.getNode(
							C_NodeTypes.ALTER_TABLE_NODE,
							tableName,
							new Boolean(tok != null),
							getContextManager());
	}
}


/*
 * <A NAME="alterTableRenameTableStatement">alterTableRenameTableStatement</A>
 */
/*
StatementNode
alterTableRenameTableStatement(TableName tableName) throws StandardException :
{
	String newTableName;
}
{
	<TO> newTableName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		return (StatementNode) nodeFactory.getNode(
							C_NodeTypes.RENAME_NODE,
							tableName,
							null,
							newTableName,
							Boolean.TRUE,
ReuseFactory.getInteger(StatementType.RENAME_TABLE),
							getContextManager());
	}
}
*/

/*
 * <A NAME="alterTableRenameColumnStatement">alterTableRenameColumnStatement</A>
 */
/*
StatementNode
alterTableRenameColumnStatement(TableName tableName) throws StandardException :
{
	String oldColumnName;
	String newColumnName;
}
{
	oldColumnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true) <TO> newColumnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		return (StatementNode) nodeFactory.getNode(
							C_NodeTypes.RENAME_NODE,
							tableName,
							oldColumnName,
							newColumnName,
							Boolean.TRUE,
ReuseFactory.getInteger(StatementType.RENAME_COLUMN),
							getContextManager());
	}
}
*/
char
alterTableAction(TableElementList tableElementList, int[] changeType, int[] behavior) throws StandardException :
{
	char				lockGranularity = '\0';
	TableElementNode	tableElement;
	DataTypeDescriptor	typeDescriptor;
	Token				tok = null;
	String				columnName;
	long[]				autoIncrementInfo = new long[4];
}
{
	<ADD>
	(
		tableElement = addColumnDefinition(tableElementList)
		|
		tableElement = tableConstraintDefinition()
	)
	{
		if (tableElement instanceof ColumnDefinitionNode)
		{
			//bug 5724 - auto increment columns not allowed in ALTER TABLE statement
			ColumnDefinitionNode cdn = (ColumnDefinitionNode) tableElement;
			if ( cdn.isAutoincrementColumn())
				throw StandardException.newException(SQLState.LANG_ALTER_TABLE_AUTOINCREMENT_COLUMN_NOT_ALLOWED);
		}
		changeType[0] = DDLStatementNode.ADD_TYPE;
		tableElementList.addTableElement(tableElement);
		return lockGranularity;
	}
|
	<ALTER> [ <COLUMN> ] columnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
		tableElement = columnAlterClause(columnName)
	{
		changeType[0] = DDLStatementNode.MODIFY_TYPE;
		tableElementList.addTableElement(tableElement);
		return lockGranularity;
	}
|
	lockGranularity = DB2lockGranularityClause()
	{
		changeType[0] = DDLStatementNode.LOCKING_TYPE;
		return lockGranularity;
	}
}

/*
 * Handle
 *
 *    ALTER TABLE tablename DROP [ COLUMN ] columnname [ CASCADE | RESTRICT ]
 */
StatementNode
dropColumnDefinition(TableName tableName, TableElementList tableElementList, int[] changeType, int[] behavior) throws StandardException :
{
	String columnName;
	TableElementNode tableElement;
}
{
	[ <COLUMN> ] columnName = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
				 dropColumnReferentialAction(behavior)
	{
		tableElement = (TableElementNode) nodeFactory.getNode(
						C_NodeTypes.DROP_COLUMN_NODE,
						columnName, null,
						null, null,
						getContextManager());
		changeType[0] = DDLStatementNode.DROP_TYPE;
		tableElementList.addTableElement(tableElement);
		return (StatementNode) nodeFactory.getNode(
							C_NodeTypes.ALTER_TABLE_NODE,
							tableName,
							changeType,
							tableElementList,
							new Character('\0'),
							behavior,
							getContextManager());
	}
}

void
dropColumnReferentialAction(int []behavior) :
{
	int refBehavior = StatementType.DROP_CASCADE;
}
{
	[ <CASCADE> {refBehavior = StatementType.DROP_CASCADE;}
	  | <RESTRICT> {refBehavior = StatementType.DROP_RESTRICT;}
    ]
	{
		behavior[0] = refBehavior;
	}
}

TableElementNode
addColumnDefinition(TableElementList tableElementList) throws StandardException :
{
	TableElementNode	tableElement;
}
{
	[ <COLUMN> ] tableElement = columnDefinition(tableElementList)
	{
		return tableElement;
	}
}

/*
 * Various variants of the ALTER TABLE ALTER COLUMN statement.
 *
 * By the time we get here, we've parsed
 *    ALTER TABLE tablename ALTER [COLUMN] columnname
 * and here we parse the remainder of the ALTER COLUMN clause, one of:
 *		SET DATA TYPE data_type
 *		SET INCREMENT BY increment_value
 *		RESTART WITH increment_restart_value
 *		[SET | WITH] DEFAULT default_value
 *      DROP DEFAULT
 *      [NOT] NULL
 */
TableElementNode
columnAlterClause(String columnName) throws StandardException :
{
	ValueNode	defaultNode;
	long[]				autoIncrementInfo = new long[4];
	long				autoIncrementIncrement = 1;
	long				autoIncrementRestartWith = 1;
	DataTypeDescriptor	typeDescriptor = null;
}
{
	LOOKAHEAD( {getToken(2).kind == DATA} )
	<SET> <DATA> <TYPE> typeDescriptor = dataTypeDDL()
	{
		return (TableElementNode) nodeFactory.getNode(
						C_NodeTypes.MODIFY_COLUMN_TYPE_NODE,
						columnName, null,
						typeDescriptor, null,
						getContextManager());
	}
|
	LOOKAHEAD( {getToken(2).kind == INCREMENT} )
	<SET> <INCREMENT> <BY> autoIncrementIncrement = exactNumber()
	{
		autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_INC_INDEX] = autoIncrementIncrement;
		autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY] = ColumnDefinitionNode.MODIFY_AUTOINCREMENT_INC_VALUE;
		return (TableElementNode) nodeFactory.getNode(
						C_NodeTypes.MODIFY_COLUMN_DEFAULT_NODE,
						columnName,
						null, null, autoIncrementInfo,
						getContextManager());
	}
|
	<RESTART> <WITH> autoIncrementRestartWith = exactNumber()
	{
		autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_START_INDEX] = autoIncrementRestartWith;
		autoIncrementInfo[QueryTreeNode.AUTOINCREMENT_CREATE_MODIFY] = ColumnDefinitionNode.MODIFY_AUTOINCREMENT_RESTART_VALUE;
		return (TableElementNode) nodeFactory.getNode(
						C_NodeTypes.MODIFY_COLUMN_DEFAULT_NODE,
						columnName,
						null, null, autoIncrementInfo,
						getContextManager());
	}
|
	LOOKAHEAD( {getToken(1).kind == WITH || getToken(1).kind == _DEFAULT ||
                    (getToken(1).kind == SET && getToken(2).kind == _DEFAULT) })
	[<SET>] defaultNode = defaultClause(autoIncrementInfo, columnName)
	{
		return wrapAlterColumnDefaultValue(defaultNode,
										   columnName,
										   autoIncrementInfo);
	}
|
	<DROP> <_DEFAULT>
    {

		defaultNode = (ValueNode) nodeFactory.getNode(
			C_NodeTypes.UNTYPED_NULL_CONSTANT_NODE, getContextManager());

		return wrapAlterColumnDefaultValue(defaultNode,
										   columnName,
										   autoIncrementInfo);
	}
|
	LOOKAHEAD ({getToken(1).kind == NULL })
	<NULL>
	{
		// for a MODIFY column NULL clause form a modify_column node
		// with all null values. In a column definition a [NOT] NULL
		// column constraint is specified by setting the right value
		// in the nullability field of the data type but we don't have
		// a datatype here.
		return (TableElementNode) nodeFactory.getNode(
								C_NodeTypes.MODIFY_COLUMN_CONSTRAINT_NODE,
								columnName, null, null, null,
								getContextManager());
	}
|
	LOOKAHEAD({getToken(1).kind == NOT})
	<NOT> <NULL>
	{
		// for a MODIFY column NOT NULL clause form a modify_column node
		// with all null values. In a column definition a [NOT] NULL
		// column constraint is specified by setting the right value
		// in the nullability field of the data type but we don't have
		// a datatype here.
		return (TableElementNode) nodeFactory.getNode(
								C_NodeTypes.MODIFY_COLUMN_CONSTRAINT_NOT_NULL_NODE,
								columnName, null, null, null,
								getContextManager());
	}
}

StatementNode
dropTableConstraintDefinitionCore(TableName tableName, TableElementList tableElementList, int[] changeType, int[] behavior) throws StandardException :
{
	TableElementNode tableElement;
}
{
		tableElement = dropTableConstraintDefinition()
		{
		changeType[0] = DDLStatementNode.DROP_TYPE;
		tableElementList.addTableElement(tableElement);
		return (StatementNode) nodeFactory.getNode(
							C_NodeTypes.ALTER_TABLE_NODE,
							tableName,
							changeType,
							tableElementList,
							new Character('\0'),
							behavior,
							getContextManager());
		}
}

TableElementNode
dropTableConstraintDefinition() throws StandardException :
{
	TableName		 constraintName;
}
{
	LOOKAHEAD( {getToken(1).kind == CONSTRAINT} )
	/* changed constraintName() to qualifiedName() for compaction */
	<CONSTRAINT> constraintName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return (TableElementNode) nodeFactory.getNode(
						C_NodeTypes.CONSTRAINT_DEFINITION_NODE,
						constraintName,
						ReuseFactory.getInteger(DataDictionary.DROP_CONSTRAINT),
						null,
						null,
						null,
						null,
						ReuseFactory.getInteger(StatementType.DROP_DEFAULT),
						getContextManager()
						);
	}
|
	LOOKAHEAD( {getToken(1).kind == PRIMARY} )
	<PRIMARY> <KEY>
	{
		return (TableElementNode) nodeFactory.getNode(
						C_NodeTypes.CONSTRAINT_DEFINITION_NODE,
						null,
						ReuseFactory.getInteger(DataDictionary.DROP_CONSTRAINT),
						null,
						null,
						null,
						null,
						ReuseFactory.getInteger(StatementType.DROP_DEFAULT),
						getContextManager()
						);
	}
|
	LOOKAHEAD( {getToken(1).kind == FOREIGN} )
        <FOREIGN> <KEY> constraintName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return (TableElementNode) nodeFactory.getNode(
						C_NodeTypes.CONSTRAINT_DEFINITION_NODE,
						constraintName,
						ReuseFactory.getInteger(DataDictionary.DROP_CONSTRAINT),
						null,
						null,
						null,
						null,
						ReuseFactory.getInteger(StatementType.DROP_DEFAULT),
						ReuseFactory.getInteger(DataDictionary.FOREIGNKEY_CONSTRAINT),
						getContextManager()
						);
	}
|
	LOOKAHEAD( {getToken(1).kind == UNIQUE} )
        <UNIQUE> constraintName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return (TableElementNode) nodeFactory.getNode(
						C_NodeTypes.CONSTRAINT_DEFINITION_NODE,
						constraintName,
						ReuseFactory.getInteger(DataDictionary.DROP_CONSTRAINT),
						null,
						null,
						null,
						null,
						ReuseFactory.getInteger(StatementType.DROP_DEFAULT),
						ReuseFactory.getInteger(DataDictionary.UNIQUE_CONSTRAINT),
						getContextManager()
						);
	}
|
        <CHECK> constraintName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return (TableElementNode) nodeFactory.getNode(
						C_NodeTypes.CONSTRAINT_DEFINITION_NODE,
						constraintName,
						ReuseFactory.getInteger(DataDictionary.DROP_CONSTRAINT),
						null,
						null,
						null,
						null,
						ReuseFactory.getInteger(StatementType.DROP_DEFAULT),
						ReuseFactory.getInteger(DataDictionary.CHECK_CONSTRAINT),
						getContextManager()
						);
	}
}

/*
 * <A NAME="dropTableStatement">dropTableStatement</A>
 */
StatementNode
dropTableStatement() throws StandardException :
{
	Token ifTok = null;
	Token existsTok = null;
	Token ifTok2 = null;
	Token existsTok2 = null;
	TableName tableName;
}
{
	<TABLE> [ ifTok = <IF> existsTok = <EXISTS> ] tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) [ ifTok2 = <IF> existsTok2 = <EXISTS> ]
	{
        // must have both "if" and "exists"
        boolean ifExists = ifTok != null && existsTok != null;
        boolean ifExists2 = ifTok2 != null && existsTok2 != null;
		// DB2 does not support a drop behaviour
		StatementNode deleteNode = (StatementNode) nodeFactory.getNode(
											C_NodeTypes.DROP_TABLE_NODE,
											tableName,
											((ifExists || ifExists2) ?
											  new Integer(StatementType.DROP_IF_EXISTS) :
											  new Integer(StatementType.DROP_DEFAULT)),
											getContextManager());
        return deleteNode;
	}
}

/*
 * <A NAME="dropPinStatement">dropPinStatement</A>
 */
StatementNode
dropPinStatement() throws StandardException :
{
	Token ifTok = null;
	Token existsTok = null;
	TableName tableName;
}
{
	<UNPIN> <TABLE> [ ifTok = <IF> existsTok = <EXISTS> ] tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
        // must have both "if" and "exists"
        boolean ifExists = ifTok != null && existsTok != null;
		// DB2 does not support a drop behaviour
		StatementNode deleteNode = (StatementNode) nodeFactory.getNode(
											C_NodeTypes.DROP_PIN_NODE,
											tableName,
											(ifExists ?
											  new Integer(StatementType.DROP_IF_EXISTS) :
											  new Integer(StatementType.DROP_DEFAULT)),
											getContextManager());
        return deleteNode;
	}
}


/*
 * <A NAME="dropIndexStatement">dropIndexStatement</A>
 */
StatementNode
dropIndexStatement() throws StandardException :
{
	TableName indexName;
}
{
	<INDEX> indexName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return (StatementNode) nodeFactory.getNode(
								C_NodeTypes.DROP_INDEX_NODE,
								indexName,
								getContextManager());
	}
}

/*
 * <A NAME="dropAliasStatement">dropAliasStatement</A>
 */
StatementNode
dropAliasStatement() throws StandardException :
{
	Object aliasName;
}
{
  	<PROCEDURE> aliasName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return dropAliasNode(aliasName, AliasInfo.ALIAS_TYPE_PROCEDURE_AS_CHAR);
	}
|  	<FUNCTION> aliasName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return dropAliasNode(aliasName, AliasInfo.ALIAS_TYPE_FUNCTION_AS_CHAR);
	}
|	<SYNONYM> aliasName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		checkVersion(DataDictionary.DD_VERSION_DERBY_10_1, "DROP SYNONYM");

		return dropAliasNode(aliasName, AliasInfo.ALIAS_TYPE_SYNONYM_AS_CHAR);
	}
|	<TYPE> aliasName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) <RESTRICT>
	{
		checkVersion(DataDictionary.DD_VERSION_DERBY_10_6, "DROP TYPE");

		return dropAliasNode(aliasName, AliasInfo.ALIAS_TYPE_UDT_AS_CHAR);
	}
|	<DERBY> <AGGREGATE> aliasName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) <RESTRICT>
	{
		checkVersion(DataDictionary.DD_VERSION_DERBY_10_9, "DROP DERBY AGGREGATE");

		return dropAliasNode(aliasName, AliasInfo.ALIAS_TYPE_AGGREGATE_AS_CHAR);
	}
}

StatementNode
dropViewStatement() throws StandardException :
{
    Token ifTok = null;
    Token ifTok2 = null;
    Token existsTok = null;
    Token existsTok2 = null;
	TableName viewName;
}
{
	<VIEW> [ ifTok = <IF> existsTok = <EXISTS> ] viewName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH) [ ifTok2 = <IF> existsTok2 = <EXISTS> ]
	{
        // must have both "if" and "exists"
        boolean ifExists = ifTok != null && existsTok != null;
        boolean ifExists2 = ifTok2 != null && existsTok2 != null;

		return (StatementNode) nodeFactory.getNode(
								C_NodeTypes.DROP_VIEW_NODE,
								viewName,
								((ifExists || ifExists2) ? new Integer(StatementType.DROP_IF_EXISTS) : new Integer(StatementType.DROP_DEFAULT)),
								getContextManager());
	}
}

StatementNode
dropTriggerStatement() throws StandardException :
{
	TableName triggerName;
}
{
	<TRIGGER> triggerName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return (StatementNode) nodeFactory.getNode(
								C_NodeTypes.DROP_TRIGGER_NODE,
								triggerName,
								getContextManager());
	}
}


StatementNode
truncateTableStatement() throws StandardException :
{
	TableName tableName;
}
{
	<TRUNCATE> <TABLE> tableName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
	{
		return (StatementNode) nodeFactory.getNode(
							C_NodeTypes.ALTER_TABLE_NODE,
							tableName,
							getContextManager());
	}
}

/*
 * <A NAME="grantStatement">grantStatement</A>
 */
StatementNode
grantStatement() throws StandardException :
{
	StatementNode node;
}
{
	/* TRIGGER is a non-reserved word, so it is allowed as role
	 * identifier.	This gives a parser problem in determining if
	 * a grant statement is a grant role or grant privilege
	 * statement. In a grant privilege statement, all the other
	 * grantable privileges are reserved keywords, except
	 * TRIGGER. So, if we encounter GRANT TRIGGER, we need to look
	 * one or two more tokens ahead to determine what kind of
	 * grant statement we are seeing:
	 *
	 * privilege grant:
	 *	  grant trigger , <any of rest of privilege keywords>
	 *	  grant trigger on ..
	 *	  grant <any of rest of privilege keywords>
	 * role grant:
	 *	  grant trigger to ..
	 *	  grant trigger, <NOT any of  rest of privilege keywords>
	 *	  grant <NOT any of rest of privilege keywords>
	 */
	LOOKAHEAD( { getToken(1).kind == GRANT &&
				((getToken(2).kind == TRIGGER &&
				  ((getToken(3).kind == COMMA &&
					isPrivilegeKeywordExceptTrigger(getToken(4).kind)) ||
				   getToken(3).kind == ON)) ||
				 isPrivilegeKeywordExceptTrigger(getToken(2).kind)) } )
	<GRANT>
	{
		checkVersion( DataDictionary.DD_VERSION_DERBY_10_2, "GRANT");
		checkSqlStandardAccess( "GRANT");
	}
	(
        node = tableGrantStatement() |
        node = routineGrantStatement() |
        node = usageGrantStatement()
    )
	{
		return node;
	}
|
	LOOKAHEAD( { getToken(1).kind == GRANT &&
				((getToken(2).kind == TRIGGER &&
				  ((getToken(3).kind == COMMA &&
					!isPrivilegeKeywordExceptTrigger(getToken(4).kind)) ||
				   getToken(3).kind == TO)) ||
				 !isPrivilegeKeywordExceptTrigger(getToken(2).kind)) } )
	<GRANT>
	( node = roleGrantStatement() )
	{
		return node;
	}
}

/*
 * <A NAME="tableGrantStatement">tableGrantStatement</A>
 */
StatementNode
tableGrantStatement() throws StandardException :
{
    PrivilegeNode privileges;
    List grantees;
}
{
       privileges = privileges()
       <TO> grantees = granteeList()
    {
        return (StatementNode) nodeFactory.getNode( C_NodeTypes.GRANT_NODE,
                                    privileges, grantees,
                                    getContextManager());
    }
}// end of tableGrantStatement

/*
 * <A NAME="privileges">privileges</A>
 */
PrivilegeNode privileges() throws StandardException :
{
    PrivilegeNode privilegeNode = null;
    BasicPrivilegesNode basicPrivilegesNode = null;

}
{
    basicPrivilegesNode = basicActions()
    <ON> privilegeNode = basicPrivileges(basicPrivilegesNode)
    {
        return privilegeNode;
    }
}// end of privileges

/*
 * <A NAME="basicPrivileges">basicPrivileges</A>
 */
PrivilegeNode basicPrivileges( BasicPrivilegesNode basicPrivilegesNode) throws StandardException :
{

    TableName objectName = null;
    String schemaName = null;

}
{


    <SCHEMA>
        schemaName = identifier(Limits.MAX_IDENTIFIER_LENGTH, false)
    {
        return (PrivilegeNode) nodeFactory.getNode( C_NodeTypes.PRIVILEGE_NODE,
                                                            ReuseFactory.getInteger( PrivilegeNode.SCHEMA_PRIVILEGES),
                                                            schemaName, basicPrivilegesNode,
                                                            getContextManager());
    }
|   [  <TABLE> ]
        objectName = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
    {
             /* modify and access action is not supported at the table level, so take it out */
             if (basicPrivilegesNode.getIsAll()) {
                 basicPrivilegesNode.removeAction(TablePrivilegeInfo.MODIFY_ACTION);
                 basicPrivilegesNode.removeAction(TablePrivilegeInfo.ACCESS_ACTION);
             }

             return (PrivilegeNode) nodeFactory.getNode( C_NodeTypes.PRIVILEGE_NODE,
                                                         ReuseFactory.getInteger( PrivilegeNode.TABLE_PRIVILEGES),
                                                         objectName, basicPrivilegesNode,
                                                         getContextManager());
    }
} // end of   basicPrivileges

/*
 * <A NAME="basicActions">basicActions</A>
 */
BasicPrivilegesNode basicActions() throws StandardException :
{
    BasicPrivilegesNode basicActionsNode = (BasicPrivilegesNode)
      nodeFactory.getNode( C_NodeTypes.TABLE_PRIVILEGES_NODE, getContextManager());
}
{
    <ALL> <PRIVILEGES>
    {
        basicActionsNode.addAll();
        return basicActionsNode;
    }
|
    basicAction( basicActionsNode) ( <COMMA> basicAction( basicActionsNode) )*
    {
        return basicActionsNode;
    }
} // end of basicActionsNode

/*
 * <A NAME="routineGrantStatement">routineGrantStatement</A>
 */
StatementNode
routineGrantStatement() throws StandardException :
{
    List grantees;
    RoutineDesignator routine;
}
{
    <EXECUTE> <ON> routine = routineDesignator()
    <TO> grantees = granteeList()
    {
        PrivilegeNode routinePrivilege = (PrivilegeNode)
          nodeFactory.getNode( C_NodeTypes.PRIVILEGE_NODE,
                               ReuseFactory.getInteger( PrivilegeNode.ROUTINE_PRIVILEGES),
                               routine, null,
                               getContextManager());
        return (StatementNode) nodeFactory.getNode( C_NodeTypes.GRANT_NODE,
                                    routinePrivilege, grantees,
                                    getContextManager());
    }
}// end of routineGrantStatement

/*
 * <A NAME="usageGrantStatement">usageGrantStatement</A>
 */
StatementNode
usageGrantStatement() throws StandardException :
{
    List grantees;
    TableName name;
    Integer objectType;
}
{
    <USAGE> <ON>
    objectType = usableObjects()
    name = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
    <TO> grantees = granteeList()
    {
		checkVersion( DataDictionary.DD_VERSION_DERBY_10_6, "GRANT USAGE");
        PrivilegeNode privilegeNode = (PrivilegeNode) nodeFactory.getNode
            (
                C_NodeTypes.PRIVILEGE_NODE,
                objectType,
                name,
                PermDescriptor.USAGE_PRIV,
                Boolean.FALSE,
                getContextManager()
            );
        return (StatementNode) nodeFactory.getNode
            (
                C_NodeTypes.GRANT_NODE,
                privilegeNode,
                grantees,
                getContextManager()
            );
    }
}// end of usageGrantStatement

/*
 * <A NAME="usableObjects">usableObjects</A>
 */
Integer
usableObjects() throws StandardException :
{
}
{
<DERBY> <AGGREGATE>
   {
       return ReuseFactory.getInteger( PrivilegeNode.AGGREGATE_PRIVILEGES);
   }

|
    <SEQUENCE>
    {
        return ReuseFactory.getInteger( PrivilegeNode.SEQUENCE_PRIVILEGES);
    }
|
    <TYPE>
    {
        return ReuseFactory.getInteger( PrivilegeNode.UDT_PRIVILEGES);
    }
}// end of routineGrantStatement

/*
 * <A NAME="routineAlias">routineAlias</A>
 */
RoutineDesignator routineDesignator() throws StandardException :
{
    Token procOrFunction;
    TableName name;
    List paramTypeList = null;
}
{
    ( procOrFunction = <FUNCTION> | procOrFunction = <PROCEDURE> )
      name = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
      [ <LEFT_PAREN> paramTypeList = parameterTypeList() <RIGHT_PAREN> ]
    {
        return new RoutineDesignator( false,
                                      name,
                                      (procOrFunction.kind == FUNCTION),
                                      paramTypeList);
    }
} // end of routineDesignator


/*
 * <A NAME="parameterTypeList">parameterTypeList</A>
 */
List/*<TypeDescriptor>*/ parameterTypeList( ) throws StandardException :
{
    ArrayList list = new ArrayList();
    TypeDescriptor type;
}
{
    [ type = catalogType()
        {
            list.add(type);
        }
      ( <COMMA> type = catalogType()
        {
            list.add(type);
        }
      ) * ]
    {
        return list;
    }
} // end of parameterTypeList


/*
 * <A NAME="basicAction">basicAction</A>
 */
void basicAction( BasicPrivilegesNode basicPrivilegesNode)  throws StandardException :
{
    ResultColumnList columnList = null;
}
{
    <SELECT> [ columnList = privilegeColumnList() ]
    {
        basicPrivilegesNode.addAction( BasicPrivilegeInfo.SELECT_ACTION, columnList);
    }
|
    <DELETE>
    {
        basicPrivilegesNode.addAction( BasicPrivilegeInfo.DELETE_ACTION, (ResultColumnList) null);
    }
|
    <INSERT>
    {
        basicPrivilegesNode.addAction( BasicPrivilegeInfo.INSERT_ACTION, (ResultColumnList) null);
    }
|
    <UPDATE> [ columnList = privilegeColumnList() ]
    {
        basicPrivilegesNode.addAction( BasicPrivilegeInfo.UPDATE_ACTION, columnList);
    }
|
    <REFERENCES> [ columnList = privilegeColumnList() ]
    {
        basicPrivilegesNode.addAction( BasicPrivilegeInfo.REFERENCES_ACTION, columnList);
    }
|
    <TRIGGER>
    {
        basicPrivilegesNode.addAction( BasicPrivilegeInfo.TRIGGER_ACTION, (ResultColumnList) null);
    }
|
    <MODIFY>
    {
        basicPrivilegesNode.addAction( BasicPrivilegeInfo.MODIFY_ACTION, (ResultColumnList) null);
    }
|
    <ACCESS>
    {
        basicPrivilegesNode.addAction( BasicPrivilegeInfo.ACCESS_ACTION, (ResultColumnList) null);
    }
} // end of tableAction

/*
 * <A NAME="privilegeColumnList">privilegeColumnList</A>
 */
ResultColumnList privilegeColumnList() throws StandardException :
{
    ResultColumnList cl = (ResultColumnList) nodeFactory.getNode( C_NodeTypes.RESULT_COLUMN_LIST,
                                                                  getContextManager());
}
{
    <LEFT_PAREN> columnNameListOrAsterisk( cl) <RIGHT_PAREN>
    {
        return cl;
    }
} // end of privilegeColumnList


/*
 * <A NAME="columnNameListOrAsterisk">columnNameListOrAsterisk</A>
 */
void columnNameListOrAsterisk(ResultColumnList cl) throws StandardException :
{
     ResultColumn allResultColumn;
}
{
     columnNameList(cl)
|
     <ASTERISK>
     {
         allResultColumn = (ResultColumn) nodeFactory.getNode(
                                            C_NodeTypes.ALL_RESULT_COLUMN,
                                            null,
                                            getContextManager());
         cl.addResultColumn(allResultColumn);
     }
}

/*
 * <A NAME="granteeList">granteeList</A>
 */
List granteeList() throws StandardException :
{
    ArrayList list = new ArrayList();
}
{
    grantee( list) ( <COMMA> grantee( list) ) *
    {
        return list;
    }
}

void
grantee( List list)  throws StandardException :
{
    String str;
}
{
    str = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
    {
        list.add(str);
    }
|
    <PUBLIC>
    {
        list.add( Authorizer.PUBLIC_AUTHORIZATION_ID);
    }
}


/*
 * <A NAME="roleGrantStatement">roleGrantStatement</A>
 */
StatementNode
roleGrantStatement() throws StandardException :
{
	List rolesGranted;
	List grantees;
	boolean isDefaultRole = true;
}
{
	/*
	 * GRANT <rolename> {, <rolename>}* TO <authentication identifier>
	 *									{, <authentication identifier>}* {AS DEFAULT | NOT AS DEFAULT}
	 *
	 * not implemented: WITH ADMIN OPTION, GRANTED BY clauses
	 */
	rolesGranted = roleList()
	<TO>
	grantees = granteeList()
	[isDefaultRole = asDefault()]
	{
		checkSqlStandardAccess("GRANT <role>");
		checkVersion( DataDictionary.DD_VERSION_DERBY_10_5, "ROLES");

		return (StatementNode) nodeFactory.getNode
			(C_NodeTypes.GRANT_ROLE_NODE,
			 rolesGranted,
			 grantees,
			 isDefaultRole,
			 getContextManager());
	}
}

boolean asDefault() throws StandardException :
{
}
{
   <AS> <_DEFAULT>
   {
       return true;
   }
   | <NOT> <AS> <_DEFAULT>
   {
       return false;
   }
}

/*
 * <A NAME="roleList">roleList</A>
 */
List roleList() throws StandardException :
{
    ArrayList list = new ArrayList();
}
{
    roleElement(list) ( <COMMA> roleElement(list) ) *
    {
        return list;
    }
}


/*
 * <A NAME="roleElement">roleElement</A>
 */
void
roleElement( List list)  throws StandardException :
{
    String str;
}
{
    str = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
    {
        list.add(str);
    }
}


/*
 * <A NAME="revokeStatement">revokeStatement</A>
 */
StatementNode
revokeStatement() throws StandardException :
{
    StatementNode node;
}
{
	/* See look-ahead explanation in grantStatement.
	 *
	 * privilege revoke:
	 *	  revoke trigger , <any of rest of privilege keywords>
	 *	  revoke trigger on ..
	 *	  revoke <any of rest of privilege keywords>
	 * role revoke:
	 *	  revoke trigger from ..
	 *	  revoke trigger, <NOT any of  rest of privilege keywords>
	 *	  revoke <NOT any of rest of privilege keywords>
	 */
	LOOKAHEAD( { getToken(1).kind == REVOKE &&
				((getToken(2).kind == TRIGGER &&
				  ((getToken(3).kind == COMMA &&
					isPrivilegeKeywordExceptTrigger(getToken(4).kind)) ||
				   getToken(3).kind == ON)) ||
				 isPrivilegeKeywordExceptTrigger(getToken(2).kind)) } )
	<REVOKE>
	{
		checkVersion( DataDictionary.DD_VERSION_DERBY_10_2, "REVOKE");
		checkSqlStandardAccess( "REVOKE");
	}
	(
        node = tableRevokeStatement() |
        node = routineRevokeStatement() |
        node = usageRevokeStatement()
    )
	{
		return node;
	}
|
	LOOKAHEAD( { getToken(1).kind == REVOKE &&
				((getToken(2).kind == TRIGGER &&
				  ((getToken(3).kind == COMMA &&
					!isPrivilegeKeywordExceptTrigger(getToken(4).kind)) ||
				   getToken(3).kind == FROM)) ||
				 !isPrivilegeKeywordExceptTrigger(getToken(2).kind)) } )
	<REVOKE>
	{
		checkVersion( DataDictionary.DD_VERSION_DERBY_10_5, "ROLES");
		checkSqlStandardAccess("REVOKE <role>");
	}
	( node = roleRevokeStatement() )
	{
		return node;
	}
}

/*
 * <A NAME="tableRevokeStatement">tableRevokeStatement</A>
 */
StatementNode
tableRevokeStatement() throws StandardException :
{
    PrivilegeNode privileges = null;
    List grantees;
}
{
       privileges = privileges()
       <FROM> grantees = granteeList()
    {
        return (StatementNode) nodeFactory.getNode( C_NodeTypes.REVOKE_NODE,
                                    privileges, grantees,
                                    getContextManager());
    }
}// end of tableRevokeStatement

/*
 * <A NAME="routineRevokeStatement">routineRevokeStatement</A>
 */
StatementNode
routineRevokeStatement() throws StandardException :
{
    List grantees;
    RoutineDesignator routine = null;
}
{
    <EXECUTE> <ON> routine = routineDesignator()
    <FROM> grantees = granteeList() <RESTRICT>
    {
        PrivilegeNode routinePrivilege = (PrivilegeNode)
          nodeFactory.getNode( C_NodeTypes.PRIVILEGE_NODE,
                               ReuseFactory.getInteger( PrivilegeNode.ROUTINE_PRIVILEGES),
                               routine, null,
                               getContextManager());
        return (StatementNode) nodeFactory.getNode( C_NodeTypes.REVOKE_NODE,
                                    routinePrivilege, grantees,
                                    getContextManager());
    }
}// end of routineRevokeStatement

/*
 * <A NAME="usageRevokeStatement">usageRevokeStatement</A>
 */
StatementNode
usageRevokeStatement() throws StandardException :
{
    List grantees;
    TableName name;
    Integer objectType;
}
{
    <USAGE> <ON>
    objectType = usableObjects()
    name = qualifiedName(Limits.MAX_IDENTIFIER_LENGTH)
    <FROM> grantees = granteeList() <RESTRICT>
    {
		checkVersion( DataDictionary.DD_VERSION_DERBY_10_6, "REVOKE USAGE");
        PrivilegeNode privilegeNode = (PrivilegeNode) nodeFactory.getNode
            (
                C_NodeTypes.PRIVILEGE_NODE,
                objectType,
                name,
                PermDescriptor.USAGE_PRIV,
                Boolean.TRUE,
                getContextManager()
            );
        return (StatementNode) nodeFactory.getNode
            (
                C_NodeTypes.REVOKE_NODE,
                privilegeNode,
                grantees,
                getContextManager()
            );
    }
}// end of usageRevokeStatement


/*
 * <A NAME="roleRevokeStatement">roleRevokeStatement</A>
 */
StatementNode
roleRevokeStatement() throws StandardException :
{
	List rolesRevokeed;
	List grantees;
}
{
	rolesRevokeed = roleList()
	<FROM>
	grantees = granteeList()
	{
		return (StatementNode) nodeFactory.getNode
			(C_NodeTypes.REVOKE_ROLE_NODE,
			 rolesRevokeed,
			 grantees,
			 getContextManager());
	}
}

/*
 * <A NAME="identifier">identifier</A>
 */
String
internalIdentifier( int id_length_limit, boolean checkLength) throws StandardException :
{
	String	str;
	Token 	tok;
}
{
	tok = <IDENTIFIER>
	{
        str = StringUtil.SQLToUpperCase(tok.image);
 		if (checkLength) {//if checkLength false, then calling method would do the length limit checks
			//limit the identifier to the id length limit passed to this method
			IdUtil.checkIdentifierLengthLimit(str, id_length_limit);
		}
		// Remember whether last token was a delimited identifier
		nextToLastTokenDelimitedIdentifier = lastTokenDelimitedIdentifier;
		lastTokenDelimitedIdentifier = Boolean.FALSE;
		nextToLastIdentifierToken = lastIdentifierToken;
		lastIdentifierToken = tok;
		return str;
	}
|
	str = delimitedIdentifier()
	{
		if (checkLength) {//if checkLength false, then calling method would do the length limit checks
			//limit the identifier to the id length limit passed to this method
			IdUtil.checkIdentifierLengthLimit(str, id_length_limit);
		}
		return str;
	}
|
	str = nonReservedKeyword()
	{
		return StringUtil.SQLToUpperCase(str);
	}
}

String
identifier(int id_length_limit, boolean checkLength) throws StandardException :
{
	String	id;
}
{
    id = internalIdentifier( id_length_limit, checkLength)
    {
        return id;
    }
}

/*
 * <A NAME="delimitedIdentifier">delimitedIdentifier</A>
 */
String
delimitedIdentifier() :
{
	String	str;
	Token	tok;
}
{
	tok = <DELIMITED_IDENTIFIER>
	{
		str = tok.image.substring(1, tok.image.length() -1);
		str = normalizeDelimitedID( str );
		// Remember whether last token was a delimited identifier
		nextToLastTokenDelimitedIdentifier = lastTokenDelimitedIdentifier;
		lastTokenDelimitedIdentifier = Boolean.TRUE;
		nextToLastIdentifierToken = lastIdentifierToken;
		lastIdentifierToken = tok;

		return str;
	}
}

/*
 * <A NAME="reservedKeyword">reservedKeyword</A>
 */
String
reservedKeyword() :
{
	Token	tok;
}
{
	/*
		All reserved keywords have to be repeated here,
		so that they may be used as normal identifiers.

		NOTE: The same ones are commented out here as above in the token
		rule, for the same reason.

		Derby-139 - LOCAL removed as reserved word as most other
		databases do not enforce it. LOCAL not used at all in grammar so token removed.
	 */
	(
 	/* SQL92 reserved Keywords */
	tok = <ADD>
|	tok = <ALL>
|	tok = <ALLOCATE>
|	tok = <ALTER>
|	tok = <AND>
|	tok = <ANY>
|	tok = <ARE>
|	tok = <AS>
|	tok = <ASC>
|	tok = <ASSERTION>
|	tok = <AT>
|	tok = <AUTHORIZATION>
|	tok = <AVG>
|	tok = <BEGIN>
|	tok = <BETWEEN>
|	tok = <BIT>
|	tok = <BOTH>
|	tok = <BY>
|	tok = <CASCADE>
|	tok = <CASCADED>
|	tok = <CASE>
|	tok = <CAST>
|	tok = <CHAR>
|	tok = <CHARACTER>
|	tok = <CHECK>
|	tok = <CLOSE>
|	tok = <COLLATE>
|	tok = <COLLATION>
|	tok = <COLUMN>
|	tok = <COMMIT>
|	tok = <CONNECT>
|	tok = <CONNECTION>
|	tok = <CONSTRAINT>
|	tok = <CONSTRAINTS>
|	tok = <CONTINUE>
|	tok = <CONVERT>
|	tok = <CORRESPONDING>
|	tok = <CREATE>
|	tok = <CROSS>
|	tok = <CURRENT>
|	tok = <CURRENT_DATE>
|	tok = <CURRENT_TIME>
|	tok = <CURRENT_TIMESTAMP>
|	tok = <CURRENT_USER>
|	tok = <CURSOR>
|	tok = <DEALLOCATE>
|	tok = <DEC>
|	tok = <DECIMAL>
|	tok = <DECLARE>
|	tok = <_DEFAULT>
|	tok = <DEFERRABLE>
|	tok = <DEFERRED>
|	tok = <DELETE>
|	tok = <DESC>
|	tok = <DESCRIBE>
|	tok = <DIAGNOSTICS>
|	tok = <DISCONNECT>
|	tok = <DISTINCT>
|	tok = <DOUBLE>
|	tok = <DROP>
|	tok = <ELSE>
|	tok = <END>
|	tok = <ENDEXEC>
|	tok = <ESCAPE>
|	tok = <EXCEPT>
|	tok = <EXCEPTION>
|	tok = <EXEC>
|	tok = <EXECUTE>
|	tok = <EXISTS>
|	tok = <EXTERNAL>
|	tok = <FALSE>
|	tok = <FETCH>
|	tok = <FIRST>
|	tok = <FLOAT>
|   tok = <FOLLOWING>
|	tok = <FOR>
|	tok = <FOREIGN>
|	tok = <FOUND>
|	tok = <FROM>
|	tok = <FULL>
|	tok = <FUNCTION>
|	tok = <GET>
|	tok = <GET_CURRENT_CONNECTION>
|	tok = <GLOBAL>
|	tok = <GO>
|	tok = <GOTO>
|	tok = <GRANT>
|	tok = <GROUP>
|	tok = <HAVING>
|	tok = <HOUR>
|	tok = <IDENTITY>
|	tok = <IF>
|	tok = <IMMEDIATE>
|	tok = <IN>
|	tok = <INDICATOR>
|	tok = <INITIALLY>
|	tok = <INNER>
|   tok = <INOUT>
|	tok = <INPUT>
|	tok = <INSENSITIVE>
|	tok = <INSERT>
|	tok = <INT>
|	tok = <INTEGER>
|	tok = <INTERSECT>
// SQL92 says it is reserved, but we want it to be non-reserved.
|	tok = <INTO>
|	tok = <IS>
|	tok = <ISOLATION>
|	tok = <JOIN>
|	tok = <KEY>
|	tok = <LAST>
|	tok = <LEADING>
|	tok = <LEFT>
|	tok = <LIKE>
|	tok = <LOCAL>
|	tok = <LOWER>
|	tok = <MATCH>
|	tok = <MAX>
|	tok = <MIN>
|	tok = <MINUTE>
// SQL92 says it is reserved, but we want it to be non-reserved.
|	tok = <NATIONAL>
|	tok = <NATURAL>
|	tok = <NCHAR>
|	tok = <NVARCHAR>
|	tok = <NEXT>
|	tok = <NO>
|	tok = <NOLOGGING>
|   tok = <NONE>
|	tok = <NOT>
|	tok = <NOW>
|	tok = <NULL>
|	tok = <NULLIF>
|	tok = <NUMERIC>
|	tok = <OF>
|	tok = <ON>
|	tok = <ONLY>
|	tok = <OPEN>
|	tok = <OPTION>
|	tok = <OR>
|	tok = <ORDER>
|   tok = <OUT>
|	tok = <OUTER>
|	tok = <OUTPUT>
|	tok = <OVERLAPS>
|	tok = <PAD>
|	tok = <PARTIAL>
|	tok = <PARTITION>
|	tok = <PREPARE>
|   tok = <PRECEDING>
|	tok = <PRESERVE>
|	tok = <PRIMARY>
|	tok = <PRIOR>
|	tok = <PRIVILEGES>
|	tok = <PROCEDURE>
|	tok = <PUBLIC>
|	tok = <READ>
|	tok = <REAL>
|	tok = <REFERENCES>
|	tok = <RELATIVE>
|	tok = <REPLACE>
|	tok = <RESTRICT>
|	tok = <REVOKE>
|	tok = <RIGHT>
|	tok = <ROLLBACK>
|   tok = <RANGE>
|	tok = <ROWS>
|	tok = <SCHEMA>
|	tok = <SCROLL>
|	tok = <SECOND>
|	tok = <SELECT>
|	tok = <SESSION_USER>
|   tok = <SESSION_PROPERTY>
|	tok = <SET>
|	tok = <SMALLINT>
|	tok = <ARRAY>
|	tok = <TINYINT>
|	tok = <SOME>
|	tok = <SPACE>
|	tok = <SQL>
|	tok = <SQLCODE>
|	tok = <SQLERROR>
|	tok = <SQLSTATE>
|	tok = <SUBSTRING>
|	tok = <SUM>
|	tok = <SYSTEM_USER>
|	tok = <TABLE>
|	tok = <TEMPORARY>
|	tok = <TIMEZONE_HOUR>
|	tok = <TIMEZONE_MINUTE>
|	tok = <TO>
|	tok = <TOP>
|	tok = <TRAILING>
|	tok = <TRANSACTION>
|	tok = <TRANSLATE>
|	tok = <TRANSLATION>
|	tok = <TRUE>
|   tok = <UNBOUNDED>
|	tok = <UNION>
|	tok = <UNIQUE>
|	tok = <UNKNOWN>
|	tok = <UPDATE>
|	tok = <UPPER>
|	tok = <USER>
|	tok = <USING>
|	tok = <VALUES>
|	tok = <VARCHAR>
|	tok = <VARYING>
|	tok = <VIEW>
|	tok = <WHENEVER>
|	tok = <WHERE>
|	tok = <WITH>
|	tok = <WORK>
|	tok = <WRITE>
|	tok = <YEAR>
	/* Additional JSQL reserved keywords -- non-SQL92 reserved Keywords */
| tok = <ANALYZE>
|	tok = <BOOLEAN>
|	tok = <CALL>
|   tok = <CURRENT_ROLE>
|	tok = <EXPLAIN>
|	tok = <EXPORT>
|	tok = <LONGINT>
|	tok = <LTRIM>
|	tok = <RTRIM>
|	tok = <TRIM>
|	tok = <STRIP>
|	tok = <SUBSTR>
|	tok = <XML>
|	tok = <XMLPARSE>
|	tok = <XMLSERIALIZE>
|	tok = <XMLEXISTS>
|	tok = <XMLQUERY>
)
	{
		// Remember whether last token was a delimited identifier
		nextToLastTokenDelimitedIdentifier = lastTokenDelimitedIdentifier;
		lastTokenDelimitedIdentifier = Boolean.FALSE;
		return tok.image;
	}
}

/*
 * <A NAME="nonReservedKeyword">nonReservedKeyword</A>
 */
String
nonReservedKeyword()  :
{
	Token	tok;
}
{
	/*
		All non-reserved keywords have to be repeated here,
		so that they may be used as normal identifiers.

		NOTE: The same ones are commented out here as above in the token
		rule, for the same reason.
	 */
	(
        tok = <ABS>
	|	tok = <ABSVAL>
	|	tok = <ACCESS>
	|	tok = <ACTION>
	|	tok = <AFTER>
	|	tok = <AGGREGATE>
	|	tok = <ALWAYS>
	|   tok = <AUTO>
	|   tok = <B>
	|	tok = <BEFORE>
	|	tok = <BINARY>
	|	tok = <BLOB>
	|	tok = <C>
	|	tok = <CALLED>
	|	tok = <CLASS>
	|	tok = <CLOB>
    |	tok = <COALESCE>
    |	tok = <NVL>
    |   tok = <CHARACTERDELIMITER>
	|	tok = <COBOL>
	|   tok = <COLUMNDELIMITER>
	|	tok = <COMMITTED>
	|	tok = <COMPRESS>
	|	tok = <CONCAT>
	|	tok = <CONTAINS>
	|	tok = <CONTENT>
	|	tok = <COUNT>
	|   tok = <CS>
	|	tok = <CURDATE>
	|	tok = <CURTIME>
	|	tok = <CYCLE>
	|	tok = <D>
	|	tok = <DATA>
	|	tok = <DATE>
	|   tok = <DATEFORMAT>
	|	tok = <DAY>
	|	tok = <DAYOFYEAR>
	|	tok = <DEFRAGMENT>
        |	tok = <DIRTY>
	|	tok = <DYNAMIC>
    |   tok = <DATABASE>
	|	tok = <DB2SQL>
	|	tok = <DENSERANK>
	|	tok = <DERBY>
	|	tok = <DIGITS>
	|	tok = <SPLICE_JDBC_RESULT_SET>
	|	tok = <DOCUMENT>
	|	tok = <EACH>
	|	tok = <EMPTY>
	|	tok = <EXCLUDE>
	|   tok = <ESTIMATE>
	|	tok = <EXCLUSIVE>
	|	tok = <EXTRACT>
	|	tok = <FIRSTVALUE>
	|	tok = <FN>
	|	tok = <FORTRAN>
	|   tok = <FRACTION>
	|	tok = <GENERATED>
	|   tok = <GROUPING>
	|   tok = <HFILE>
	|	tok = <IDENTITY_VAL_LOCAL>
	|	tok = <IGNORE>
	|	tok = <INCREMENT>
	|	tok = <INDEX>
	|	tok = <INITIAL>
	|	tok = <INPLACE>
// SQL92 says it is reserved, but we want it to be non-reserved.
	|	tok = <INTERVAL>
	|   tok = <JAVA>
	|   tok = <KEYS>
	|   tok = <L>
	|	tok = <LAG>
	|	tok = <LANGUAGE>
	|	tok = <LARGE>
	|	tok = <LASTVALUE>
    |   tok = <LCASE>
	|	tok = <LEAD>
	|	tok = <LENGTH>
	|	tok = <LEVEL>
    |   tok = <LIMIT>
    |   tok = <FORMAT>
    |   tok = <DELIMITED>
    |   tok = <FIELDS>
    |   tok = <TERMINATED>
    |   tok = <ESCAPED>
    |   tok = <LINES>
    |   tok = <PARTITIONED>
    |   tok = <STORED>
    |   tok = <LOCATION>
    |   tok = <TEXTFILE>
    |   tok = <PIN>
    |   tok = <PARQUET>
    |   tok = <AVRO>
    |   tok = <ORC>
    |   tok = <LOCATE>
	|	tok = <LOCK>
	|	tok = <LOCKS>
	|	tok = <LOCKSIZE>
	|	tok = <LOGGED>
	|	tok = <LONG>
	|	tok = <MAXVALUE>
	|	tok = <MINVALUE>
	|	tok = <MESSAGE_LOCALE>
	|	tok = <METHOD>
	|	tok = <MOD>
	|	tok = <MODE>
	|	tok = <MODIFIES>
	|	tok = <MODIFY>
// SQL92 says it is reserved, but we want it to be non-reserved.
	|	tok = <MODULE>
	|	tok = <MONTH>
	|	tok = <MONTHNAME>
	|	tok = <_MORE>
	|	tok = <MUMPS>
	|	tok = <NAME>
	|	tok = <NCLOB>
	|	tok = <NEW>
	|   tok = <NEW_TABLE>
	|	tok = <NULLABLE>
	|	tok = <NULLS>
	|	tok = <NUMBER>
	|	tok = <OBJECT>
	|	tok = <OFF>
	|	LOOKAHEAD({
			getToken(1).kind == OFFSET &&
			!seeingOffsetClause()
		})
		tok = <OFFSET>
	|	tok = <OLD>
	|	tok = <OLD_TABLE>
	|	tok = <OJ>
	|	tok = <OVER>
	|	tok = <PASCAL>
	|	tok = <PASSING>
	|   tok = <PERCENTWORD>
	|	tok = <PLI>
	|	tok = <PRECISION>
	|	tok = <PROPERTIES>
	|	tok = <PURGE>
	|   tok = <PYTHON>  // To support Python Stored Procedure
	|	tok = <QUARTER>
	|	tok = <RANK>
	|	tok = <READS>
	|   tok = <RECURSIVE>
	|	tok = <REF>
// SQL92 says it is reserved, but we want it to be non-reserved.
	|	tok = <RELEASE>
	|	tok = <RENAME>
	|	tok = <REPEAT>
	|	tok = <REPEATABLE>
	|	tok = <REFERENCING>
	|	tok = <RESET>
	|	tok = <RESPECT>
	|	tok = <RESTART>
	|	tok = <RESULT>
	|	tok = <RETAIN>
	|	tok = <RETURNING>
	|	tok = <RETURNS>
	|	tok = <ROLE>
 	|	tok = <ROLLUP>
	|	tok = <ROW>
//	|	tok = <ROW_COUNT>
	|	tok = <ROWNUMBER>
	|   tok = <RR>
	|   tok = <RS>
	|   tok = <SAMPLE>
	|	tok = <SCALE>
	|	tok = <SAVEPOINT>
	|	tok = <SECURITY>
	|	tok = <SEQUENCE>
	|	tok = <SEQUENTIAL>
	|	tok = <SERIALIZABLE>
	|	tok = <SETS>
	|	tok = <SHARE>
	|   tok = <SPECIFIC>
	|   tok = <SPLITKEYS>
	|	tok = <SQLID>
	|	tok = <SQL_TSI_FRAC_SECOND>
	|	tok = <SQL_TSI_SECOND>
	|	tok = <SQL_TSI_MINUTE>
	|	tok = <SQL_TSI_HOUR>
	|	tok = <SQL_TSI_DAY>
	|	tok = <SQL_TSI_WEEK>
	|	tok = <SQL_TSI_MONTH>
	|	tok = <SQL_TSI_QUARTER>
	|	tok = <SQL_TSI_YEAR>
    |   tok = <SQRT>
    |       tok = <STABILITY>
	|	tok = <START>
	|	tok = <STATEMENT>
	|	tok = <STATISTICS>
	|	tok = <SYNONYM>
	|	tok = <STYLE>
	|	tok = <T>
	|	tok = <THEN>
	|	tok = <TIME>
	|   tok = <TIMEFORMAT>
	|	tok = <TIMESTAMP>
	|	tok = <TIMESTAMPADD>
	|   tok = <TIMESTAMPFORMAT>
	|	tok = <TIMESTAMPDIFF>
    |   tok = <TRIGGER>
	|	tok = <TRUNCATE>
	|	tok = <TRUNCATE_END>
	|	tok = <TS>
	|	tok = <TYPE>
    |   tok = <UCASE>
	|	tok = <UNCOMMITTED>
	|   tok = <UR>
	|	tok = <USAGE>
// SQL92 says VALUE is reserved, but we want it to be nonreserved.
	|	tok = <VALUE>
	|	tok = <VARBINARY>
	|	tok = <PARAMETER>
	|	tok = <WEEK>
	|	tok = <WEEKDAY>
	|	tok = <WEEKDAYNAME>
	|	tok = <WHEN>
	|	tok = <WHITESPACE>
	)
	{
		// Remember whether last token was a delimited identifier
		nextToLastTokenDelimitedIdentifier = lastTokenDelimitedIdentifier;
		lastTokenDelimitedIdentifier = Boolean.FALSE;
		nextToLastIdentifierToken = lastIdentifierToken;
		lastIdentifierToken = tok;
		return tok.image;
	}
}

/*
 * <A NAME="caseSensitiveIdentifierPlusReservedWords">caseSensitiveIdentifierPlusReservedWords</A>
 */
String
caseSensitiveIdentifierPlusReservedWords() :
{
	String str;
}
{
	str = caseSensitiveIdentifier()
	{
		return str;
	}
|
	str = reservedKeyword()
	{
		return str;
	}
}

/*
 * <A NAME="caseInsensitiveIdentifierPlusReservedWords">caseInsensitiveIdentifierPlusReservedWords</A>
 */
String
caseInsensitiveIdentifierPlusReservedWords() throws StandardException :
{
	String str;
}
{
	str = identifier(Limits.MAX_IDENTIFIER_LENGTH, true)
	{
		return str;
	}
|
	str = reservedKeyword()
	{
		return StringUtil.SQLToUpperCase(str);
	}
}

/*
 * <A NAME="caseSensitiveIdentifier">caseSensitiveIdentifier</A>
 */
String
caseSensitiveIdentifier() :
{
	String	str;
	Token 	tok;
}
{
	tok = <IDENTIFIER>
	{
		// Remember whether last token was a delimited identifier
		nextToLastTokenDelimitedIdentifier = lastTokenDelimitedIdentifier;
		lastTokenDelimitedIdentifier = Boolean.FALSE;
		return tok.image;
	}
|
	str = delimitedIdentifier()
	{
		return str;
	}
|
	str = nonReservedKeyword()
	{
		return str;
	}
}
