/*
 * Copyright (c) 2012 - 2017 Splice Machine, Inc.
 *
 * This file is part of Splice Machine.
 * Splice Machine is free software: you can redistribute it and/or modify it under the terms of the
 * GNU Affero General Public License as published by the Free Software Foundation, either
 * version 3, or (at your option) any later version.
 * Splice Machine is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Affero General Public License for more details.
 * You should have received a copy of the GNU Affero General Public License along with Splice Machine.
 * If not, see <http://www.gnu.org/licenses/>.
 */

package com.splicemachine.triggers;

import com.splicemachine.derby.test.framework.SpliceSchemaWatcher;
import com.splicemachine.derby.test.framework.SpliceWatcher;
import com.splicemachine.test_dao.TriggerDAO;

import org.junit.*;

import java.sql.Connection;
import java.sql.ResultSet;

/**
 * Created by ochnev on 2/4/16.
 */
public class Multi_Trigger_Values_Update_IT {

    private static final String SCHEMA = Multi_Trigger_Values_Update_IT.class.getSimpleName();

    @ClassRule
    public static SpliceSchemaWatcher spliceSchemaWatcher = new SpliceSchemaWatcher(SCHEMA);

    @ClassRule
    public static SpliceWatcher classWatcher = new SpliceWatcher(SCHEMA);

    @Rule
    public SpliceWatcher methodWatcher = new SpliceWatcher(SCHEMA);

    private TriggerDAO triggerDAO = new TriggerDAO(methodWatcher.getOrCreateConnection());

    @Before
    public void createSharedTables() throws Exception {
        classWatcher.executeUpdate("drop table if exists auditra");
        classWatcher.executeUpdate("drop table if exists auditra2");
        classWatcher.executeUpdate("drop table if exists advancedr");

        classWatcher.executeUpdate("create table auditra\n" +
                "(\n" +
                "id int generated by default as identity(start with 1, increment by 1) not null primary key,\n" +
                "added_ts TIMESTAMP,\n" +
                "description varchar(100),\n" +
                "tablename varchar(100),\n" +
                "user_data varchar(100),\n" +
                "user_ts TIMESTAMP\n" +
                ")");
        classWatcher.executeUpdate("create table auditra2\n" +
                "(\n" +
                "id int generated by default as identity(start with 1, increment by 1) not null primary key,\n" +
                "added_ts TIMESTAMP,\n" +
                "description varchar(100),\n" +
                "tablename varchar(100),\n" +
                "user_data varchar(100),\n" +
                "user_ts TIMESTAMP\n" +
                ")");
        classWatcher.executeUpdate("create table advancedr\n" +
                "(\n" +
                "id int generated by default as identity(start with 1, increment by 1) not null primary key,\n" +
                "modtime TIME,\n" +
                "numa int,\n" +
                "leta varchar(20)\n" +
                ")");

        classWatcher.executeUpdate("CREATE TRIGGER up_new_del AFTER update ON advancedr\n" +
                "referencing new as newval\n" +
                "FOR EACH ROW\n" +
                "delete from auditra where id=newval.numa");
        classWatcher.executeUpdate("CREATE TRIGGER upd1_old_upd AFTER update of numa ON advancedr\n" +
                "referencing old as oldval new as newval\n" +
                "FOR EACH ROW\n" +
                "update auditra2 set description=oldval.leta, user_data=oldval.leta, id =newval.id where id=oldval.id");
    }

    @Test
    @Ignore("DB-3693")
    public void testNewValuesVisibleToSecondTriggerAfterUpdateByFirst() throws Exception {
        triggerDAO.assertTriggerExists("upd1_old_upd");

        classWatcher.executeUpdate("insert into advancedr(modtime, id,numa, leta) values(CURRENT_TIME,1234,4321,'upd1')");
        classWatcher.executeUpdate("insert into auditra2(id, description, added_ts,user_data) values (1234,'i', CURRENT_TIMESTAMP,'i')");
        classWatcher.executeUpdate("update advancedr set leta='new' where leta='upd1'");
        classWatcher.executeUpdate("update advancedr set numa=999 where leta='new'");

        Connection connection = methodWatcher.createConnection();
        ResultSet rs = connection.createStatement().executeQuery("select id,description,user_data from auditra2 order by id");
        if(rs.next()) {
            int id = rs.getInt("id");
            String description = rs.getString("description");
            String userData = rs.getString("user_data");

            // Check the values
            Assert.assertEquals(1234, id);
            Assert.assertEquals("new", description);
            Assert.assertEquals("new", userData);
        } else {
            Assert.fail("ResultSet should not be empty here");
        }

        rs.close();
        connection.close();
    }

}
