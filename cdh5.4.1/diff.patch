diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/IndexStatsCostController.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/IndexStatsCostController.java
index e2f67d6..d91a802 100644
--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/IndexStatsCostController.java
+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/IndexStatsCostController.java
@@ -26,6 +26,7 @@ public class IndexStatsCostController extends StatsStoreCostController {
     private final int totalColumns;
     private final IndexTableStatistics indexStats;
     private int[] indexColToHeapColMap;
+    private final OverheadManagedTableStatistics baseTableStatistics;
 
     public IndexStatsCostController(ConglomerateDescriptor cd,
                                     OpenSpliceConglomerate indexConglomerate,
@@ -46,7 +47,7 @@ public class IndexStatsCostController extends StatsStoreCostController {
         this.indexColToHeapColMap = new int[baseColumnPositions.length];
         System.arraycopy(baseColumnPositions,0,this.indexColToHeapColMap,0,indexColToHeapColMap.length);
         try {
-            OverheadManagedTableStatistics baseTableStatistics = StatisticsStorage.getPartitionStore().getStatistics(txn, heapConglomerateId);
+            baseTableStatistics = StatisticsStorage.getPartitionStore().getStatistics(txn, heapConglomerateId);
             indexStats = new IndexTableStatistics(conglomerateStatistics,baseTableStatistics);
             this.conglomerateStatistics = indexStats;
         } catch (ExecutionException e) {
@@ -56,19 +57,24 @@ public class IndexStatsCostController extends StatsStoreCostController {
     }
 
     @Override
-    public double scanColumnSizeFactor(BitSet validColumns) {
+    public double conglomerateColumnSizeFactor(BitSet validColumns) {
         return super.columnSizeFactor(indexStats,
-                totalColumns,
+                indexColToHeapColMap.length,
                 validColumns);
     }
 
     @Override
-    public double lookupColumnSizeFactor(BitSet validColumns,int numberOfColumns) {
-        return super.columnSizeFactor(conglomerateStatistics,
-                numberOfColumns,
+    public double baseTableColumnSizeFactor(BitSet validColumns) {
+        return super.columnSizeFactor(baseTableStatistics,
+                totalColumns,
                 validColumns);
     }
 
+    @Override
+    public long getBaseTableAvgRowWidth() {
+        return baseTableStatistics.avgRowWidth();
+    }
+
 
     @Override
     public void getFetchFromRowLocationCost(BitSet heapColumns,int access_type,CostEstimate cost) throws StandardException{
diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/IndexTableStatistics.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/IndexTableStatistics.java
index 2649f8c..8d901dd 100644
--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/IndexTableStatistics.java
+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/stats/IndexTableStatistics.java
@@ -43,7 +43,7 @@ public class IndexTableStatistics implements OverheadManagedTableStatistics{
 
     @Override
     public double remoteReadLatency(){
-        return indexSizeFactor*baseTableStats.remoteReadLatency();
+        return baseTableStats.remoteReadLatency();
     }
     @Override
     public long remoteReadTime(){
diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/StatsStoreCostController.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/StatsStoreCostController.java
index 85d2a1a..f0951c1 100644
--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/StatsStoreCostController.java
+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/StatsStoreCostController.java
@@ -103,17 +103,16 @@ public class StatsStoreCostController extends GenericController implements Store
     }
 
 
-
     @Override
-    public double scanColumnSizeFactor(BitSet validColumns) {
+    public double conglomerateColumnSizeFactor(BitSet validColumns) {
         return columnSizeFactor(conglomerateStatistics,
                 ((SpliceConglomerate)baseConglomerate.getConglomerate()).getFormat_ids().length,
                 validColumns);
     }
 
     @Override
-    public double lookupColumnSizeFactor(BitSet validColumns, int numberOfColumns) {
-        throw new RuntimeException("Cannot Have Lookup Factor on Base Conglomerate");
+    public double baseTableColumnSizeFactor(BitSet validColumns) {
+        return conglomerateColumnSizeFactor(validColumns);
     }
 
     @Override
@@ -414,7 +413,7 @@ public class StatsStoreCostController extends GenericController implements Store
         //get the average columnSize factor across all regions
         double colFactorSum = 0d;
         List<? extends PartitionStatistics> partStats=tableStats.partitionStatistics();
-        if(partStats.size()<=0) return 0d; //no partitions present? huh?
+        if(partStats.size()<=0) return 1d; //no partitions present? huh?
 
         for(PartitionStatistics pStats: partStats){
             colFactorSum+=columnSizeFactor(totalColumns,validColumns,pStats);
@@ -510,7 +509,12 @@ public class StatsStoreCostController extends GenericController implements Store
     }
 
     @Override
-    public long getAvgRowWidth() {
+    public long getConglomerateAvgRowWidth() {
+        return conglomerateStatistics.avgRowWidth();
+    }
+
+    @Override
+    public long getBaseTableAvgRowWidth() {
         return conglomerateStatistics.avgRowWidth();
     }
 
diff --git a/splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/TempScalarAggregateCostController.java b/splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/TempScalarAggregateCostController.java
index c2c745b..8f29ba6 100644
--- a/splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/TempScalarAggregateCostController.java
+++ b/splice_machine/src/main/java/com/splicemachine/derby/impl/store/access/TempScalarAggregateCostController.java
@@ -101,7 +101,7 @@ public class TempScalarAggregateCostController implements AggregateCostControlle
                         }
                     }
                     shuffleCost += returnedRows * sc.getRemoteLatency();
-                    outputHeapSize += returnedRows * sc.getAvgRowWidth();
+                    outputHeapSize += returnedRows * sc.getConglomerateAvgRowWidth(); // TODO JL This is not right.
                 }
             }
         }
diff --git a/splice_machine_test/src/test/java/com/splicemachine/db/impl/sql/compile/IndexSelectivityIT.java b/splice_machine_test/src/test/java/com/splicemachine/db/impl/sql/compile/IndexSelectivityIT.java
index f0a6c3a..ae331c2 100644
--- a/splice_machine_test/src/test/java/com/splicemachine/db/impl/sql/compile/IndexSelectivityIT.java
+++ b/splice_machine_test/src/test/java/com/splicemachine/db/impl/sql/compile/IndexSelectivityIT.java
@@ -107,7 +107,7 @@ public class IndexSelectivityIT extends SpliceUnitTest {
         // 100/10000
         secondRowContainsQuery("explain select * from ts_high_cardinality where c1 > 1 and c1 < 100","IndexScan[TS_HIGH_CARDINALITY_IX",methodWatcher);
         // 200/10000
-        secondRowContainsQuery("explain select * from ts_high_cardinality where c1 > 1 and c1 < 200","IndexScan[TS_HIGH_CARDINALITY_IX",methodWatcher);
+        firstRowContainsQuery("explain select * from ts_high_cardinality where c1 > 1 and c1 < 200","TableScan[TS_HIGH_CARDINALITY",methodWatcher);
         // 1000/10000
         firstRowContainsQuery("explain select * from ts_high_cardinality where c1 > 1 and c1 < 1000","TableScan[TS_HIGH_CARDINALITY",methodWatcher);
         // 2000/10000
