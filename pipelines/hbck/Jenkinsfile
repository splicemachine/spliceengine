@Library('jenkins-shared-library')_

// Define params
def slackResponse = slackSend(channel: "db-automated-testing", message: "Launching $JOB_NAME pipeline")
slackSend(channel: slackResponse.threadId, message: "Launching Jenkins node...")


node('splice-standalone'){
    try{
        def artifact_values  = [
            [$class: 'VaultSecret', path: "secret/aws/jenkins/colo_jenkins", secretValues: [
                [$class: 'VaultSecretValue', envVar: 'ARTIFACT_USER', vaultKey: 'user'],
                [$class: 'VaultSecretValue', envVar: 'ARTIFACT_PASSWORD', vaultKey: 'pass']]]
        ]
        slackSend(channel: slackResponse.threadId, message: "Assembling secrets and variables...")
        slackSend(channel: slackResponse.threadId, message: "Checking out code...")
            stage("Checkout") {
                // Get some code from a GitHub repository
                checkout([  
                    $class: 'GitSCM', 
                    branches: [[name: 'refs/heads/master']], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'hbck']], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [[url: 'https://github.com/apache/hbase-operator-tools.git']]
                ])
                checkout([  
                    $class: 'GitSCM', 
                    branches: [[name: 'refs/heads/master']], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'spliceengine']], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [[credentialsId: '88647ede-744a-444b-8c08-8313cc137944', url: 'https://github.com/splicemachine/spliceengine.git']]
                ])
            }
            slackSend(channel: slackResponse.threadId, message: "Deploying Latest HBCK2...")
            stage("Deploy") {
                dir('spliceengine'){
                wrap([$class: 'VaultBuildWrapper', vaultSecrets: artifact_values]) {
                    sh """
                    mvn -Dmaven.test.failure.ignore=true -B -e --fail-at-end clean install -DskipTests
                    cp pipelines/template/settings.xml ~/.m2/settings.xml
                    sed  -i "s/REPLACE_USER/$ARTIFACT_USER/" ~/.m2/settings.xml
                    sed  -i "s/REPLACE_PASS/$ARTIFACT_PASSWORD/" ~/.m2/settings.xml
                    """
                    }
                }
                dir('hbck'){
                    sh """
                    mvn versions:set -DnewVersion=STABLE
                    sed -i '469 i\\ <profile><id>splicemachine-external</id><distributionManagement><repository><id>splicemachine</id><name>Splice Machine Releases</name><url>http://repository.splicemachine.com/nexus/content/repositories/releases</url><uniqueVersion>false</uniqueVersion></repository></distributionManagement></profile>' pom.xml
                    tail pom.xml
                    mvn -Dmaven.test.failure.ignore=true -B -e --fail-at-end clean deploy -Psplicemachine-external
                    """
                }
            }
    } catch (any) {
        // if there was an exception thrown, the build failed
        currentBuild.result = "FAILED"
        throw any

    } finally {
        archiveArtifacts artifacts: 'hbck/hbase-hbck2/target/*.jar', allowEmptyArchive: true
        slackSend(channel: slackResponse.threadId, message: "$JOB_NAME job status: $currentBuild.result $BUILD_URL")
        // success or failure, always send notifications
        notifyBuild(currentBuild.result)
    }
}
