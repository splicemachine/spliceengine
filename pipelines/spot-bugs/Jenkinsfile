def vault_addr="https://vault.build.splicemachine-dev.io"
def branch = ""
def source_branch = ""

// Launch the docker container
node('splice-standalone') {

    def artifact_values  = [
        [$class: 'VaultSecret', path: "secret/aws/jenkins/colo_jenkins", secretValues: [
            [$class: 'VaultSecretValue', envVar: 'ARTIFACT_USER', vaultKey: 'user'],
            [$class: 'VaultSecretValue', envVar: 'ARTIFACT_PASSWORD', vaultKey: 'pass']]]
    ]

    try {

    notifyBuild('STARTED')
    
    try {
        source_branch = "${CHANGE_BRANCH}"
    } catch (Exception e) {
        source_branch = "${BRANCH_NAME}"
    }

    echo source_branch

    stage('Build') {
      // Checkout code from repository
        checkout([  
            $class: 'GitSCM', 
            branches: [[name: source_branch]], 
            doGenerateSubmoduleConfigurations: false, 
            extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'spliceengine']], 
            submoduleCfg: [], 
            userRemoteConfigs: [[credentialsId: '88647ede-744a-444b-8c08-8313cc137944', url: 'https://github.com/splicemachine/spliceengine.git']]
        ])
        try{
            checkout([  
                $class: 'GitSCM', 
                branches: [[name: 'refs/remotes/origin/${BRANCH_NAME}']], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'spliceengine-ee']], 
                submoduleCfg: [], 
                userRemoteConfigs: [[credentialsId: '88647ede-744a-444b-8c08-8313cc137944', url: 'https://github.com/splicemachine/spliceengine-ee.git']]
            ])
        } catch (Exception e) {
            dir('spliceengine'){
                branch = "git rev-parse --abbrev-ref HEAD |  tr -d '\n'| tail -c 2"

                if ( "$branch" == ".7" ) {
                        branch = "branch-2.7"
                    } else if ( "$branch" == ".8" ) {
                        branch = "branch-2.8"
                    } else if ( "$branch" == ".0" ) {
                        branch = "branch-3.0"
                    } else {
                        branch = "master"
                    }
                sh "cd .."
            }
            checkout([  
                $class: 'GitSCM', 
                branches: [[name: 'refs/remotes/origin/'+branch]], 
                doGenerateSubmoduleConfigurations: false, 
                extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'spliceengine-ee']], 
                submoduleCfg: [], 
                userRemoteConfigs: [[credentialsId: '88647ede-744a-444b-8c08-8313cc137944', url: 'https://github.com/splicemachine/spliceengine-ee.git']]
            ])
        }
        wrap([$class: 'VaultBuildWrapper', vaultSecrets: artifact_values]) {
            dir('spliceengine'){
                def platforms = ""
                branch = "git rev-parse --abbrev-ref HEAD |  tr -d '\n'| tail -c 2"

                if ( "$branch" == ".7" ) {
                            platforms = "cdh5.14.2"
                            branch = "branch-2.7"
                        } else if ( "$branch" == ".8" ) {
                            platforms = "cdh5.14.2"
                            branch = "branch-2.8"
                        } else if ( "$branch" == ".0" ) {
                            platforms = "cdh6.3.0"
                            branch = "branch-3.0"
                        } else {
                            platforms = "cdh6.3.0"
                            branch = "master"
                        }
                sh "mvn -B clean install -Pcore -DskipTests"
                sh '''
                cp pipelines/spot-bugs/template/settings.xml ~/.m2/settings.xml
                sed  -i "s/REPLACE_USER/$ARTIFACT_USER/" ~/.m2/settings.xml
                sed  -i "s/REPLACE_PASS/$ARTIFACT_PASSWORD/" ~/.m2/settings.xml
                '''
                sh "mvn -B clean install -Pmem,$platforms,ee -DskipTests"
            }
        }
      }

    stage('SpotBugs') {
      dir('spliceengine'){
          def platforms = ""
          branch = "git rev-parse --abbrev-ref HEAD |  tr -d '\n'| tail -c 2"

          if ( "$branch" == ".7" ) {
                        platforms = "cdh5.14.2"
                        branch = "branch-2.7"
                    } else if ( "$branch" == ".8" ) {
                        platforms = "cdh5.14.2"
                        branch = "branch-2.8"
                    } else if ( "$branch" == ".0" ) {
                        platforms = "cdh6.3.0"
                        branch = "branch-3.0"
                    } else {
                        platforms = "cdh5.14.2"
                        branch = "master"
            }

          def errors = sh "./pipelines/spot-bugs/runSpotbugs.sh $platforms $branch"
          if ( errors > 0 ){
            currentBuild.result = "FAILED"
            }
          }
      }
    } catch (any) {
        // if there was an exception thrown, the build failed
        currentBuild.result = "FAILED"
        throw any

    } finally {
        // success or failure, always send notifications
        notifyBuild(currentBuild.result)
    }
}

def notifyBuild(String buildStatus = 'STARTED') {
    // Build status of null means successful.
    buildStatus =  buildStatus ?: 'SUCCESSFUL'
    // Override default values based on build status.
    if (buildStatus == 'STARTED' || buildStatus == 'INPUT') {
        color = 'YELLOW'
        colorCode = '#FFFF00'
    } else if (buildStatus == 'CREATING' || buildStatus == 'DESTROYING'){
        color = 'BLUE'
        colorCode = '#0000FF'
    } else if (buildStatus == 'SUCCESSFUL') {
        color = 'GREEN'
        colorCode = '#00FF00'
    } else if (buildStatus == 'FAILED'){
        color = 'RED'
        colorCode = '#FF0000'
    } else {
        echo "End of pipeline"
    }
}
