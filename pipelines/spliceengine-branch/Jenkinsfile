@Library('jenkins-shared-library')_

properties([
    parameters([
        gitParameter(branch: '',
                     branchFilter: 'origin/(.*)',
                     defaultValue: 'master',
                     description: '',
                     name: 'BRANCH',
                     quickFilterEnabled: true,
                     selectedValue: 'DEFAULT',
                     sortMode: 'NONE',
                     tagFilter: '*',
                     type: 'PT_BRANCH'),
        choice(name: 'PLATFORM', 
                choices: [
                    'cdh5.8.3',
                    'cdh5.8.5',
                    'cdh5.12.0',
                    'cdh5.12.2',
                    'cdh5.12.2-2.3',
                    'cdh5.13.0',
                    'cdh5.13.2',
                    'cdh5.13.3',
                    'cdh5.14.0',
                    'cdh5.14.2',
                    'cdh5.16.1',
                    'cdh6.3.0',
                    'hdp2.4.2',
                    'hdp2.4.3',
                    'hdp2.5.0',
                    'hdp2.5.3',
                    'hdp2.5.5',
                    'hdp2.6.1',
                    'hdp2.6.3',
                    'hdp2.6.4',
                    'hdp2.6.5',
                    'hdp3.1.0',
                    'hdp3.1.0-2.4',
                    'hdp3.1.5',
                    'mapr5.1.0',
                    'mapr5.2.0',
                    'mapr6.0.0',
                    'mapr6.1.0',
                    'mem'
                    ], 
                description: ''
                )
    ]),
])

node('spliceengine'){
    def artifact_values  = [
        [$class: 'VaultSecret', path: "secret/aws/jenkins/colo_jenkins", secretValues: [
            [$class: 'VaultSecretValue', envVar: 'ARTIFACT_USER', vaultKey: 'user'],
            [$class: 'VaultSecretValue', envVar: 'ARTIFACT_PASSWORD', vaultKey: 'pass']]]
    ]
    try{
        stage('Prep Node') {
                sh"""
                wget http://download.oracle.com/otn-pub/java/jdk/8u121-b13/e9e7ea248e2c4826b92b3f075a80e441/jdk-8u121-linux-x64.rpm; sudo yum localinstall jdk-8u121-linux-x64.rpm
                sudo yum install curl epel-release git wget nmap rlwrap patch openssh-server openssh-clients openssh ntp nscd nc ftp -y
                sudo sed -i '/requiretty/ s/^/#/' /etc/sudoers
                sudo service nscd start  && sudo service ntpd start  && sudo service sshd start
                wget https://downloads.apache.org/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz -P /tmp 
                sudo tar xf /tmp/apache-maven-3.6.3-bin.tar.gz -C /opt
                sudo ln -sfn /opt/apache-maven-3.6.3 /opt/maven
                wget https://archive.apache.org/dist/ant/binaries/apache-ant-1.9.9-bin.tar.gz -P /tmp
                sudo tar xf /tmp/apache-ant-1.9.9-bin.tar.gz -C /opt
                sudo ln -sfn /opt/apache-ant-1.9.9 /opt/ant
                """
        } 
        stage('Checkout') {
                // Get some code from a GitHub repository
                checkout([  
                    $class: 'GitSCM', 
                    branches: [[name: """refs/heads/${params.BRANCH}"""]], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'spliceengine-ee']], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [[credentialsId: '88647ede-744a-444b-8c08-8313cc137944', url: 'https://github.com/splicemachine/spliceengine-ee.git']]
                ])
                checkout([  
                    $class: 'GitSCM', 
                    branches: [[name: """refs/heads/${params.BRANCH}"""]], 
                    doGenerateSubmoduleConfigurations: false, 
                    extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'spliceengine']], 
                    submoduleCfg: [], 
                    userRemoteConfigs: [[credentialsId: '88647ede-744a-444b-8c08-8313cc137944', url: 'https://github.com/splicemachine/spliceengine.git']]
                ])
        }
        stage("Build/Test"){
            // Run Maven on a Unix agent.
            wrap([$class: 'VaultBuildWrapper', vaultSecrets: artifact_values]) {
                dir('spliceengine'){
                    sh """
                    mvn -B clean install -Pcore -DskipTests
                    cp pipelines/template/settings.xml ~/.m2/settings.xml
                    sed  -i "s/REPLACE_USER/$ARTIFACT_USER/" ~/.m2/settings.xml
                    sed  -i "s/REPLACE_PASS/$ARTIFACT_PASSWORD/" ~/.m2/settings.xml
                    export shortbranch="\$(echo ${params.BRANCH} | awk -F/ '{print \$NF}')"
                    echo "Git branch ${params.BRANCH} short name is \${shortbranch}"
                    export srcver="\$(mvn org.apache.maven.plugins:maven-help-plugin:2.1.1:evaluate -Dexpression=project.version 2>&1 | egrep -v '(^\\[|Download(ed|ing):)' | grep '^[0-9]' | head -1)"
                    echo "Maven project version is \${srcver}"
                    export newsrcver="\${srcver}-${BUILD_NUMBER}-\${shortbranch}"
                    echo "New Maven version is \${newsrcver}"
                    echo "Using Maven versions plugin and in-line sed to set version to \${newsrcver}" 
                    mvn versions:set -DnewVersion="\${newsrcver}" -Pcore,${params.PLATFORM},ee -l /dev/null
                    mvn versions:commit
                    echo "Saving branch and version info to branch.env"
                    echo "export shortbranch=\${shortbranch}" > branch.env
                    echo "export srcver=\${srcver}" >> branch.env
                    echo "export newsrcver=\${newsrcver}" >> branch.env
                    echo "\${newsrcver}" > version.txt
                    mvn -B -e --fail-at-end clean -DskipTests
                    cp pipelines/spot-bugs/template/settings.xml ~/.m2/settings.xml
                    sed  -i "s/REPLACE_USER/$ARTIFACT_USER/" ~/.m2/settings.xml
                    sed  -i "s/REPLACE_PASS/$ARTIFACT_PASSWORD/" ~/.m2/settings.xml
                    mvn -B -e --fail-at-end verify -Pmem,core,${params.PLATFORM},ee
                    """
                }
            }
        }
    } catch (any) {
        // if there was an exception thrown, the build failed
        currentBuild.result = "FAILED"
        throw any

    } finally {
        archiveArtifacts artifacts: '**,spliceengine/platform_it/target/*.log, spliceengine/target/platform_it/*log.*, spliceengine/platform_it/*.log, spliceengine/platform_it/*log.*, spliceengine/platform_it/target/SpliceTestYarnPlatform/**/*, spliceengine/mem_sql/target/*.log', allowEmptyArchive: true
        // success or failure, always send notifications
        notifyBuild(currentBuild.result)
    }
}

