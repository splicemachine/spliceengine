package com.splicemachine.derby.impl.sql.execute.actions;

import org.apache.derby.iapi.sql.execute.ConstantAction;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.sql.Activation;
import org.apache.derby.iapi.error.StandardException;
import org.apache.derby.iapi.sql.conn.StatementContext;
import org.apache.derby.iapi.reference.SQLState;
import org.apache.derby.shared.common.reference.MessageId;

/**
 *	This class  describes actions that are ALWAYS performed for a
 *	Savepoint (rollback, release and set savepoint) Statement at Execution time.
 */

public class SavepointConstantOperation extends DDLConstantOperation {
    private static enum SavepointType{
        CREATE(1),
        ROLLBACK(2),
        RELEASE(3);
        private final int statementTypeCode; //the code generated by the parser

        SavepointType(int statementTypeCode) {
            this.statementTypeCode = statementTypeCode;
        }

        public static SavepointType forCode(int code){
            for(SavepointType type:values()){
                if(type.statementTypeCode==code) return type;
            }
            throw new IllegalArgumentException("Unknown code for SavepointType : " + code);
        }
    }
	private final String savepointName; //name of the savepoint
	private final SavepointType	savepointStatementType; //Type of savepoint statement ie rollback, release or set savepoint
	/**
	 *	Make the ConstantAction for a set savepoint, rollback or release statement.
	 *
	 *  @param savepointName	Name of the savepoint.
	 *  @param savepointStatementType	set savepoint, rollback savepoint or release savepoint
	 */
	public SavepointConstantOperation(String savepointName, int savepointStatementType) {
		this.savepointName = savepointName;
		this.savepointStatementType = SavepointType.forCode(savepointStatementType);
	}

	// OBJECT METHODS
	public	String	toString() {
    switch(savepointStatementType){
        case CREATE:
            return constructToString("SAVEPOINT ",savepointName);
        case ROLLBACK:
            return constructToString("ROLLBACK TO SAVEPOINT",savepointName);
        default:
            return constructToString("RELEASE TO SAVEPOINT",savepointName);
    }
	}

    /**
     *	This is the guts of the Execution-time logic for CREATE TABLE.
     *
     *	@see ConstantAction#executeConstantAction
     *
     * @exception StandardException		Thrown on failure
     */
    public void executeConstantAction( Activation activation ) throws StandardException {
        LanguageConnectionContext lcc = activation.getLanguageConnectionContext();
        //Bug 4507 - savepoint not allowed inside trigger
        StatementContext stmtCtxt = lcc.getStatementContext();
        if (stmtCtxt!= null && stmtCtxt.inTrigger())
            throw StandardException.newException(SQLState.NO_SAVEPOINT_IN_TRIGGER);
        switch(savepointStatementType){
            case CREATE:
                if (savepointName.startsWith("SYS")) //to enforce DB2 restriction which is savepoint name can't start with SYS
                    throw StandardException.newException(SQLState.INVALID_SCHEMA_SYS, "SYS");
                lcc.languageSetSavePoint(savepointName, savepointName);
                break;
            case ROLLBACK:
                lcc.internalRollbackToSavepoint(savepointName,true, savepointName);
                break;
            case RELEASE:
                lcc.releaseSavePoint(savepointName, savepointName);
                break;
            default:
                throw new IllegalStateException("Programmer Error: Unknown statement type " + savepointStatementType);
        }
    }

}