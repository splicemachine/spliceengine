// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Txn.proto

package com.splicemachine.si.coprocessor;

public final class TxnMessage {
  private TxnMessage() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code LifecycleAction}
   */
  public enum LifecycleAction
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>COMMIT = 1;</code>
     *
     * <pre>
     **
     * Indicate that a commit action is requested.
     *
     * If the transaction is read-only, then no transaction record is required to exist. In this case,
     * a call to this method will perform a lookup to find the transaction, but otherwise will perform
     * no activities.
     *
     * If the transaction has been rolled back or timed out, performing the action will throw an exception.
     *
     * If the transaction has already been committed, this will perform no action, and will return the
     * previously created transaction id.
     *
     * This call is atomic; it either wholly succeeds or wholly fails. If it succeeds, then the transaction
     * is considered committed; otherwise, it's left in its previous state. However, this does not prevent
     * network actions from causing difficulty--if the network fails while returning data, the transaction
     * may have been committed. However, in this case retrying the operation is acceptable, because
     * committing a second time performs no actions
     * </pre>
     */
    COMMIT(0, 1),
    /**
     * <code>ROLLBACk = 2;</code>
     *
     * <pre>
     **
     * Indicate that the transaction should be rolled back.
     *
     * If the transaction is read-only, then no transaction record is required to exist; this call may perform
     * I/O to find the missing row, but will otherwise perform no actions in this case.
     *
     * If the transaction has already been committed, then this call will do nothing.
     *
     * If the transaction has already been rolled back or timed out, then this call will do nothing.
     *
     * This call is atomic--it either succeeds, or the transaction is left in its prior state. However,
     * this does not prevent network calls from failing after the rollback has completed successfully. In
     * this case, calling this method again is safe, as it will perform no action (i.e. it is idempotent)
     * </pre>
     */
    ROLLBACk(1, 2),
    /**
     * <code>TIMEOUT = 3;</code>
     *
     * <pre>
     **
     * Indicate that the transaction should be timed out.
     *
     * This is functionally equivalent to rolling back the transaction--in fact, returned transactions
     * will have ROLLED_BACK as their state. However, the physically stored value may be different, in order
     * to allow for debugging cluster difficulties
     * </pre>
     */
    TIMEOUT(2, 3),
    /**
     * <code>KEEPALIVE = 4;</code>
     *
     * <pre>
     **
     * Indicate that this transaction is still alive.
     * </pre>
     */
    KEEPALIVE(3, 4),
    ;

    /**
     * <code>COMMIT = 1;</code>
     *
     * <pre>
     **
     * Indicate that a commit action is requested.
     *
     * If the transaction is read-only, then no transaction record is required to exist. In this case,
     * a call to this method will perform a lookup to find the transaction, but otherwise will perform
     * no activities.
     *
     * If the transaction has been rolled back or timed out, performing the action will throw an exception.
     *
     * If the transaction has already been committed, this will perform no action, and will return the
     * previously created transaction id.
     *
     * This call is atomic; it either wholly succeeds or wholly fails. If it succeeds, then the transaction
     * is considered committed; otherwise, it's left in its previous state. However, this does not prevent
     * network actions from causing difficulty--if the network fails while returning data, the transaction
     * may have been committed. However, in this case retrying the operation is acceptable, because
     * committing a second time performs no actions
     * </pre>
     */
    public static final int COMMIT_VALUE = 1;
    /**
     * <code>ROLLBACk = 2;</code>
     *
     * <pre>
     **
     * Indicate that the transaction should be rolled back.
     *
     * If the transaction is read-only, then no transaction record is required to exist; this call may perform
     * I/O to find the missing row, but will otherwise perform no actions in this case.
     *
     * If the transaction has already been committed, then this call will do nothing.
     *
     * If the transaction has already been rolled back or timed out, then this call will do nothing.
     *
     * This call is atomic--it either succeeds, or the transaction is left in its prior state. However,
     * this does not prevent network calls from failing after the rollback has completed successfully. In
     * this case, calling this method again is safe, as it will perform no action (i.e. it is idempotent)
     * </pre>
     */
    public static final int ROLLBACk_VALUE = 2;
    /**
     * <code>TIMEOUT = 3;</code>
     *
     * <pre>
     **
     * Indicate that the transaction should be timed out.
     *
     * This is functionally equivalent to rolling back the transaction--in fact, returned transactions
     * will have ROLLED_BACK as their state. However, the physically stored value may be different, in order
     * to allow for debugging cluster difficulties
     * </pre>
     */
    public static final int TIMEOUT_VALUE = 3;
    /**
     * <code>KEEPALIVE = 4;</code>
     *
     * <pre>
     **
     * Indicate that this transaction is still alive.
     * </pre>
     */
    public static final int KEEPALIVE_VALUE = 4;


    public final int getNumber() { return value; }

    public static LifecycleAction valueOf(int value) {
      switch (value) {
        case 1: return COMMIT;
        case 2: return ROLLBACk;
        case 3: return TIMEOUT;
        case 4: return KEEPALIVE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<LifecycleAction>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<LifecycleAction>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<LifecycleAction>() {
            public LifecycleAction findValueByNumber(int number) {
              return LifecycleAction.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.splicemachine.si.coprocessor.TxnMessage.getDescriptor().getEnumTypes().get(0);
    }

    private static final LifecycleAction[] VALUES = values();

    public static LifecycleAction valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private LifecycleAction(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:LifecycleAction)
  }

  public interface TxnInfoOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required int64 txnId = 1 [default = -1];
    /**
     * <code>required int64 txnId = 1 [default = -1];</code>
     */
    boolean hasTxnId();
    /**
     * <code>required int64 txnId = 1 [default = -1];</code>
     */
    long getTxnId();

    // required uint64 beginTs = 2;
    /**
     * <code>required uint64 beginTs = 2;</code>
     */
    boolean hasBeginTs();
    /**
     * <code>required uint64 beginTs = 2;</code>
     */
    long getBeginTs();

    // required uint32 isolationLevel = 3;
    /**
     * <code>required uint32 isolationLevel = 3;</code>
     *
     * <pre>
     *
     * use a varint to represent the isolation level. This
     * code corresponds to the byte state in Txn.IsolationLevel
     * </pre>
     */
    boolean hasIsolationLevel();
    /**
     * <code>required uint32 isolationLevel = 3;</code>
     *
     * <pre>
     *
     * use a varint to represent the isolation level. This
     * code corresponds to the byte state in Txn.IsolationLevel
     * </pre>
     */
    int getIsolationLevel();

    // optional int64 parentTxnid = 4 [default = -1];
    /**
     * <code>optional int64 parentTxnid = 4 [default = -1];</code>
     *
     * <pre>
     *
     * If not present, or -1 then this is a top-level transaction; otherwise,
     * the transaction id of the parent.
     * </pre>
     */
    boolean hasParentTxnid();
    /**
     * <code>optional int64 parentTxnid = 4 [default = -1];</code>
     *
     * <pre>
     *
     * If not present, or -1 then this is a top-level transaction; otherwise,
     * the transaction id of the parent.
     * </pre>
     */
    long getParentTxnid();

    // optional bool allowsWrites = 5;
    /**
     * <code>optional bool allowsWrites = 5;</code>
     *
     * <pre>
     *
     * If not present, then inherit allowsWrites from the parent
     * </pre>
     */
    boolean hasAllowsWrites();
    /**
     * <code>optional bool allowsWrites = 5;</code>
     *
     * <pre>
     *
     * If not present, then inherit allowsWrites from the parent
     * </pre>
     */
    boolean getAllowsWrites();

    // optional bool isAdditive = 6;
    /**
     * <code>optional bool isAdditive = 6;</code>
     *
     * <pre>
     *
     * If not present, then inherit additivity from the parent transaction
     * </pre>
     */
    boolean hasIsAdditive();
    /**
     * <code>optional bool isAdditive = 6;</code>
     *
     * <pre>
     *
     * If not present, then inherit additivity from the parent transaction
     * </pre>
     */
    boolean getIsAdditive();

    // optional bytes destinationTables = 7;
    /**
     * <code>optional bytes destinationTables = 7;</code>
     *
     * <pre>
     *list of encoded destination tables
     * </pre>
     */
    boolean hasDestinationTables();
    /**
     * <code>optional bytes destinationTables = 7;</code>
     *
     * <pre>
     *list of encoded destination tables
     * </pre>
     */
    com.google.protobuf.ByteString getDestinationTables();
  }
  /**
   * Protobuf type {@code TxnInfo}
   *
   * <pre>
   *
   * Represents the information which is stored on the transaction
   * but which never changes (transaction id, isolation level, and so forth)
   * </pre>
   */
  public static final class TxnInfo extends
      com.google.protobuf.GeneratedMessage
      implements TxnInfoOrBuilder {
    // Use TxnInfo.newBuilder() to construct.
    private TxnInfo(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TxnInfo(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TxnInfo defaultInstance;
    public static TxnInfo getDefaultInstance() {
      return defaultInstance;
    }

    public TxnInfo getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TxnInfo(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              txnId_ = input.readInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              beginTs_ = input.readUInt64();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              isolationLevel_ = input.readUInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              parentTxnid_ = input.readInt64();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              allowsWrites_ = input.readBool();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              isAdditive_ = input.readBool();
              break;
            }
            case 58: {
              bitField0_ |= 0x00000040;
              destinationTables_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_TxnInfo_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_TxnInfo_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.class, com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.Builder.class);
    }

    public static com.google.protobuf.Parser<TxnInfo> PARSER =
        new com.google.protobuf.AbstractParser<TxnInfo>() {
      public TxnInfo parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TxnInfo(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TxnInfo> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required int64 txnId = 1 [default = -1];
    public static final int TXNID_FIELD_NUMBER = 1;
    private long txnId_;
    /**
     * <code>required int64 txnId = 1 [default = -1];</code>
     */
    public boolean hasTxnId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required int64 txnId = 1 [default = -1];</code>
     */
    public long getTxnId() {
      return txnId_;
    }

    // required uint64 beginTs = 2;
    public static final int BEGINTS_FIELD_NUMBER = 2;
    private long beginTs_;
    /**
     * <code>required uint64 beginTs = 2;</code>
     */
    public boolean hasBeginTs() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint64 beginTs = 2;</code>
     */
    public long getBeginTs() {
      return beginTs_;
    }

    // required uint32 isolationLevel = 3;
    public static final int ISOLATIONLEVEL_FIELD_NUMBER = 3;
    private int isolationLevel_;
    /**
     * <code>required uint32 isolationLevel = 3;</code>
     *
     * <pre>
     *
     * use a varint to represent the isolation level. This
     * code corresponds to the byte state in Txn.IsolationLevel
     * </pre>
     */
    public boolean hasIsolationLevel() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 isolationLevel = 3;</code>
     *
     * <pre>
     *
     * use a varint to represent the isolation level. This
     * code corresponds to the byte state in Txn.IsolationLevel
     * </pre>
     */
    public int getIsolationLevel() {
      return isolationLevel_;
    }

    // optional int64 parentTxnid = 4 [default = -1];
    public static final int PARENTTXNID_FIELD_NUMBER = 4;
    private long parentTxnid_;
    /**
     * <code>optional int64 parentTxnid = 4 [default = -1];</code>
     *
     * <pre>
     *
     * If not present, or -1 then this is a top-level transaction; otherwise,
     * the transaction id of the parent.
     * </pre>
     */
    public boolean hasParentTxnid() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int64 parentTxnid = 4 [default = -1];</code>
     *
     * <pre>
     *
     * If not present, or -1 then this is a top-level transaction; otherwise,
     * the transaction id of the parent.
     * </pre>
     */
    public long getParentTxnid() {
      return parentTxnid_;
    }

    // optional bool allowsWrites = 5;
    public static final int ALLOWSWRITES_FIELD_NUMBER = 5;
    private boolean allowsWrites_;
    /**
     * <code>optional bool allowsWrites = 5;</code>
     *
     * <pre>
     *
     * If not present, then inherit allowsWrites from the parent
     * </pre>
     */
    public boolean hasAllowsWrites() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool allowsWrites = 5;</code>
     *
     * <pre>
     *
     * If not present, then inherit allowsWrites from the parent
     * </pre>
     */
    public boolean getAllowsWrites() {
      return allowsWrites_;
    }

    // optional bool isAdditive = 6;
    public static final int ISADDITIVE_FIELD_NUMBER = 6;
    private boolean isAdditive_;
    /**
     * <code>optional bool isAdditive = 6;</code>
     *
     * <pre>
     *
     * If not present, then inherit additivity from the parent transaction
     * </pre>
     */
    public boolean hasIsAdditive() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool isAdditive = 6;</code>
     *
     * <pre>
     *
     * If not present, then inherit additivity from the parent transaction
     * </pre>
     */
    public boolean getIsAdditive() {
      return isAdditive_;
    }

    // optional bytes destinationTables = 7;
    public static final int DESTINATIONTABLES_FIELD_NUMBER = 7;
    private com.google.protobuf.ByteString destinationTables_;
    /**
     * <code>optional bytes destinationTables = 7;</code>
     *
     * <pre>
     *list of encoded destination tables
     * </pre>
     */
    public boolean hasDestinationTables() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bytes destinationTables = 7;</code>
     *
     * <pre>
     *list of encoded destination tables
     * </pre>
     */
    public com.google.protobuf.ByteString getDestinationTables() {
      return destinationTables_;
    }

    private void initFields() {
      txnId_ = -1L;
      beginTs_ = 0L;
      isolationLevel_ = 0;
      parentTxnid_ = -1L;
      allowsWrites_ = false;
      isAdditive_ = false;
      destinationTables_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasTxnId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBeginTs()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIsolationLevel()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, txnId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, beginTs_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, isolationLevel_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt64(4, parentTxnid_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeBool(5, allowsWrites_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeBool(6, isAdditive_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeBytes(7, destinationTables_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, txnId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, beginTs_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, isolationLevel_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, parentTxnid_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, allowsWrites_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(6, isAdditive_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(7, destinationTables_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.splicemachine.si.coprocessor.TxnMessage.TxnInfo)) {
        return super.equals(obj);
      }
      com.splicemachine.si.coprocessor.TxnMessage.TxnInfo other = (com.splicemachine.si.coprocessor.TxnMessage.TxnInfo) obj;

      boolean result = true;
      result = result && (hasTxnId() == other.hasTxnId());
      if (hasTxnId()) {
        result = result && (getTxnId()
            == other.getTxnId());
      }
      result = result && (hasBeginTs() == other.hasBeginTs());
      if (hasBeginTs()) {
        result = result && (getBeginTs()
            == other.getBeginTs());
      }
      result = result && (hasIsolationLevel() == other.hasIsolationLevel());
      if (hasIsolationLevel()) {
        result = result && (getIsolationLevel()
            == other.getIsolationLevel());
      }
      result = result && (hasParentTxnid() == other.hasParentTxnid());
      if (hasParentTxnid()) {
        result = result && (getParentTxnid()
            == other.getParentTxnid());
      }
      result = result && (hasAllowsWrites() == other.hasAllowsWrites());
      if (hasAllowsWrites()) {
        result = result && (getAllowsWrites()
            == other.getAllowsWrites());
      }
      result = result && (hasIsAdditive() == other.hasIsAdditive());
      if (hasIsAdditive()) {
        result = result && (getIsAdditive()
            == other.getIsAdditive());
      }
      result = result && (hasDestinationTables() == other.hasDestinationTables());
      if (hasDestinationTables()) {
        result = result && getDestinationTables()
            .equals(other.getDestinationTables());
      }
      result = result &&
          getUnknownFields().equals(other.getUnknownFields());
      return result;
    }

    private int memoizedHashCode = 0;
    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasTxnId()) {
        hash = (37 * hash) + TXNID_FIELD_NUMBER;
        hash = (53 * hash) + hashLong(getTxnId());
      }
      if (hasBeginTs()) {
        hash = (37 * hash) + BEGINTS_FIELD_NUMBER;
        hash = (53 * hash) + hashLong(getBeginTs());
      }
      if (hasIsolationLevel()) {
        hash = (37 * hash) + ISOLATIONLEVEL_FIELD_NUMBER;
        hash = (53 * hash) + getIsolationLevel();
      }
      if (hasParentTxnid()) {
        hash = (37 * hash) + PARENTTXNID_FIELD_NUMBER;
        hash = (53 * hash) + hashLong(getParentTxnid());
      }
      if (hasAllowsWrites()) {
        hash = (37 * hash) + ALLOWSWRITES_FIELD_NUMBER;
        hash = (53 * hash) + hashBoolean(getAllowsWrites());
      }
      if (hasIsAdditive()) {
        hash = (37 * hash) + ISADDITIVE_FIELD_NUMBER;
        hash = (53 * hash) + hashBoolean(getIsAdditive());
      }
      if (hasDestinationTables()) {
        hash = (37 * hash) + DESTINATIONTABLES_FIELD_NUMBER;
        hash = (53 * hash) + getDestinationTables().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.splicemachine.si.coprocessor.TxnMessage.TxnInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.splicemachine.si.coprocessor.TxnMessage.TxnInfo prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code TxnInfo}
     *
     * <pre>
     *
     * Represents the information which is stored on the transaction
     * but which never changes (transaction id, isolation level, and so forth)
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.splicemachine.si.coprocessor.TxnMessage.TxnInfoOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_TxnInfo_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_TxnInfo_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.class, com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.Builder.class);
      }

      // Construct using com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        txnId_ = -1L;
        bitField0_ = (bitField0_ & ~0x00000001);
        beginTs_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        isolationLevel_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        parentTxnid_ = -1L;
        bitField0_ = (bitField0_ & ~0x00000008);
        allowsWrites_ = false;
        bitField0_ = (bitField0_ & ~0x00000010);
        isAdditive_ = false;
        bitField0_ = (bitField0_ & ~0x00000020);
        destinationTables_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_TxnInfo_descriptor;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.TxnInfo getDefaultInstanceForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.getDefaultInstance();
      }

      public com.splicemachine.si.coprocessor.TxnMessage.TxnInfo build() {
        com.splicemachine.si.coprocessor.TxnMessage.TxnInfo result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.TxnInfo buildPartial() {
        com.splicemachine.si.coprocessor.TxnMessage.TxnInfo result = new com.splicemachine.si.coprocessor.TxnMessage.TxnInfo(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.txnId_ = txnId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.beginTs_ = beginTs_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.isolationLevel_ = isolationLevel_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.parentTxnid_ = parentTxnid_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.allowsWrites_ = allowsWrites_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.isAdditive_ = isAdditive_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.destinationTables_ = destinationTables_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.splicemachine.si.coprocessor.TxnMessage.TxnInfo) {
          return mergeFrom((com.splicemachine.si.coprocessor.TxnMessage.TxnInfo)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.splicemachine.si.coprocessor.TxnMessage.TxnInfo other) {
        if (other == com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.getDefaultInstance()) return this;
        if (other.hasTxnId()) {
          setTxnId(other.getTxnId());
        }
        if (other.hasBeginTs()) {
          setBeginTs(other.getBeginTs());
        }
        if (other.hasIsolationLevel()) {
          setIsolationLevel(other.getIsolationLevel());
        }
        if (other.hasParentTxnid()) {
          setParentTxnid(other.getParentTxnid());
        }
        if (other.hasAllowsWrites()) {
          setAllowsWrites(other.getAllowsWrites());
        }
        if (other.hasIsAdditive()) {
          setIsAdditive(other.getIsAdditive());
        }
        if (other.hasDestinationTables()) {
          setDestinationTables(other.getDestinationTables());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTxnId()) {
          
          return false;
        }
        if (!hasBeginTs()) {
          
          return false;
        }
        if (!hasIsolationLevel()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.splicemachine.si.coprocessor.TxnMessage.TxnInfo parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.splicemachine.si.coprocessor.TxnMessage.TxnInfo) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required int64 txnId = 1 [default = -1];
      private long txnId_ = -1L;
      /**
       * <code>required int64 txnId = 1 [default = -1];</code>
       */
      public boolean hasTxnId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required int64 txnId = 1 [default = -1];</code>
       */
      public long getTxnId() {
        return txnId_;
      }
      /**
       * <code>required int64 txnId = 1 [default = -1];</code>
       */
      public Builder setTxnId(long value) {
        bitField0_ |= 0x00000001;
        txnId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required int64 txnId = 1 [default = -1];</code>
       */
      public Builder clearTxnId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        txnId_ = -1L;
        onChanged();
        return this;
      }

      // required uint64 beginTs = 2;
      private long beginTs_ ;
      /**
       * <code>required uint64 beginTs = 2;</code>
       */
      public boolean hasBeginTs() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint64 beginTs = 2;</code>
       */
      public long getBeginTs() {
        return beginTs_;
      }
      /**
       * <code>required uint64 beginTs = 2;</code>
       */
      public Builder setBeginTs(long value) {
        bitField0_ |= 0x00000002;
        beginTs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 beginTs = 2;</code>
       */
      public Builder clearBeginTs() {
        bitField0_ = (bitField0_ & ~0x00000002);
        beginTs_ = 0L;
        onChanged();
        return this;
      }

      // required uint32 isolationLevel = 3;
      private int isolationLevel_ ;
      /**
       * <code>required uint32 isolationLevel = 3;</code>
       *
       * <pre>
       *
       * use a varint to represent the isolation level. This
       * code corresponds to the byte state in Txn.IsolationLevel
       * </pre>
       */
      public boolean hasIsolationLevel() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 isolationLevel = 3;</code>
       *
       * <pre>
       *
       * use a varint to represent the isolation level. This
       * code corresponds to the byte state in Txn.IsolationLevel
       * </pre>
       */
      public int getIsolationLevel() {
        return isolationLevel_;
      }
      /**
       * <code>required uint32 isolationLevel = 3;</code>
       *
       * <pre>
       *
       * use a varint to represent the isolation level. This
       * code corresponds to the byte state in Txn.IsolationLevel
       * </pre>
       */
      public Builder setIsolationLevel(int value) {
        bitField0_ |= 0x00000004;
        isolationLevel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 isolationLevel = 3;</code>
       *
       * <pre>
       *
       * use a varint to represent the isolation level. This
       * code corresponds to the byte state in Txn.IsolationLevel
       * </pre>
       */
      public Builder clearIsolationLevel() {
        bitField0_ = (bitField0_ & ~0x00000004);
        isolationLevel_ = 0;
        onChanged();
        return this;
      }

      // optional int64 parentTxnid = 4 [default = -1];
      private long parentTxnid_ = -1L;
      /**
       * <code>optional int64 parentTxnid = 4 [default = -1];</code>
       *
       * <pre>
       *
       * If not present, or -1 then this is a top-level transaction; otherwise,
       * the transaction id of the parent.
       * </pre>
       */
      public boolean hasParentTxnid() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int64 parentTxnid = 4 [default = -1];</code>
       *
       * <pre>
       *
       * If not present, or -1 then this is a top-level transaction; otherwise,
       * the transaction id of the parent.
       * </pre>
       */
      public long getParentTxnid() {
        return parentTxnid_;
      }
      /**
       * <code>optional int64 parentTxnid = 4 [default = -1];</code>
       *
       * <pre>
       *
       * If not present, or -1 then this is a top-level transaction; otherwise,
       * the transaction id of the parent.
       * </pre>
       */
      public Builder setParentTxnid(long value) {
        bitField0_ |= 0x00000008;
        parentTxnid_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 parentTxnid = 4 [default = -1];</code>
       *
       * <pre>
       *
       * If not present, or -1 then this is a top-level transaction; otherwise,
       * the transaction id of the parent.
       * </pre>
       */
      public Builder clearParentTxnid() {
        bitField0_ = (bitField0_ & ~0x00000008);
        parentTxnid_ = -1L;
        onChanged();
        return this;
      }

      // optional bool allowsWrites = 5;
      private boolean allowsWrites_ ;
      /**
       * <code>optional bool allowsWrites = 5;</code>
       *
       * <pre>
       *
       * If not present, then inherit allowsWrites from the parent
       * </pre>
       */
      public boolean hasAllowsWrites() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional bool allowsWrites = 5;</code>
       *
       * <pre>
       *
       * If not present, then inherit allowsWrites from the parent
       * </pre>
       */
      public boolean getAllowsWrites() {
        return allowsWrites_;
      }
      /**
       * <code>optional bool allowsWrites = 5;</code>
       *
       * <pre>
       *
       * If not present, then inherit allowsWrites from the parent
       * </pre>
       */
      public Builder setAllowsWrites(boolean value) {
        bitField0_ |= 0x00000010;
        allowsWrites_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool allowsWrites = 5;</code>
       *
       * <pre>
       *
       * If not present, then inherit allowsWrites from the parent
       * </pre>
       */
      public Builder clearAllowsWrites() {
        bitField0_ = (bitField0_ & ~0x00000010);
        allowsWrites_ = false;
        onChanged();
        return this;
      }

      // optional bool isAdditive = 6;
      private boolean isAdditive_ ;
      /**
       * <code>optional bool isAdditive = 6;</code>
       *
       * <pre>
       *
       * If not present, then inherit additivity from the parent transaction
       * </pre>
       */
      public boolean hasIsAdditive() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional bool isAdditive = 6;</code>
       *
       * <pre>
       *
       * If not present, then inherit additivity from the parent transaction
       * </pre>
       */
      public boolean getIsAdditive() {
        return isAdditive_;
      }
      /**
       * <code>optional bool isAdditive = 6;</code>
       *
       * <pre>
       *
       * If not present, then inherit additivity from the parent transaction
       * </pre>
       */
      public Builder setIsAdditive(boolean value) {
        bitField0_ |= 0x00000020;
        isAdditive_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool isAdditive = 6;</code>
       *
       * <pre>
       *
       * If not present, then inherit additivity from the parent transaction
       * </pre>
       */
      public Builder clearIsAdditive() {
        bitField0_ = (bitField0_ & ~0x00000020);
        isAdditive_ = false;
        onChanged();
        return this;
      }

      // optional bytes destinationTables = 7;
      private com.google.protobuf.ByteString destinationTables_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes destinationTables = 7;</code>
       *
       * <pre>
       *list of encoded destination tables
       * </pre>
       */
      public boolean hasDestinationTables() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional bytes destinationTables = 7;</code>
       *
       * <pre>
       *list of encoded destination tables
       * </pre>
       */
      public com.google.protobuf.ByteString getDestinationTables() {
        return destinationTables_;
      }
      /**
       * <code>optional bytes destinationTables = 7;</code>
       *
       * <pre>
       *list of encoded destination tables
       * </pre>
       */
      public Builder setDestinationTables(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000040;
        destinationTables_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes destinationTables = 7;</code>
       *
       * <pre>
       *list of encoded destination tables
       * </pre>
       */
      public Builder clearDestinationTables() {
        bitField0_ = (bitField0_ & ~0x00000040);
        destinationTables_ = getDefaultInstance().getDestinationTables();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:TxnInfo)
    }

    static {
      defaultInstance = new TxnInfo(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:TxnInfo)
  }

  public interface TxnOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required .TxnInfo info = 1;
    /**
     * <code>required .TxnInfo info = 1;</code>
     *
     * <pre>
     *the txn information for this transaction
     * </pre>
     */
    boolean hasInfo();
    /**
     * <code>required .TxnInfo info = 1;</code>
     *
     * <pre>
     *the txn information for this transaction
     * </pre>
     */
    com.splicemachine.si.coprocessor.TxnMessage.TxnInfo getInfo();
    /**
     * <code>required .TxnInfo info = 1;</code>
     *
     * <pre>
     *the txn information for this transaction
     * </pre>
     */
    com.splicemachine.si.coprocessor.TxnMessage.TxnInfoOrBuilder getInfoOrBuilder();

    // required uint32 state = 2;
    /**
     * <code>required uint32 state = 2;</code>
     *
     * <pre>
     *
     * use a varint to represent the state. This state
     * code corresponds to Txn.State's encode()/decode()
     * methods.
     * </pre>
     */
    boolean hasState();
    /**
     * <code>required uint32 state = 2;</code>
     *
     * <pre>
     *
     * use a varint to represent the state. This state
     * code corresponds to Txn.State's encode()/decode()
     * methods.
     * </pre>
     */
    int getState();

    // optional int64 commitTs = 3 [default = -1];
    /**
     * <code>optional int64 commitTs = 3 [default = -1];</code>
     *
     * <pre>
     *if not present, then state should NOT be committed
     * </pre>
     */
    boolean hasCommitTs();
    /**
     * <code>optional int64 commitTs = 3 [default = -1];</code>
     *
     * <pre>
     *if not present, then state should NOT be committed
     * </pre>
     */
    long getCommitTs();

    // optional int64 globalCommitTs = 4 [default = -1];
    /**
     * <code>optional int64 globalCommitTs = 4 [default = -1];</code>
     *
     * <pre>
     *if not present, effectiveCommitTimestamp() will inherit from parent
     * </pre>
     */
    boolean hasGlobalCommitTs();
    /**
     * <code>optional int64 globalCommitTs = 4 [default = -1];</code>
     *
     * <pre>
     *if not present, effectiveCommitTimestamp() will inherit from parent
     * </pre>
     */
    long getGlobalCommitTs();

    // optional int64 lastKeepAliveTime = 5;
    /**
     * <code>optional int64 lastKeepAliveTime = 5;</code>
     */
    boolean hasLastKeepAliveTime();
    /**
     * <code>optional int64 lastKeepAliveTime = 5;</code>
     */
    long getLastKeepAliveTime();
  }
  /**
   * Protobuf type {@code Txn}
   */
  public static final class Txn extends
      com.google.protobuf.GeneratedMessage
      implements TxnOrBuilder {
    // Use Txn.newBuilder() to construct.
    private Txn(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private Txn(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final Txn defaultInstance;
    public static Txn getDefaultInstance() {
      return defaultInstance;
    }

    public Txn getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private Txn(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = info_.toBuilder();
              }
              info_ = input.readMessage(com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(info_);
                info_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              state_ = input.readUInt32();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              commitTs_ = input.readInt64();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              globalCommitTs_ = input.readInt64();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              lastKeepAliveTime_ = input.readInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_Txn_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_Txn_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.splicemachine.si.coprocessor.TxnMessage.Txn.class, com.splicemachine.si.coprocessor.TxnMessage.Txn.Builder.class);
    }

    public static com.google.protobuf.Parser<Txn> PARSER =
        new com.google.protobuf.AbstractParser<Txn>() {
      public Txn parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new Txn(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<Txn> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required .TxnInfo info = 1;
    public static final int INFO_FIELD_NUMBER = 1;
    private com.splicemachine.si.coprocessor.TxnMessage.TxnInfo info_;
    /**
     * <code>required .TxnInfo info = 1;</code>
     *
     * <pre>
     *the txn information for this transaction
     * </pre>
     */
    public boolean hasInfo() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .TxnInfo info = 1;</code>
     *
     * <pre>
     *the txn information for this transaction
     * </pre>
     */
    public com.splicemachine.si.coprocessor.TxnMessage.TxnInfo getInfo() {
      return info_;
    }
    /**
     * <code>required .TxnInfo info = 1;</code>
     *
     * <pre>
     *the txn information for this transaction
     * </pre>
     */
    public com.splicemachine.si.coprocessor.TxnMessage.TxnInfoOrBuilder getInfoOrBuilder() {
      return info_;
    }

    // required uint32 state = 2;
    public static final int STATE_FIELD_NUMBER = 2;
    private int state_;
    /**
     * <code>required uint32 state = 2;</code>
     *
     * <pre>
     *
     * use a varint to represent the state. This state
     * code corresponds to Txn.State's encode()/decode()
     * methods.
     * </pre>
     */
    public boolean hasState() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 state = 2;</code>
     *
     * <pre>
     *
     * use a varint to represent the state. This state
     * code corresponds to Txn.State's encode()/decode()
     * methods.
     * </pre>
     */
    public int getState() {
      return state_;
    }

    // optional int64 commitTs = 3 [default = -1];
    public static final int COMMITTS_FIELD_NUMBER = 3;
    private long commitTs_;
    /**
     * <code>optional int64 commitTs = 3 [default = -1];</code>
     *
     * <pre>
     *if not present, then state should NOT be committed
     * </pre>
     */
    public boolean hasCommitTs() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int64 commitTs = 3 [default = -1];</code>
     *
     * <pre>
     *if not present, then state should NOT be committed
     * </pre>
     */
    public long getCommitTs() {
      return commitTs_;
    }

    // optional int64 globalCommitTs = 4 [default = -1];
    public static final int GLOBALCOMMITTS_FIELD_NUMBER = 4;
    private long globalCommitTs_;
    /**
     * <code>optional int64 globalCommitTs = 4 [default = -1];</code>
     *
     * <pre>
     *if not present, effectiveCommitTimestamp() will inherit from parent
     * </pre>
     */
    public boolean hasGlobalCommitTs() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int64 globalCommitTs = 4 [default = -1];</code>
     *
     * <pre>
     *if not present, effectiveCommitTimestamp() will inherit from parent
     * </pre>
     */
    public long getGlobalCommitTs() {
      return globalCommitTs_;
    }

    // optional int64 lastKeepAliveTime = 5;
    public static final int LASTKEEPALIVETIME_FIELD_NUMBER = 5;
    private long lastKeepAliveTime_;
    /**
     * <code>optional int64 lastKeepAliveTime = 5;</code>
     */
    public boolean hasLastKeepAliveTime() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int64 lastKeepAliveTime = 5;</code>
     */
    public long getLastKeepAliveTime() {
      return lastKeepAliveTime_;
    }

    private void initFields() {
      info_ = com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.getDefaultInstance();
      state_ = 0;
      commitTs_ = -1L;
      globalCommitTs_ = -1L;
      lastKeepAliveTime_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasInfo()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasState()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getInfo().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, info_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, state_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt64(3, commitTs_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt64(4, globalCommitTs_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt64(5, lastKeepAliveTime_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, info_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, state_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(3, commitTs_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, globalCommitTs_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(5, lastKeepAliveTime_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.splicemachine.si.coprocessor.TxnMessage.Txn)) {
        return super.equals(obj);
      }
      com.splicemachine.si.coprocessor.TxnMessage.Txn other = (com.splicemachine.si.coprocessor.TxnMessage.Txn) obj;

      boolean result = true;
      result = result && (hasInfo() == other.hasInfo());
      if (hasInfo()) {
        result = result && getInfo()
            .equals(other.getInfo());
      }
      result = result && (hasState() == other.hasState());
      if (hasState()) {
        result = result && (getState()
            == other.getState());
      }
      result = result && (hasCommitTs() == other.hasCommitTs());
      if (hasCommitTs()) {
        result = result && (getCommitTs()
            == other.getCommitTs());
      }
      result = result && (hasGlobalCommitTs() == other.hasGlobalCommitTs());
      if (hasGlobalCommitTs()) {
        result = result && (getGlobalCommitTs()
            == other.getGlobalCommitTs());
      }
      result = result && (hasLastKeepAliveTime() == other.hasLastKeepAliveTime());
      if (hasLastKeepAliveTime()) {
        result = result && (getLastKeepAliveTime()
            == other.getLastKeepAliveTime());
      }
      result = result &&
          getUnknownFields().equals(other.getUnknownFields());
      return result;
    }

    private int memoizedHashCode = 0;
    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasInfo()) {
        hash = (37 * hash) + INFO_FIELD_NUMBER;
        hash = (53 * hash) + getInfo().hashCode();
      }
      if (hasState()) {
        hash = (37 * hash) + STATE_FIELD_NUMBER;
        hash = (53 * hash) + getState();
      }
      if (hasCommitTs()) {
        hash = (37 * hash) + COMMITTS_FIELD_NUMBER;
        hash = (53 * hash) + hashLong(getCommitTs());
      }
      if (hasGlobalCommitTs()) {
        hash = (37 * hash) + GLOBALCOMMITTS_FIELD_NUMBER;
        hash = (53 * hash) + hashLong(getGlobalCommitTs());
      }
      if (hasLastKeepAliveTime()) {
        hash = (37 * hash) + LASTKEEPALIVETIME_FIELD_NUMBER;
        hash = (53 * hash) + hashLong(getLastKeepAliveTime());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.splicemachine.si.coprocessor.TxnMessage.Txn parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.Txn parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.Txn parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.Txn parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.Txn parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.Txn parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.Txn parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.Txn parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.Txn parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.Txn parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.splicemachine.si.coprocessor.TxnMessage.Txn prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code Txn}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.splicemachine.si.coprocessor.TxnMessage.TxnOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_Txn_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_Txn_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.splicemachine.si.coprocessor.TxnMessage.Txn.class, com.splicemachine.si.coprocessor.TxnMessage.Txn.Builder.class);
      }

      // Construct using com.splicemachine.si.coprocessor.TxnMessage.Txn.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (infoBuilder_ == null) {
          info_ = com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.getDefaultInstance();
        } else {
          infoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        state_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        commitTs_ = -1L;
        bitField0_ = (bitField0_ & ~0x00000004);
        globalCommitTs_ = -1L;
        bitField0_ = (bitField0_ & ~0x00000008);
        lastKeepAliveTime_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_Txn_descriptor;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.Txn getDefaultInstanceForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.Txn.getDefaultInstance();
      }

      public com.splicemachine.si.coprocessor.TxnMessage.Txn build() {
        com.splicemachine.si.coprocessor.TxnMessage.Txn result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.Txn buildPartial() {
        com.splicemachine.si.coprocessor.TxnMessage.Txn result = new com.splicemachine.si.coprocessor.TxnMessage.Txn(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (infoBuilder_ == null) {
          result.info_ = info_;
        } else {
          result.info_ = infoBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.state_ = state_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.commitTs_ = commitTs_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.globalCommitTs_ = globalCommitTs_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.lastKeepAliveTime_ = lastKeepAliveTime_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.splicemachine.si.coprocessor.TxnMessage.Txn) {
          return mergeFrom((com.splicemachine.si.coprocessor.TxnMessage.Txn)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.splicemachine.si.coprocessor.TxnMessage.Txn other) {
        if (other == com.splicemachine.si.coprocessor.TxnMessage.Txn.getDefaultInstance()) return this;
        if (other.hasInfo()) {
          mergeInfo(other.getInfo());
        }
        if (other.hasState()) {
          setState(other.getState());
        }
        if (other.hasCommitTs()) {
          setCommitTs(other.getCommitTs());
        }
        if (other.hasGlobalCommitTs()) {
          setGlobalCommitTs(other.getGlobalCommitTs());
        }
        if (other.hasLastKeepAliveTime()) {
          setLastKeepAliveTime(other.getLastKeepAliveTime());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasInfo()) {
          
          return false;
        }
        if (!hasState()) {
          
          return false;
        }
        if (!getInfo().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.splicemachine.si.coprocessor.TxnMessage.Txn parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.splicemachine.si.coprocessor.TxnMessage.Txn) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required .TxnInfo info = 1;
      private com.splicemachine.si.coprocessor.TxnMessage.TxnInfo info_ = com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.splicemachine.si.coprocessor.TxnMessage.TxnInfo, com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.Builder, com.splicemachine.si.coprocessor.TxnMessage.TxnInfoOrBuilder> infoBuilder_;
      /**
       * <code>required .TxnInfo info = 1;</code>
       *
       * <pre>
       *the txn information for this transaction
       * </pre>
       */
      public boolean hasInfo() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .TxnInfo info = 1;</code>
       *
       * <pre>
       *the txn information for this transaction
       * </pre>
       */
      public com.splicemachine.si.coprocessor.TxnMessage.TxnInfo getInfo() {
        if (infoBuilder_ == null) {
          return info_;
        } else {
          return infoBuilder_.getMessage();
        }
      }
      /**
       * <code>required .TxnInfo info = 1;</code>
       *
       * <pre>
       *the txn information for this transaction
       * </pre>
       */
      public Builder setInfo(com.splicemachine.si.coprocessor.TxnMessage.TxnInfo value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          info_ = value;
          onChanged();
        } else {
          infoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .TxnInfo info = 1;</code>
       *
       * <pre>
       *the txn information for this transaction
       * </pre>
       */
      public Builder setInfo(
          com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.Builder builderForValue) {
        if (infoBuilder_ == null) {
          info_ = builderForValue.build();
          onChanged();
        } else {
          infoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .TxnInfo info = 1;</code>
       *
       * <pre>
       *the txn information for this transaction
       * </pre>
       */
      public Builder mergeInfo(com.splicemachine.si.coprocessor.TxnMessage.TxnInfo value) {
        if (infoBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              info_ != com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.getDefaultInstance()) {
            info_ =
              com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.newBuilder(info_).mergeFrom(value).buildPartial();
          } else {
            info_ = value;
          }
          onChanged();
        } else {
          infoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .TxnInfo info = 1;</code>
       *
       * <pre>
       *the txn information for this transaction
       * </pre>
       */
      public Builder clearInfo() {
        if (infoBuilder_ == null) {
          info_ = com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.getDefaultInstance();
          onChanged();
        } else {
          infoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .TxnInfo info = 1;</code>
       *
       * <pre>
       *the txn information for this transaction
       * </pre>
       */
      public com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.Builder getInfoBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>required .TxnInfo info = 1;</code>
       *
       * <pre>
       *the txn information for this transaction
       * </pre>
       */
      public com.splicemachine.si.coprocessor.TxnMessage.TxnInfoOrBuilder getInfoOrBuilder() {
        if (infoBuilder_ != null) {
          return infoBuilder_.getMessageOrBuilder();
        } else {
          return info_;
        }
      }
      /**
       * <code>required .TxnInfo info = 1;</code>
       *
       * <pre>
       *the txn information for this transaction
       * </pre>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.splicemachine.si.coprocessor.TxnMessage.TxnInfo, com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.Builder, com.splicemachine.si.coprocessor.TxnMessage.TxnInfoOrBuilder> 
          getInfoFieldBuilder() {
        if (infoBuilder_ == null) {
          infoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.splicemachine.si.coprocessor.TxnMessage.TxnInfo, com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.Builder, com.splicemachine.si.coprocessor.TxnMessage.TxnInfoOrBuilder>(
                  info_,
                  getParentForChildren(),
                  isClean());
          info_ = null;
        }
        return infoBuilder_;
      }

      // required uint32 state = 2;
      private int state_ ;
      /**
       * <code>required uint32 state = 2;</code>
       *
       * <pre>
       *
       * use a varint to represent the state. This state
       * code corresponds to Txn.State's encode()/decode()
       * methods.
       * </pre>
       */
      public boolean hasState() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 state = 2;</code>
       *
       * <pre>
       *
       * use a varint to represent the state. This state
       * code corresponds to Txn.State's encode()/decode()
       * methods.
       * </pre>
       */
      public int getState() {
        return state_;
      }
      /**
       * <code>required uint32 state = 2;</code>
       *
       * <pre>
       *
       * use a varint to represent the state. This state
       * code corresponds to Txn.State's encode()/decode()
       * methods.
       * </pre>
       */
      public Builder setState(int value) {
        bitField0_ |= 0x00000002;
        state_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 state = 2;</code>
       *
       * <pre>
       *
       * use a varint to represent the state. This state
       * code corresponds to Txn.State's encode()/decode()
       * methods.
       * </pre>
       */
      public Builder clearState() {
        bitField0_ = (bitField0_ & ~0x00000002);
        state_ = 0;
        onChanged();
        return this;
      }

      // optional int64 commitTs = 3 [default = -1];
      private long commitTs_ = -1L;
      /**
       * <code>optional int64 commitTs = 3 [default = -1];</code>
       *
       * <pre>
       *if not present, then state should NOT be committed
       * </pre>
       */
      public boolean hasCommitTs() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int64 commitTs = 3 [default = -1];</code>
       *
       * <pre>
       *if not present, then state should NOT be committed
       * </pre>
       */
      public long getCommitTs() {
        return commitTs_;
      }
      /**
       * <code>optional int64 commitTs = 3 [default = -1];</code>
       *
       * <pre>
       *if not present, then state should NOT be committed
       * </pre>
       */
      public Builder setCommitTs(long value) {
        bitField0_ |= 0x00000004;
        commitTs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 commitTs = 3 [default = -1];</code>
       *
       * <pre>
       *if not present, then state should NOT be committed
       * </pre>
       */
      public Builder clearCommitTs() {
        bitField0_ = (bitField0_ & ~0x00000004);
        commitTs_ = -1L;
        onChanged();
        return this;
      }

      // optional int64 globalCommitTs = 4 [default = -1];
      private long globalCommitTs_ = -1L;
      /**
       * <code>optional int64 globalCommitTs = 4 [default = -1];</code>
       *
       * <pre>
       *if not present, effectiveCommitTimestamp() will inherit from parent
       * </pre>
       */
      public boolean hasGlobalCommitTs() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int64 globalCommitTs = 4 [default = -1];</code>
       *
       * <pre>
       *if not present, effectiveCommitTimestamp() will inherit from parent
       * </pre>
       */
      public long getGlobalCommitTs() {
        return globalCommitTs_;
      }
      /**
       * <code>optional int64 globalCommitTs = 4 [default = -1];</code>
       *
       * <pre>
       *if not present, effectiveCommitTimestamp() will inherit from parent
       * </pre>
       */
      public Builder setGlobalCommitTs(long value) {
        bitField0_ |= 0x00000008;
        globalCommitTs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 globalCommitTs = 4 [default = -1];</code>
       *
       * <pre>
       *if not present, effectiveCommitTimestamp() will inherit from parent
       * </pre>
       */
      public Builder clearGlobalCommitTs() {
        bitField0_ = (bitField0_ & ~0x00000008);
        globalCommitTs_ = -1L;
        onChanged();
        return this;
      }

      // optional int64 lastKeepAliveTime = 5;
      private long lastKeepAliveTime_ ;
      /**
       * <code>optional int64 lastKeepAliveTime = 5;</code>
       */
      public boolean hasLastKeepAliveTime() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int64 lastKeepAliveTime = 5;</code>
       */
      public long getLastKeepAliveTime() {
        return lastKeepAliveTime_;
      }
      /**
       * <code>optional int64 lastKeepAliveTime = 5;</code>
       */
      public Builder setLastKeepAliveTime(long value) {
        bitField0_ |= 0x00000010;
        lastKeepAliveTime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 lastKeepAliveTime = 5;</code>
       */
      public Builder clearLastKeepAliveTime() {
        bitField0_ = (bitField0_ & ~0x00000010);
        lastKeepAliveTime_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:Txn)
    }

    static {
      defaultInstance = new Txn(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:Txn)
  }

  public interface VoidResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {
  }
  /**
   * Protobuf type {@code VoidResponse}
   *
   * <pre>
   *
   * A Filler response that is returned when you don't want to
   * actually return anything from the message
   * </pre>
   */
  public static final class VoidResponse extends
      com.google.protobuf.GeneratedMessage
      implements VoidResponseOrBuilder {
    // Use VoidResponse.newBuilder() to construct.
    private VoidResponse(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private VoidResponse(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final VoidResponse defaultInstance;
    public static VoidResponse getDefaultInstance() {
      return defaultInstance;
    }

    public VoidResponse getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private VoidResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_VoidResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_VoidResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.class, com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.Builder.class);
    }

    public static com.google.protobuf.Parser<VoidResponse> PARSER =
        new com.google.protobuf.AbstractParser<VoidResponse>() {
      public VoidResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new VoidResponse(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<VoidResponse> getParserForType() {
      return PARSER;
    }

    private void initFields() {
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.splicemachine.si.coprocessor.TxnMessage.VoidResponse)) {
        return super.equals(obj);
      }
      com.splicemachine.si.coprocessor.TxnMessage.VoidResponse other = (com.splicemachine.si.coprocessor.TxnMessage.VoidResponse) obj;

      boolean result = true;
      result = result &&
          getUnknownFields().equals(other.getUnknownFields());
      return result;
    }

    private int memoizedHashCode = 0;
    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.splicemachine.si.coprocessor.TxnMessage.VoidResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.VoidResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.VoidResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.VoidResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.VoidResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.VoidResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.VoidResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.VoidResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.VoidResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.VoidResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.splicemachine.si.coprocessor.TxnMessage.VoidResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code VoidResponse}
     *
     * <pre>
     *
     * A Filler response that is returned when you don't want to
     * actually return anything from the message
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.splicemachine.si.coprocessor.TxnMessage.VoidResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_VoidResponse_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_VoidResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.class, com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.Builder.class);
      }

      // Construct using com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_VoidResponse_descriptor;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.VoidResponse getDefaultInstanceForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.getDefaultInstance();
      }

      public com.splicemachine.si.coprocessor.TxnMessage.VoidResponse build() {
        com.splicemachine.si.coprocessor.TxnMessage.VoidResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.VoidResponse buildPartial() {
        com.splicemachine.si.coprocessor.TxnMessage.VoidResponse result = new com.splicemachine.si.coprocessor.TxnMessage.VoidResponse(this);
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.splicemachine.si.coprocessor.TxnMessage.VoidResponse) {
          return mergeFrom((com.splicemachine.si.coprocessor.TxnMessage.VoidResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.splicemachine.si.coprocessor.TxnMessage.VoidResponse other) {
        if (other == com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.getDefaultInstance()) return this;
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.splicemachine.si.coprocessor.TxnMessage.VoidResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.splicemachine.si.coprocessor.TxnMessage.VoidResponse) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:VoidResponse)
    }

    static {
      defaultInstance = new VoidResponse(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:VoidResponse)
  }

  public interface ElevateRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint64 txnId = 1;
    /**
     * <code>required uint64 txnId = 1;</code>
     */
    boolean hasTxnId();
    /**
     * <code>required uint64 txnId = 1;</code>
     */
    long getTxnId();

    // required bytes newDestinationTable = 2;
    /**
     * <code>required bytes newDestinationTable = 2;</code>
     */
    boolean hasNewDestinationTable();
    /**
     * <code>required bytes newDestinationTable = 2;</code>
     */
    com.google.protobuf.ByteString getNewDestinationTable();
  }
  /**
   * Protobuf type {@code ElevateRequest}
   */
  public static final class ElevateRequest extends
      com.google.protobuf.GeneratedMessage
      implements ElevateRequestOrBuilder {
    // Use ElevateRequest.newBuilder() to construct.
    private ElevateRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ElevateRequest(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ElevateRequest defaultInstance;
    public static ElevateRequest getDefaultInstance() {
      return defaultInstance;
    }

    public ElevateRequest getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ElevateRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              txnId_ = input.readUInt64();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              newDestinationTable_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ElevateRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ElevateRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest.class, com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest.Builder.class);
    }

    public static com.google.protobuf.Parser<ElevateRequest> PARSER =
        new com.google.protobuf.AbstractParser<ElevateRequest>() {
      public ElevateRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ElevateRequest(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ElevateRequest> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint64 txnId = 1;
    public static final int TXNID_FIELD_NUMBER = 1;
    private long txnId_;
    /**
     * <code>required uint64 txnId = 1;</code>
     */
    public boolean hasTxnId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 txnId = 1;</code>
     */
    public long getTxnId() {
      return txnId_;
    }

    // required bytes newDestinationTable = 2;
    public static final int NEWDESTINATIONTABLE_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString newDestinationTable_;
    /**
     * <code>required bytes newDestinationTable = 2;</code>
     */
    public boolean hasNewDestinationTable() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required bytes newDestinationTable = 2;</code>
     */
    public com.google.protobuf.ByteString getNewDestinationTable() {
      return newDestinationTable_;
    }

    private void initFields() {
      txnId_ = 0L;
      newDestinationTable_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasTxnId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNewDestinationTable()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, txnId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, newDestinationTable_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, txnId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, newDestinationTable_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest)) {
        return super.equals(obj);
      }
      com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest other = (com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest) obj;

      boolean result = true;
      result = result && (hasTxnId() == other.hasTxnId());
      if (hasTxnId()) {
        result = result && (getTxnId()
            == other.getTxnId());
      }
      result = result && (hasNewDestinationTable() == other.hasNewDestinationTable());
      if (hasNewDestinationTable()) {
        result = result && getNewDestinationTable()
            .equals(other.getNewDestinationTable());
      }
      result = result &&
          getUnknownFields().equals(other.getUnknownFields());
      return result;
    }

    private int memoizedHashCode = 0;
    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasTxnId()) {
        hash = (37 * hash) + TXNID_FIELD_NUMBER;
        hash = (53 * hash) + hashLong(getTxnId());
      }
      if (hasNewDestinationTable()) {
        hash = (37 * hash) + NEWDESTINATIONTABLE_FIELD_NUMBER;
        hash = (53 * hash) + getNewDestinationTable().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ElevateRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.splicemachine.si.coprocessor.TxnMessage.ElevateRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ElevateRequest_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ElevateRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest.class, com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest.Builder.class);
      }

      // Construct using com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        txnId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        newDestinationTable_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ElevateRequest_descriptor;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest getDefaultInstanceForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest.getDefaultInstance();
      }

      public com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest build() {
        com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest buildPartial() {
        com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest result = new com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.txnId_ = txnId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.newDestinationTable_ = newDestinationTable_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest) {
          return mergeFrom((com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest other) {
        if (other == com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest.getDefaultInstance()) return this;
        if (other.hasTxnId()) {
          setTxnId(other.getTxnId());
        }
        if (other.hasNewDestinationTable()) {
          setNewDestinationTable(other.getNewDestinationTable());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTxnId()) {
          
          return false;
        }
        if (!hasNewDestinationTable()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint64 txnId = 1;
      private long txnId_ ;
      /**
       * <code>required uint64 txnId = 1;</code>
       */
      public boolean hasTxnId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 txnId = 1;</code>
       */
      public long getTxnId() {
        return txnId_;
      }
      /**
       * <code>required uint64 txnId = 1;</code>
       */
      public Builder setTxnId(long value) {
        bitField0_ |= 0x00000001;
        txnId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 txnId = 1;</code>
       */
      public Builder clearTxnId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        txnId_ = 0L;
        onChanged();
        return this;
      }

      // required bytes newDestinationTable = 2;
      private com.google.protobuf.ByteString newDestinationTable_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes newDestinationTable = 2;</code>
       */
      public boolean hasNewDestinationTable() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bytes newDestinationTable = 2;</code>
       */
      public com.google.protobuf.ByteString getNewDestinationTable() {
        return newDestinationTable_;
      }
      /**
       * <code>required bytes newDestinationTable = 2;</code>
       */
      public Builder setNewDestinationTable(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        newDestinationTable_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes newDestinationTable = 2;</code>
       */
      public Builder clearNewDestinationTable() {
        bitField0_ = (bitField0_ & ~0x00000002);
        newDestinationTable_ = getDefaultInstance().getNewDestinationTable();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ElevateRequest)
    }

    static {
      defaultInstance = new ElevateRequest(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ElevateRequest)
  }

  public interface CreateChildRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint64 parentTxnId = 1;
    /**
     * <code>required uint64 parentTxnId = 1;</code>
     */
    boolean hasParentTxnId();
    /**
     * <code>required uint64 parentTxnId = 1;</code>
     */
    long getParentTxnId();

    // required .TxnInfo info = 2;
    /**
     * <code>required .TxnInfo info = 2;</code>
     */
    boolean hasInfo();
    /**
     * <code>required .TxnInfo info = 2;</code>
     */
    com.splicemachine.si.coprocessor.TxnMessage.TxnInfo getInfo();
    /**
     * <code>required .TxnInfo info = 2;</code>
     */
    com.splicemachine.si.coprocessor.TxnMessage.TxnInfoOrBuilder getInfoOrBuilder();
  }
  /**
   * Protobuf type {@code CreateChildRequest}
   */
  public static final class CreateChildRequest extends
      com.google.protobuf.GeneratedMessage
      implements CreateChildRequestOrBuilder {
    // Use CreateChildRequest.newBuilder() to construct.
    private CreateChildRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private CreateChildRequest(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final CreateChildRequest defaultInstance;
    public static CreateChildRequest getDefaultInstance() {
      return defaultInstance;
    }

    public CreateChildRequest getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private CreateChildRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              parentTxnId_ = input.readUInt64();
              break;
            }
            case 18: {
              com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = info_.toBuilder();
              }
              info_ = input.readMessage(com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(info_);
                info_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_CreateChildRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_CreateChildRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest.class, com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest.Builder.class);
    }

    public static com.google.protobuf.Parser<CreateChildRequest> PARSER =
        new com.google.protobuf.AbstractParser<CreateChildRequest>() {
      public CreateChildRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CreateChildRequest(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<CreateChildRequest> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint64 parentTxnId = 1;
    public static final int PARENTTXNID_FIELD_NUMBER = 1;
    private long parentTxnId_;
    /**
     * <code>required uint64 parentTxnId = 1;</code>
     */
    public boolean hasParentTxnId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 parentTxnId = 1;</code>
     */
    public long getParentTxnId() {
      return parentTxnId_;
    }

    // required .TxnInfo info = 2;
    public static final int INFO_FIELD_NUMBER = 2;
    private com.splicemachine.si.coprocessor.TxnMessage.TxnInfo info_;
    /**
     * <code>required .TxnInfo info = 2;</code>
     */
    public boolean hasInfo() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .TxnInfo info = 2;</code>
     */
    public com.splicemachine.si.coprocessor.TxnMessage.TxnInfo getInfo() {
      return info_;
    }
    /**
     * <code>required .TxnInfo info = 2;</code>
     */
    public com.splicemachine.si.coprocessor.TxnMessage.TxnInfoOrBuilder getInfoOrBuilder() {
      return info_;
    }

    private void initFields() {
      parentTxnId_ = 0L;
      info_ = com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasParentTxnId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasInfo()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getInfo().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, parentTxnId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, info_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, parentTxnId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, info_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest)) {
        return super.equals(obj);
      }
      com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest other = (com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest) obj;

      boolean result = true;
      result = result && (hasParentTxnId() == other.hasParentTxnId());
      if (hasParentTxnId()) {
        result = result && (getParentTxnId()
            == other.getParentTxnId());
      }
      result = result && (hasInfo() == other.hasInfo());
      if (hasInfo()) {
        result = result && getInfo()
            .equals(other.getInfo());
      }
      result = result &&
          getUnknownFields().equals(other.getUnknownFields());
      return result;
    }

    private int memoizedHashCode = 0;
    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasParentTxnId()) {
        hash = (37 * hash) + PARENTTXNID_FIELD_NUMBER;
        hash = (53 * hash) + hashLong(getParentTxnId());
      }
      if (hasInfo()) {
        hash = (37 * hash) + INFO_FIELD_NUMBER;
        hash = (53 * hash) + getInfo().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code CreateChildRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_CreateChildRequest_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_CreateChildRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest.class, com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest.Builder.class);
      }

      // Construct using com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getInfoFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        parentTxnId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (infoBuilder_ == null) {
          info_ = com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.getDefaultInstance();
        } else {
          infoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_CreateChildRequest_descriptor;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest getDefaultInstanceForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest.getDefaultInstance();
      }

      public com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest build() {
        com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest buildPartial() {
        com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest result = new com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.parentTxnId_ = parentTxnId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (infoBuilder_ == null) {
          result.info_ = info_;
        } else {
          result.info_ = infoBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest) {
          return mergeFrom((com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest other) {
        if (other == com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest.getDefaultInstance()) return this;
        if (other.hasParentTxnId()) {
          setParentTxnId(other.getParentTxnId());
        }
        if (other.hasInfo()) {
          mergeInfo(other.getInfo());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasParentTxnId()) {
          
          return false;
        }
        if (!hasInfo()) {
          
          return false;
        }
        if (!getInfo().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint64 parentTxnId = 1;
      private long parentTxnId_ ;
      /**
       * <code>required uint64 parentTxnId = 1;</code>
       */
      public boolean hasParentTxnId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 parentTxnId = 1;</code>
       */
      public long getParentTxnId() {
        return parentTxnId_;
      }
      /**
       * <code>required uint64 parentTxnId = 1;</code>
       */
      public Builder setParentTxnId(long value) {
        bitField0_ |= 0x00000001;
        parentTxnId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 parentTxnId = 1;</code>
       */
      public Builder clearParentTxnId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        parentTxnId_ = 0L;
        onChanged();
        return this;
      }

      // required .TxnInfo info = 2;
      private com.splicemachine.si.coprocessor.TxnMessage.TxnInfo info_ = com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          com.splicemachine.si.coprocessor.TxnMessage.TxnInfo, com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.Builder, com.splicemachine.si.coprocessor.TxnMessage.TxnInfoOrBuilder> infoBuilder_;
      /**
       * <code>required .TxnInfo info = 2;</code>
       */
      public boolean hasInfo() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .TxnInfo info = 2;</code>
       */
      public com.splicemachine.si.coprocessor.TxnMessage.TxnInfo getInfo() {
        if (infoBuilder_ == null) {
          return info_;
        } else {
          return infoBuilder_.getMessage();
        }
      }
      /**
       * <code>required .TxnInfo info = 2;</code>
       */
      public Builder setInfo(com.splicemachine.si.coprocessor.TxnMessage.TxnInfo value) {
        if (infoBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          info_ = value;
          onChanged();
        } else {
          infoBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .TxnInfo info = 2;</code>
       */
      public Builder setInfo(
          com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.Builder builderForValue) {
        if (infoBuilder_ == null) {
          info_ = builderForValue.build();
          onChanged();
        } else {
          infoBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .TxnInfo info = 2;</code>
       */
      public Builder mergeInfo(com.splicemachine.si.coprocessor.TxnMessage.TxnInfo value) {
        if (infoBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              info_ != com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.getDefaultInstance()) {
            info_ =
              com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.newBuilder(info_).mergeFrom(value).buildPartial();
          } else {
            info_ = value;
          }
          onChanged();
        } else {
          infoBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .TxnInfo info = 2;</code>
       */
      public Builder clearInfo() {
        if (infoBuilder_ == null) {
          info_ = com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.getDefaultInstance();
          onChanged();
        } else {
          infoBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .TxnInfo info = 2;</code>
       */
      public com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.Builder getInfoBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getInfoFieldBuilder().getBuilder();
      }
      /**
       * <code>required .TxnInfo info = 2;</code>
       */
      public com.splicemachine.si.coprocessor.TxnMessage.TxnInfoOrBuilder getInfoOrBuilder() {
        if (infoBuilder_ != null) {
          return infoBuilder_.getMessageOrBuilder();
        } else {
          return info_;
        }
      }
      /**
       * <code>required .TxnInfo info = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.splicemachine.si.coprocessor.TxnMessage.TxnInfo, com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.Builder, com.splicemachine.si.coprocessor.TxnMessage.TxnInfoOrBuilder> 
          getInfoFieldBuilder() {
        if (infoBuilder_ == null) {
          infoBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.splicemachine.si.coprocessor.TxnMessage.TxnInfo, com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.Builder, com.splicemachine.si.coprocessor.TxnMessage.TxnInfoOrBuilder>(
                  info_,
                  getParentForChildren(),
                  isClean());
          info_ = null;
        }
        return infoBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:CreateChildRequest)
    }

    static {
      defaultInstance = new CreateChildRequest(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:CreateChildRequest)
  }

  public interface ActionResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional uint64 commitTs = 1;
    /**
     * <code>optional uint64 commitTs = 1;</code>
     */
    boolean hasCommitTs();
    /**
     * <code>optional uint64 commitTs = 1;</code>
     */
    long getCommitTs();

    // optional bool continue = 2;
    /**
     * <code>optional bool continue = 2;</code>
     */
    boolean hasContinue();
    /**
     * <code>optional bool continue = 2;</code>
     */
    boolean getContinue();
  }
  /**
   * Protobuf type {@code ActionResponse}
   */
  public static final class ActionResponse extends
      com.google.protobuf.GeneratedMessage
      implements ActionResponseOrBuilder {
    // Use ActionResponse.newBuilder() to construct.
    private ActionResponse(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ActionResponse(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ActionResponse defaultInstance;
    public static ActionResponse getDefaultInstance() {
      return defaultInstance;
    }

    public ActionResponse getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ActionResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              commitTs_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              continue_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActionResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActionResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.splicemachine.si.coprocessor.TxnMessage.ActionResponse.class, com.splicemachine.si.coprocessor.TxnMessage.ActionResponse.Builder.class);
    }

    public static com.google.protobuf.Parser<ActionResponse> PARSER =
        new com.google.protobuf.AbstractParser<ActionResponse>() {
      public ActionResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ActionResponse(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ActionResponse> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional uint64 commitTs = 1;
    public static final int COMMITTS_FIELD_NUMBER = 1;
    private long commitTs_;
    /**
     * <code>optional uint64 commitTs = 1;</code>
     */
    public boolean hasCommitTs() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint64 commitTs = 1;</code>
     */
    public long getCommitTs() {
      return commitTs_;
    }

    // optional bool continue = 2;
    public static final int CONTINUE_FIELD_NUMBER = 2;
    private boolean continue_;
    /**
     * <code>optional bool continue = 2;</code>
     */
    public boolean hasContinue() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool continue = 2;</code>
     */
    public boolean getContinue() {
      return continue_;
    }

    private void initFields() {
      commitTs_ = 0L;
      continue_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, commitTs_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, continue_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, commitTs_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, continue_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.splicemachine.si.coprocessor.TxnMessage.ActionResponse)) {
        return super.equals(obj);
      }
      com.splicemachine.si.coprocessor.TxnMessage.ActionResponse other = (com.splicemachine.si.coprocessor.TxnMessage.ActionResponse) obj;

      boolean result = true;
      result = result && (hasCommitTs() == other.hasCommitTs());
      if (hasCommitTs()) {
        result = result && (getCommitTs()
            == other.getCommitTs());
      }
      result = result && (hasContinue() == other.hasContinue());
      if (hasContinue()) {
        result = result && (getContinue()
            == other.getContinue());
      }
      result = result &&
          getUnknownFields().equals(other.getUnknownFields());
      return result;
    }

    private int memoizedHashCode = 0;
    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasCommitTs()) {
        hash = (37 * hash) + COMMITTS_FIELD_NUMBER;
        hash = (53 * hash) + hashLong(getCommitTs());
      }
      if (hasContinue()) {
        hash = (37 * hash) + CONTINUE_FIELD_NUMBER;
        hash = (53 * hash) + hashBoolean(getContinue());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.splicemachine.si.coprocessor.TxnMessage.ActionResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActionResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActionResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActionResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActionResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActionResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActionResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActionResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActionResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActionResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.splicemachine.si.coprocessor.TxnMessage.ActionResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ActionResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.splicemachine.si.coprocessor.TxnMessage.ActionResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActionResponse_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActionResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.splicemachine.si.coprocessor.TxnMessage.ActionResponse.class, com.splicemachine.si.coprocessor.TxnMessage.ActionResponse.Builder.class);
      }

      // Construct using com.splicemachine.si.coprocessor.TxnMessage.ActionResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        commitTs_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        continue_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActionResponse_descriptor;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.ActionResponse getDefaultInstanceForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.ActionResponse.getDefaultInstance();
      }

      public com.splicemachine.si.coprocessor.TxnMessage.ActionResponse build() {
        com.splicemachine.si.coprocessor.TxnMessage.ActionResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.ActionResponse buildPartial() {
        com.splicemachine.si.coprocessor.TxnMessage.ActionResponse result = new com.splicemachine.si.coprocessor.TxnMessage.ActionResponse(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.commitTs_ = commitTs_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.continue_ = continue_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.splicemachine.si.coprocessor.TxnMessage.ActionResponse) {
          return mergeFrom((com.splicemachine.si.coprocessor.TxnMessage.ActionResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.splicemachine.si.coprocessor.TxnMessage.ActionResponse other) {
        if (other == com.splicemachine.si.coprocessor.TxnMessage.ActionResponse.getDefaultInstance()) return this;
        if (other.hasCommitTs()) {
          setCommitTs(other.getCommitTs());
        }
        if (other.hasContinue()) {
          setContinue(other.getContinue());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.splicemachine.si.coprocessor.TxnMessage.ActionResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.splicemachine.si.coprocessor.TxnMessage.ActionResponse) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional uint64 commitTs = 1;
      private long commitTs_ ;
      /**
       * <code>optional uint64 commitTs = 1;</code>
       */
      public boolean hasCommitTs() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint64 commitTs = 1;</code>
       */
      public long getCommitTs() {
        return commitTs_;
      }
      /**
       * <code>optional uint64 commitTs = 1;</code>
       */
      public Builder setCommitTs(long value) {
        bitField0_ |= 0x00000001;
        commitTs_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 commitTs = 1;</code>
       */
      public Builder clearCommitTs() {
        bitField0_ = (bitField0_ & ~0x00000001);
        commitTs_ = 0L;
        onChanged();
        return this;
      }

      // optional bool continue = 2;
      private boolean continue_ ;
      /**
       * <code>optional bool continue = 2;</code>
       */
      public boolean hasContinue() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool continue = 2;</code>
       */
      public boolean getContinue() {
        return continue_;
      }
      /**
       * <code>optional bool continue = 2;</code>
       */
      public Builder setContinue(boolean value) {
        bitField0_ |= 0x00000002;
        continue_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool continue = 2;</code>
       */
      public Builder clearContinue() {
        bitField0_ = (bitField0_ & ~0x00000002);
        continue_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ActionResponse)
    }

    static {
      defaultInstance = new ActionResponse(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ActionResponse)
  }

  public interface TxnLifecycleMessageOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint64 txnId = 1;
    /**
     * <code>required uint64 txnId = 1;</code>
     */
    boolean hasTxnId();
    /**
     * <code>required uint64 txnId = 1;</code>
     */
    long getTxnId();

    // required .LifecycleAction action = 2;
    /**
     * <code>required .LifecycleAction action = 2;</code>
     */
    boolean hasAction();
    /**
     * <code>required .LifecycleAction action = 2;</code>
     */
    com.splicemachine.si.coprocessor.TxnMessage.LifecycleAction getAction();
  }
  /**
   * Protobuf type {@code TxnLifecycleMessage}
   */
  public static final class TxnLifecycleMessage extends
      com.google.protobuf.GeneratedMessage
      implements TxnLifecycleMessageOrBuilder {
    // Use TxnLifecycleMessage.newBuilder() to construct.
    private TxnLifecycleMessage(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TxnLifecycleMessage(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TxnLifecycleMessage defaultInstance;
    public static TxnLifecycleMessage getDefaultInstance() {
      return defaultInstance;
    }

    public TxnLifecycleMessage getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TxnLifecycleMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              txnId_ = input.readUInt64();
              break;
            }
            case 16: {
              int rawValue = input.readEnum();
              com.splicemachine.si.coprocessor.TxnMessage.LifecycleAction value = com.splicemachine.si.coprocessor.TxnMessage.LifecycleAction.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(2, rawValue);
              } else {
                bitField0_ |= 0x00000002;
                action_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_TxnLifecycleMessage_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_TxnLifecycleMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage.class, com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage.Builder.class);
    }

    public static com.google.protobuf.Parser<TxnLifecycleMessage> PARSER =
        new com.google.protobuf.AbstractParser<TxnLifecycleMessage>() {
      public TxnLifecycleMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TxnLifecycleMessage(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TxnLifecycleMessage> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint64 txnId = 1;
    public static final int TXNID_FIELD_NUMBER = 1;
    private long txnId_;
    /**
     * <code>required uint64 txnId = 1;</code>
     */
    public boolean hasTxnId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 txnId = 1;</code>
     */
    public long getTxnId() {
      return txnId_;
    }

    // required .LifecycleAction action = 2;
    public static final int ACTION_FIELD_NUMBER = 2;
    private com.splicemachine.si.coprocessor.TxnMessage.LifecycleAction action_;
    /**
     * <code>required .LifecycleAction action = 2;</code>
     */
    public boolean hasAction() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .LifecycleAction action = 2;</code>
     */
    public com.splicemachine.si.coprocessor.TxnMessage.LifecycleAction getAction() {
      return action_;
    }

    private void initFields() {
      txnId_ = 0L;
      action_ = com.splicemachine.si.coprocessor.TxnMessage.LifecycleAction.COMMIT;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasTxnId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasAction()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, txnId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeEnum(2, action_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, txnId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, action_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage)) {
        return super.equals(obj);
      }
      com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage other = (com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage) obj;

      boolean result = true;
      result = result && (hasTxnId() == other.hasTxnId());
      if (hasTxnId()) {
        result = result && (getTxnId()
            == other.getTxnId());
      }
      result = result && (hasAction() == other.hasAction());
      if (hasAction()) {
        result = result &&
            (getAction() == other.getAction());
      }
      result = result &&
          getUnknownFields().equals(other.getUnknownFields());
      return result;
    }

    private int memoizedHashCode = 0;
    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasTxnId()) {
        hash = (37 * hash) + TXNID_FIELD_NUMBER;
        hash = (53 * hash) + hashLong(getTxnId());
      }
      if (hasAction()) {
        hash = (37 * hash) + ACTION_FIELD_NUMBER;
        hash = (53 * hash) + hashEnum(getAction());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code TxnLifecycleMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_TxnLifecycleMessage_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_TxnLifecycleMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage.class, com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage.Builder.class);
      }

      // Construct using com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        txnId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        action_ = com.splicemachine.si.coprocessor.TxnMessage.LifecycleAction.COMMIT;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_TxnLifecycleMessage_descriptor;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage getDefaultInstanceForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage.getDefaultInstance();
      }

      public com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage build() {
        com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage buildPartial() {
        com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage result = new com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.txnId_ = txnId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.action_ = action_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage) {
          return mergeFrom((com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage other) {
        if (other == com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage.getDefaultInstance()) return this;
        if (other.hasTxnId()) {
          setTxnId(other.getTxnId());
        }
        if (other.hasAction()) {
          setAction(other.getAction());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTxnId()) {
          
          return false;
        }
        if (!hasAction()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint64 txnId = 1;
      private long txnId_ ;
      /**
       * <code>required uint64 txnId = 1;</code>
       */
      public boolean hasTxnId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 txnId = 1;</code>
       */
      public long getTxnId() {
        return txnId_;
      }
      /**
       * <code>required uint64 txnId = 1;</code>
       */
      public Builder setTxnId(long value) {
        bitField0_ |= 0x00000001;
        txnId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 txnId = 1;</code>
       */
      public Builder clearTxnId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        txnId_ = 0L;
        onChanged();
        return this;
      }

      // required .LifecycleAction action = 2;
      private com.splicemachine.si.coprocessor.TxnMessage.LifecycleAction action_ = com.splicemachine.si.coprocessor.TxnMessage.LifecycleAction.COMMIT;
      /**
       * <code>required .LifecycleAction action = 2;</code>
       */
      public boolean hasAction() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .LifecycleAction action = 2;</code>
       */
      public com.splicemachine.si.coprocessor.TxnMessage.LifecycleAction getAction() {
        return action_;
      }
      /**
       * <code>required .LifecycleAction action = 2;</code>
       */
      public Builder setAction(com.splicemachine.si.coprocessor.TxnMessage.LifecycleAction value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000002;
        action_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .LifecycleAction action = 2;</code>
       */
      public Builder clearAction() {
        bitField0_ = (bitField0_ & ~0x00000002);
        action_ = com.splicemachine.si.coprocessor.TxnMessage.LifecycleAction.COMMIT;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:TxnLifecycleMessage)
    }

    static {
      defaultInstance = new TxnLifecycleMessage(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:TxnLifecycleMessage)
  }

  public interface TxnRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // required uint64 txnId = 1;
    /**
     * <code>required uint64 txnId = 1;</code>
     */
    boolean hasTxnId();
    /**
     * <code>required uint64 txnId = 1;</code>
     */
    long getTxnId();

    // optional bool includeDestinationTables = 2;
    /**
     * <code>optional bool includeDestinationTables = 2;</code>
     */
    boolean hasIncludeDestinationTables();
    /**
     * <code>optional bool includeDestinationTables = 2;</code>
     */
    boolean getIncludeDestinationTables();
  }
  /**
   * Protobuf type {@code TxnRequest}
   */
  public static final class TxnRequest extends
      com.google.protobuf.GeneratedMessage
      implements TxnRequestOrBuilder {
    // Use TxnRequest.newBuilder() to construct.
    private TxnRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TxnRequest(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TxnRequest defaultInstance;
    public static TxnRequest getDefaultInstance() {
      return defaultInstance;
    }

    public TxnRequest getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TxnRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              txnId_ = input.readUInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              includeDestinationTables_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_TxnRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_TxnRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.splicemachine.si.coprocessor.TxnMessage.TxnRequest.class, com.splicemachine.si.coprocessor.TxnMessage.TxnRequest.Builder.class);
    }

    public static com.google.protobuf.Parser<TxnRequest> PARSER =
        new com.google.protobuf.AbstractParser<TxnRequest>() {
      public TxnRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TxnRequest(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TxnRequest> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // required uint64 txnId = 1;
    public static final int TXNID_FIELD_NUMBER = 1;
    private long txnId_;
    /**
     * <code>required uint64 txnId = 1;</code>
     */
    public boolean hasTxnId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 txnId = 1;</code>
     */
    public long getTxnId() {
      return txnId_;
    }

    // optional bool includeDestinationTables = 2;
    public static final int INCLUDEDESTINATIONTABLES_FIELD_NUMBER = 2;
    private boolean includeDestinationTables_;
    /**
     * <code>optional bool includeDestinationTables = 2;</code>
     */
    public boolean hasIncludeDestinationTables() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bool includeDestinationTables = 2;</code>
     */
    public boolean getIncludeDestinationTables() {
      return includeDestinationTables_;
    }

    private void initFields() {
      txnId_ = 0L;
      includeDestinationTables_ = false;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      if (!hasTxnId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, txnId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBool(2, includeDestinationTables_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, txnId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(2, includeDestinationTables_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.splicemachine.si.coprocessor.TxnMessage.TxnRequest)) {
        return super.equals(obj);
      }
      com.splicemachine.si.coprocessor.TxnMessage.TxnRequest other = (com.splicemachine.si.coprocessor.TxnMessage.TxnRequest) obj;

      boolean result = true;
      result = result && (hasTxnId() == other.hasTxnId());
      if (hasTxnId()) {
        result = result && (getTxnId()
            == other.getTxnId());
      }
      result = result && (hasIncludeDestinationTables() == other.hasIncludeDestinationTables());
      if (hasIncludeDestinationTables()) {
        result = result && (getIncludeDestinationTables()
            == other.getIncludeDestinationTables());
      }
      result = result &&
          getUnknownFields().equals(other.getUnknownFields());
      return result;
    }

    private int memoizedHashCode = 0;
    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasTxnId()) {
        hash = (37 * hash) + TXNID_FIELD_NUMBER;
        hash = (53 * hash) + hashLong(getTxnId());
      }
      if (hasIncludeDestinationTables()) {
        hash = (37 * hash) + INCLUDEDESTINATIONTABLES_FIELD_NUMBER;
        hash = (53 * hash) + hashBoolean(getIncludeDestinationTables());
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.splicemachine.si.coprocessor.TxnMessage.TxnRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.TxnRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.splicemachine.si.coprocessor.TxnMessage.TxnRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code TxnRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.splicemachine.si.coprocessor.TxnMessage.TxnRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_TxnRequest_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_TxnRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.splicemachine.si.coprocessor.TxnMessage.TxnRequest.class, com.splicemachine.si.coprocessor.TxnMessage.TxnRequest.Builder.class);
      }

      // Construct using com.splicemachine.si.coprocessor.TxnMessage.TxnRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        txnId_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        includeDestinationTables_ = false;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_TxnRequest_descriptor;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.TxnRequest getDefaultInstanceForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.TxnRequest.getDefaultInstance();
      }

      public com.splicemachine.si.coprocessor.TxnMessage.TxnRequest build() {
        com.splicemachine.si.coprocessor.TxnMessage.TxnRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.TxnRequest buildPartial() {
        com.splicemachine.si.coprocessor.TxnMessage.TxnRequest result = new com.splicemachine.si.coprocessor.TxnMessage.TxnRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.txnId_ = txnId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.includeDestinationTables_ = includeDestinationTables_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.splicemachine.si.coprocessor.TxnMessage.TxnRequest) {
          return mergeFrom((com.splicemachine.si.coprocessor.TxnMessage.TxnRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.splicemachine.si.coprocessor.TxnMessage.TxnRequest other) {
        if (other == com.splicemachine.si.coprocessor.TxnMessage.TxnRequest.getDefaultInstance()) return this;
        if (other.hasTxnId()) {
          setTxnId(other.getTxnId());
        }
        if (other.hasIncludeDestinationTables()) {
          setIncludeDestinationTables(other.getIncludeDestinationTables());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTxnId()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.splicemachine.si.coprocessor.TxnMessage.TxnRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.splicemachine.si.coprocessor.TxnMessage.TxnRequest) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // required uint64 txnId = 1;
      private long txnId_ ;
      /**
       * <code>required uint64 txnId = 1;</code>
       */
      public boolean hasTxnId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 txnId = 1;</code>
       */
      public long getTxnId() {
        return txnId_;
      }
      /**
       * <code>required uint64 txnId = 1;</code>
       */
      public Builder setTxnId(long value) {
        bitField0_ |= 0x00000001;
        txnId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 txnId = 1;</code>
       */
      public Builder clearTxnId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        txnId_ = 0L;
        onChanged();
        return this;
      }

      // optional bool includeDestinationTables = 2;
      private boolean includeDestinationTables_ ;
      /**
       * <code>optional bool includeDestinationTables = 2;</code>
       */
      public boolean hasIncludeDestinationTables() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bool includeDestinationTables = 2;</code>
       */
      public boolean getIncludeDestinationTables() {
        return includeDestinationTables_;
      }
      /**
       * <code>optional bool includeDestinationTables = 2;</code>
       */
      public Builder setIncludeDestinationTables(boolean value) {
        bitField0_ |= 0x00000002;
        includeDestinationTables_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool includeDestinationTables = 2;</code>
       */
      public Builder clearIncludeDestinationTables() {
        bitField0_ = (bitField0_ & ~0x00000002);
        includeDestinationTables_ = false;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:TxnRequest)
    }

    static {
      defaultInstance = new TxnRequest(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:TxnRequest)
  }

  public interface ActiveTxnIdResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated uint64 activeTxnIds = 1;
    /**
     * <code>repeated uint64 activeTxnIds = 1;</code>
     */
    java.util.List<java.lang.Long> getActiveTxnIdsList();
    /**
     * <code>repeated uint64 activeTxnIds = 1;</code>
     */
    int getActiveTxnIdsCount();
    /**
     * <code>repeated uint64 activeTxnIds = 1;</code>
     */
    long getActiveTxnIds(int index);
  }
  /**
   * Protobuf type {@code ActiveTxnIdResponse}
   */
  public static final class ActiveTxnIdResponse extends
      com.google.protobuf.GeneratedMessage
      implements ActiveTxnIdResponseOrBuilder {
    // Use ActiveTxnIdResponse.newBuilder() to construct.
    private ActiveTxnIdResponse(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ActiveTxnIdResponse(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ActiveTxnIdResponse defaultInstance;
    public static ActiveTxnIdResponse getDefaultInstance() {
      return defaultInstance;
    }

    public ActiveTxnIdResponse getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ActiveTxnIdResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                activeTxnIds_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              activeTxnIds_.add(input.readUInt64());
              break;
            }
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                activeTxnIds_ = new java.util.ArrayList<java.lang.Long>();
                mutable_bitField0_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                activeTxnIds_.add(input.readUInt64());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          activeTxnIds_ = java.util.Collections.unmodifiableList(activeTxnIds_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActiveTxnIdResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActiveTxnIdResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse.class, com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse.Builder.class);
    }

    public static com.google.protobuf.Parser<ActiveTxnIdResponse> PARSER =
        new com.google.protobuf.AbstractParser<ActiveTxnIdResponse>() {
      public ActiveTxnIdResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ActiveTxnIdResponse(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ActiveTxnIdResponse> getParserForType() {
      return PARSER;
    }

    // repeated uint64 activeTxnIds = 1;
    public static final int ACTIVETXNIDS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Long> activeTxnIds_;
    /**
     * <code>repeated uint64 activeTxnIds = 1;</code>
     */
    public java.util.List<java.lang.Long>
        getActiveTxnIdsList() {
      return activeTxnIds_;
    }
    /**
     * <code>repeated uint64 activeTxnIds = 1;</code>
     */
    public int getActiveTxnIdsCount() {
      return activeTxnIds_.size();
    }
    /**
     * <code>repeated uint64 activeTxnIds = 1;</code>
     */
    public long getActiveTxnIds(int index) {
      return activeTxnIds_.get(index);
    }

    private void initFields() {
      activeTxnIds_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < activeTxnIds_.size(); i++) {
        output.writeUInt64(1, activeTxnIds_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      {
        int dataSize = 0;
        for (int i = 0; i < activeTxnIds_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeUInt64SizeNoTag(activeTxnIds_.get(i));
        }
        size += dataSize;
        size += 1 * getActiveTxnIdsList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse)) {
        return super.equals(obj);
      }
      com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse other = (com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse) obj;

      boolean result = true;
      result = result && getActiveTxnIdsList()
          .equals(other.getActiveTxnIdsList());
      result = result &&
          getUnknownFields().equals(other.getUnknownFields());
      return result;
    }

    private int memoizedHashCode = 0;
    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getActiveTxnIdsCount() > 0) {
        hash = (37 * hash) + ACTIVETXNIDS_FIELD_NUMBER;
        hash = (53 * hash) + getActiveTxnIdsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ActiveTxnIdResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActiveTxnIdResponse_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActiveTxnIdResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse.class, com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse.Builder.class);
      }

      // Construct using com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        activeTxnIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActiveTxnIdResponse_descriptor;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse getDefaultInstanceForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse.getDefaultInstance();
      }

      public com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse build() {
        com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse buildPartial() {
        com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse result = new com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse(this);
        int from_bitField0_ = bitField0_;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          activeTxnIds_ = java.util.Collections.unmodifiableList(activeTxnIds_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.activeTxnIds_ = activeTxnIds_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse) {
          return mergeFrom((com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse other) {
        if (other == com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse.getDefaultInstance()) return this;
        if (!other.activeTxnIds_.isEmpty()) {
          if (activeTxnIds_.isEmpty()) {
            activeTxnIds_ = other.activeTxnIds_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureActiveTxnIdsIsMutable();
            activeTxnIds_.addAll(other.activeTxnIds_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated uint64 activeTxnIds = 1;
      private java.util.List<java.lang.Long> activeTxnIds_ = java.util.Collections.emptyList();
      private void ensureActiveTxnIdsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          activeTxnIds_ = new java.util.ArrayList<java.lang.Long>(activeTxnIds_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated uint64 activeTxnIds = 1;</code>
       */
      public java.util.List<java.lang.Long>
          getActiveTxnIdsList() {
        return java.util.Collections.unmodifiableList(activeTxnIds_);
      }
      /**
       * <code>repeated uint64 activeTxnIds = 1;</code>
       */
      public int getActiveTxnIdsCount() {
        return activeTxnIds_.size();
      }
      /**
       * <code>repeated uint64 activeTxnIds = 1;</code>
       */
      public long getActiveTxnIds(int index) {
        return activeTxnIds_.get(index);
      }
      /**
       * <code>repeated uint64 activeTxnIds = 1;</code>
       */
      public Builder setActiveTxnIds(
          int index, long value) {
        ensureActiveTxnIdsIsMutable();
        activeTxnIds_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 activeTxnIds = 1;</code>
       */
      public Builder addActiveTxnIds(long value) {
        ensureActiveTxnIdsIsMutable();
        activeTxnIds_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 activeTxnIds = 1;</code>
       */
      public Builder addAllActiveTxnIds(
          java.lang.Iterable<? extends java.lang.Long> values) {
        ensureActiveTxnIdsIsMutable();
        super.addAll(values, activeTxnIds_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated uint64 activeTxnIds = 1;</code>
       */
      public Builder clearActiveTxnIds() {
        activeTxnIds_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ActiveTxnIdResponse)
    }

    static {
      defaultInstance = new ActiveTxnIdResponse(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ActiveTxnIdResponse)
  }

  public interface ActiveTxnRequestOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // optional int64 startTxnId = 1 [default = -1];
    /**
     * <code>optional int64 startTxnId = 1 [default = -1];</code>
     */
    boolean hasStartTxnId();
    /**
     * <code>optional int64 startTxnId = 1 [default = -1];</code>
     */
    long getStartTxnId();

    // optional int64 endTxnId = 2 [default = -1];
    /**
     * <code>optional int64 endTxnId = 2 [default = -1];</code>
     */
    boolean hasEndTxnId();
    /**
     * <code>optional int64 endTxnId = 2 [default = -1];</code>
     */
    long getEndTxnId();

    // optional bytes destinationTables = 3;
    /**
     * <code>optional bytes destinationTables = 3;</code>
     */
    boolean hasDestinationTables();
    /**
     * <code>optional bytes destinationTables = 3;</code>
     */
    com.google.protobuf.ByteString getDestinationTables();
  }
  /**
   * Protobuf type {@code ActiveTxnRequest}
   */
  public static final class ActiveTxnRequest extends
      com.google.protobuf.GeneratedMessage
      implements ActiveTxnRequestOrBuilder {
    // Use ActiveTxnRequest.newBuilder() to construct.
    private ActiveTxnRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ActiveTxnRequest(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ActiveTxnRequest defaultInstance;
    public static ActiveTxnRequest getDefaultInstance() {
      return defaultInstance;
    }

    public ActiveTxnRequest getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ActiveTxnRequest(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              startTxnId_ = input.readInt64();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              endTxnId_ = input.readInt64();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              destinationTables_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActiveTxnRequest_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActiveTxnRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest.class, com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest.Builder.class);
    }

    public static com.google.protobuf.Parser<ActiveTxnRequest> PARSER =
        new com.google.protobuf.AbstractParser<ActiveTxnRequest>() {
      public ActiveTxnRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ActiveTxnRequest(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ActiveTxnRequest> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    // optional int64 startTxnId = 1 [default = -1];
    public static final int STARTTXNID_FIELD_NUMBER = 1;
    private long startTxnId_;
    /**
     * <code>optional int64 startTxnId = 1 [default = -1];</code>
     */
    public boolean hasStartTxnId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int64 startTxnId = 1 [default = -1];</code>
     */
    public long getStartTxnId() {
      return startTxnId_;
    }

    // optional int64 endTxnId = 2 [default = -1];
    public static final int ENDTXNID_FIELD_NUMBER = 2;
    private long endTxnId_;
    /**
     * <code>optional int64 endTxnId = 2 [default = -1];</code>
     */
    public boolean hasEndTxnId() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 endTxnId = 2 [default = -1];</code>
     */
    public long getEndTxnId() {
      return endTxnId_;
    }

    // optional bytes destinationTables = 3;
    public static final int DESTINATIONTABLES_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString destinationTables_;
    /**
     * <code>optional bytes destinationTables = 3;</code>
     */
    public boolean hasDestinationTables() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional bytes destinationTables = 3;</code>
     */
    public com.google.protobuf.ByteString getDestinationTables() {
      return destinationTables_;
    }

    private void initFields() {
      startTxnId_ = -1L;
      endTxnId_ = -1L;
      destinationTables_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt64(1, startTxnId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeInt64(2, endTxnId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, destinationTables_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(1, startTxnId_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, endTxnId_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, destinationTables_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest)) {
        return super.equals(obj);
      }
      com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest other = (com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest) obj;

      boolean result = true;
      result = result && (hasStartTxnId() == other.hasStartTxnId());
      if (hasStartTxnId()) {
        result = result && (getStartTxnId()
            == other.getStartTxnId());
      }
      result = result && (hasEndTxnId() == other.hasEndTxnId());
      if (hasEndTxnId()) {
        result = result && (getEndTxnId()
            == other.getEndTxnId());
      }
      result = result && (hasDestinationTables() == other.hasDestinationTables());
      if (hasDestinationTables()) {
        result = result && getDestinationTables()
            .equals(other.getDestinationTables());
      }
      result = result &&
          getUnknownFields().equals(other.getUnknownFields());
      return result;
    }

    private int memoizedHashCode = 0;
    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (hasStartTxnId()) {
        hash = (37 * hash) + STARTTXNID_FIELD_NUMBER;
        hash = (53 * hash) + hashLong(getStartTxnId());
      }
      if (hasEndTxnId()) {
        hash = (37 * hash) + ENDTXNID_FIELD_NUMBER;
        hash = (53 * hash) + hashLong(getEndTxnId());
      }
      if (hasDestinationTables()) {
        hash = (37 * hash) + DESTINATIONTABLES_FIELD_NUMBER;
        hash = (53 * hash) + getDestinationTables().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ActiveTxnRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActiveTxnRequest_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActiveTxnRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest.class, com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest.Builder.class);
      }

      // Construct using com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        startTxnId_ = -1L;
        bitField0_ = (bitField0_ & ~0x00000001);
        endTxnId_ = -1L;
        bitField0_ = (bitField0_ & ~0x00000002);
        destinationTables_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActiveTxnRequest_descriptor;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest getDefaultInstanceForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest.getDefaultInstance();
      }

      public com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest build() {
        com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest buildPartial() {
        com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest result = new com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.startTxnId_ = startTxnId_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.endTxnId_ = endTxnId_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.destinationTables_ = destinationTables_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest) {
          return mergeFrom((com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest other) {
        if (other == com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest.getDefaultInstance()) return this;
        if (other.hasStartTxnId()) {
          setStartTxnId(other.getStartTxnId());
        }
        if (other.hasEndTxnId()) {
          setEndTxnId(other.getEndTxnId());
        }
        if (other.hasDestinationTables()) {
          setDestinationTables(other.getDestinationTables());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // optional int64 startTxnId = 1 [default = -1];
      private long startTxnId_ = -1L;
      /**
       * <code>optional int64 startTxnId = 1 [default = -1];</code>
       */
      public boolean hasStartTxnId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int64 startTxnId = 1 [default = -1];</code>
       */
      public long getStartTxnId() {
        return startTxnId_;
      }
      /**
       * <code>optional int64 startTxnId = 1 [default = -1];</code>
       */
      public Builder setStartTxnId(long value) {
        bitField0_ |= 0x00000001;
        startTxnId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 startTxnId = 1 [default = -1];</code>
       */
      public Builder clearStartTxnId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        startTxnId_ = -1L;
        onChanged();
        return this;
      }

      // optional int64 endTxnId = 2 [default = -1];
      private long endTxnId_ = -1L;
      /**
       * <code>optional int64 endTxnId = 2 [default = -1];</code>
       */
      public boolean hasEndTxnId() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int64 endTxnId = 2 [default = -1];</code>
       */
      public long getEndTxnId() {
        return endTxnId_;
      }
      /**
       * <code>optional int64 endTxnId = 2 [default = -1];</code>
       */
      public Builder setEndTxnId(long value) {
        bitField0_ |= 0x00000002;
        endTxnId_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int64 endTxnId = 2 [default = -1];</code>
       */
      public Builder clearEndTxnId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        endTxnId_ = -1L;
        onChanged();
        return this;
      }

      // optional bytes destinationTables = 3;
      private com.google.protobuf.ByteString destinationTables_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes destinationTables = 3;</code>
       */
      public boolean hasDestinationTables() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional bytes destinationTables = 3;</code>
       */
      public com.google.protobuf.ByteString getDestinationTables() {
        return destinationTables_;
      }
      /**
       * <code>optional bytes destinationTables = 3;</code>
       */
      public Builder setDestinationTables(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        destinationTables_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes destinationTables = 3;</code>
       */
      public Builder clearDestinationTables() {
        bitField0_ = (bitField0_ & ~0x00000004);
        destinationTables_ = getDefaultInstance().getDestinationTables();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:ActiveTxnRequest)
    }

    static {
      defaultInstance = new ActiveTxnRequest(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ActiveTxnRequest)
  }

  public interface ActiveTxnResponseOrBuilder
      extends com.google.protobuf.MessageOrBuilder {

    // repeated .Txn txns = 1;
    /**
     * <code>repeated .Txn txns = 1;</code>
     */
    java.util.List<com.splicemachine.si.coprocessor.TxnMessage.Txn> 
        getTxnsList();
    /**
     * <code>repeated .Txn txns = 1;</code>
     */
    com.splicemachine.si.coprocessor.TxnMessage.Txn getTxns(int index);
    /**
     * <code>repeated .Txn txns = 1;</code>
     */
    int getTxnsCount();
    /**
     * <code>repeated .Txn txns = 1;</code>
     */
    java.util.List<? extends com.splicemachine.si.coprocessor.TxnMessage.TxnOrBuilder> 
        getTxnsOrBuilderList();
    /**
     * <code>repeated .Txn txns = 1;</code>
     */
    com.splicemachine.si.coprocessor.TxnMessage.TxnOrBuilder getTxnsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code ActiveTxnResponse}
   */
  public static final class ActiveTxnResponse extends
      com.google.protobuf.GeneratedMessage
      implements ActiveTxnResponseOrBuilder {
    // Use ActiveTxnResponse.newBuilder() to construct.
    private ActiveTxnResponse(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ActiveTxnResponse(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ActiveTxnResponse defaultInstance;
    public static ActiveTxnResponse getDefaultInstance() {
      return defaultInstance;
    }

    public ActiveTxnResponse getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ActiveTxnResponse(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              if (!((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
                txns_ = new java.util.ArrayList<com.splicemachine.si.coprocessor.TxnMessage.Txn>();
                mutable_bitField0_ |= 0x00000001;
              }
              txns_.add(input.readMessage(com.splicemachine.si.coprocessor.TxnMessage.Txn.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) == 0x00000001)) {
          txns_ = java.util.Collections.unmodifiableList(txns_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActiveTxnResponse_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActiveTxnResponse_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse.class, com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse.Builder.class);
    }

    public static com.google.protobuf.Parser<ActiveTxnResponse> PARSER =
        new com.google.protobuf.AbstractParser<ActiveTxnResponse>() {
      public ActiveTxnResponse parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ActiveTxnResponse(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ActiveTxnResponse> getParserForType() {
      return PARSER;
    }

    // repeated .Txn txns = 1;
    public static final int TXNS_FIELD_NUMBER = 1;
    private java.util.List<com.splicemachine.si.coprocessor.TxnMessage.Txn> txns_;
    /**
     * <code>repeated .Txn txns = 1;</code>
     */
    public java.util.List<com.splicemachine.si.coprocessor.TxnMessage.Txn> getTxnsList() {
      return txns_;
    }
    /**
     * <code>repeated .Txn txns = 1;</code>
     */
    public java.util.List<? extends com.splicemachine.si.coprocessor.TxnMessage.TxnOrBuilder> 
        getTxnsOrBuilderList() {
      return txns_;
    }
    /**
     * <code>repeated .Txn txns = 1;</code>
     */
    public int getTxnsCount() {
      return txns_.size();
    }
    /**
     * <code>repeated .Txn txns = 1;</code>
     */
    public com.splicemachine.si.coprocessor.TxnMessage.Txn getTxns(int index) {
      return txns_.get(index);
    }
    /**
     * <code>repeated .Txn txns = 1;</code>
     */
    public com.splicemachine.si.coprocessor.TxnMessage.TxnOrBuilder getTxnsOrBuilder(
        int index) {
      return txns_.get(index);
    }

    private void initFields() {
      txns_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized != -1) return isInitialized == 1;

      for (int i = 0; i < getTxnsCount(); i++) {
        if (!getTxns(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      for (int i = 0; i < txns_.size(); i++) {
        output.writeMessage(1, txns_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < txns_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, txns_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse)) {
        return super.equals(obj);
      }
      com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse other = (com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse) obj;

      boolean result = true;
      result = result && getTxnsList()
          .equals(other.getTxnsList());
      result = result &&
          getUnknownFields().equals(other.getUnknownFields());
      return result;
    }

    private int memoizedHashCode = 0;
    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptorForType().hashCode();
      if (getTxnsCount() > 0) {
        hash = (37 * hash) + TXNS_FIELD_NUMBER;
        hash = (53 * hash) + getTxnsList().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code ActiveTxnResponse}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder>
       implements com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActiveTxnResponse_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActiveTxnResponse_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse.class, com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse.Builder.class);
      }

      // Construct using com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTxnsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (txnsBuilder_ == null) {
          txns_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          txnsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.internal_static_ActiveTxnResponse_descriptor;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse getDefaultInstanceForType() {
        return com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse.getDefaultInstance();
      }

      public com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse build() {
        com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse buildPartial() {
        com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse result = new com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse(this);
        int from_bitField0_ = bitField0_;
        if (txnsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001)) {
            txns_ = java.util.Collections.unmodifiableList(txns_);
            bitField0_ = (bitField0_ & ~0x00000001);
          }
          result.txns_ = txns_;
        } else {
          result.txns_ = txnsBuilder_.build();
        }
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse) {
          return mergeFrom((com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse other) {
        if (other == com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse.getDefaultInstance()) return this;
        if (txnsBuilder_ == null) {
          if (!other.txns_.isEmpty()) {
            if (txns_.isEmpty()) {
              txns_ = other.txns_;
              bitField0_ = (bitField0_ & ~0x00000001);
            } else {
              ensureTxnsIsMutable();
              txns_.addAll(other.txns_);
            }
            onChanged();
          }
        } else {
          if (!other.txns_.isEmpty()) {
            if (txnsBuilder_.isEmpty()) {
              txnsBuilder_.dispose();
              txnsBuilder_ = null;
              txns_ = other.txns_;
              bitField0_ = (bitField0_ & ~0x00000001);
              txnsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTxnsFieldBuilder() : null;
            } else {
              txnsBuilder_.addAllMessages(other.txns_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getTxnsCount(); i++) {
          if (!getTxns(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      // repeated .Txn txns = 1;
      private java.util.List<com.splicemachine.si.coprocessor.TxnMessage.Txn> txns_ =
        java.util.Collections.emptyList();
      private void ensureTxnsIsMutable() {
        if (!((bitField0_ & 0x00000001) == 0x00000001)) {
          txns_ = new java.util.ArrayList<com.splicemachine.si.coprocessor.TxnMessage.Txn>(txns_);
          bitField0_ |= 0x00000001;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          com.splicemachine.si.coprocessor.TxnMessage.Txn, com.splicemachine.si.coprocessor.TxnMessage.Txn.Builder, com.splicemachine.si.coprocessor.TxnMessage.TxnOrBuilder> txnsBuilder_;

      /**
       * <code>repeated .Txn txns = 1;</code>
       */
      public java.util.List<com.splicemachine.si.coprocessor.TxnMessage.Txn> getTxnsList() {
        if (txnsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(txns_);
        } else {
          return txnsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .Txn txns = 1;</code>
       */
      public int getTxnsCount() {
        if (txnsBuilder_ == null) {
          return txns_.size();
        } else {
          return txnsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .Txn txns = 1;</code>
       */
      public com.splicemachine.si.coprocessor.TxnMessage.Txn getTxns(int index) {
        if (txnsBuilder_ == null) {
          return txns_.get(index);
        } else {
          return txnsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .Txn txns = 1;</code>
       */
      public Builder setTxns(
          int index, com.splicemachine.si.coprocessor.TxnMessage.Txn value) {
        if (txnsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTxnsIsMutable();
          txns_.set(index, value);
          onChanged();
        } else {
          txnsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Txn txns = 1;</code>
       */
      public Builder setTxns(
          int index, com.splicemachine.si.coprocessor.TxnMessage.Txn.Builder builderForValue) {
        if (txnsBuilder_ == null) {
          ensureTxnsIsMutable();
          txns_.set(index, builderForValue.build());
          onChanged();
        } else {
          txnsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Txn txns = 1;</code>
       */
      public Builder addTxns(com.splicemachine.si.coprocessor.TxnMessage.Txn value) {
        if (txnsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTxnsIsMutable();
          txns_.add(value);
          onChanged();
        } else {
          txnsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .Txn txns = 1;</code>
       */
      public Builder addTxns(
          int index, com.splicemachine.si.coprocessor.TxnMessage.Txn value) {
        if (txnsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTxnsIsMutable();
          txns_.add(index, value);
          onChanged();
        } else {
          txnsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .Txn txns = 1;</code>
       */
      public Builder addTxns(
          com.splicemachine.si.coprocessor.TxnMessage.Txn.Builder builderForValue) {
        if (txnsBuilder_ == null) {
          ensureTxnsIsMutable();
          txns_.add(builderForValue.build());
          onChanged();
        } else {
          txnsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Txn txns = 1;</code>
       */
      public Builder addTxns(
          int index, com.splicemachine.si.coprocessor.TxnMessage.Txn.Builder builderForValue) {
        if (txnsBuilder_ == null) {
          ensureTxnsIsMutable();
          txns_.add(index, builderForValue.build());
          onChanged();
        } else {
          txnsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .Txn txns = 1;</code>
       */
      public Builder addAllTxns(
          java.lang.Iterable<? extends com.splicemachine.si.coprocessor.TxnMessage.Txn> values) {
        if (txnsBuilder_ == null) {
          ensureTxnsIsMutable();
          super.addAll(values, txns_);
          onChanged();
        } else {
          txnsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .Txn txns = 1;</code>
       */
      public Builder clearTxns() {
        if (txnsBuilder_ == null) {
          txns_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000001);
          onChanged();
        } else {
          txnsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .Txn txns = 1;</code>
       */
      public Builder removeTxns(int index) {
        if (txnsBuilder_ == null) {
          ensureTxnsIsMutable();
          txns_.remove(index);
          onChanged();
        } else {
          txnsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .Txn txns = 1;</code>
       */
      public com.splicemachine.si.coprocessor.TxnMessage.Txn.Builder getTxnsBuilder(
          int index) {
        return getTxnsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .Txn txns = 1;</code>
       */
      public com.splicemachine.si.coprocessor.TxnMessage.TxnOrBuilder getTxnsOrBuilder(
          int index) {
        if (txnsBuilder_ == null) {
          return txns_.get(index);  } else {
          return txnsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .Txn txns = 1;</code>
       */
      public java.util.List<? extends com.splicemachine.si.coprocessor.TxnMessage.TxnOrBuilder> 
           getTxnsOrBuilderList() {
        if (txnsBuilder_ != null) {
          return txnsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(txns_);
        }
      }
      /**
       * <code>repeated .Txn txns = 1;</code>
       */
      public com.splicemachine.si.coprocessor.TxnMessage.Txn.Builder addTxnsBuilder() {
        return getTxnsFieldBuilder().addBuilder(
            com.splicemachine.si.coprocessor.TxnMessage.Txn.getDefaultInstance());
      }
      /**
       * <code>repeated .Txn txns = 1;</code>
       */
      public com.splicemachine.si.coprocessor.TxnMessage.Txn.Builder addTxnsBuilder(
          int index) {
        return getTxnsFieldBuilder().addBuilder(
            index, com.splicemachine.si.coprocessor.TxnMessage.Txn.getDefaultInstance());
      }
      /**
       * <code>repeated .Txn txns = 1;</code>
       */
      public java.util.List<com.splicemachine.si.coprocessor.TxnMessage.Txn.Builder> 
           getTxnsBuilderList() {
        return getTxnsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          com.splicemachine.si.coprocessor.TxnMessage.Txn, com.splicemachine.si.coprocessor.TxnMessage.Txn.Builder, com.splicemachine.si.coprocessor.TxnMessage.TxnOrBuilder> 
          getTxnsFieldBuilder() {
        if (txnsBuilder_ == null) {
          txnsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              com.splicemachine.si.coprocessor.TxnMessage.Txn, com.splicemachine.si.coprocessor.TxnMessage.Txn.Builder, com.splicemachine.si.coprocessor.TxnMessage.TxnOrBuilder>(
                  txns_,
                  ((bitField0_ & 0x00000001) == 0x00000001),
                  getParentForChildren(),
                  isClean());
          txns_ = null;
        }
        return txnsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:ActiveTxnResponse)
    }

    static {
      defaultInstance = new ActiveTxnResponse(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:ActiveTxnResponse)
  }

  /**
   * Protobuf service {@code TxnLifecycleService}
   */
  public static abstract class TxnLifecycleService
      implements com.google.protobuf.Service {
    protected TxnLifecycleService() {}

    public interface Interface {
      /**
       * <code>rpc beginTransaction(.TxnInfo) returns (.VoidResponse);</code>
       *
       * <pre>
       **
       * Begin a top-level &lt;em&gt;writable&lt;/em&gt; transaction. The
       * returned transaction will be recorded on the transaction
       * table and will be in the ACTIVE state (able to be committed,
       * rolled back etc.)
       *
       * @param TxnInfo the information for the new transaction
       * </pre>
       */
      public abstract void beginTransaction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.TxnInfo request,
          com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.VoidResponse> done);

      /**
       * <code>rpc elevateTransaction(.ElevateRequest) returns (.VoidResponse);</code>
       *
       * <pre>
       **
       * Elevate a transaction from read-only to writable.
       *
       * @param ElevateRequest the request for the elevation
       * </pre>
       */
      public abstract void elevateTransaction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest request,
          com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.VoidResponse> done);

      /**
       * <code>rpc beginChildTransaction(.CreateChildRequest) returns (.Txn);</code>
       *
       * <pre>
       **
       * Create a &lt;em&gt;writable&lt;/em&gt; child transaction.
       *
       * Because the Transaction table consists of multiple regions spread
       * across multiple nodes, the semantics of this call depend greatly
       * on what row this is called against(in particular, which region
       * its called against). In particular, if this method is called
       * against the &lt;em&gt;parent transaction's&lt;/em&gt; row, then &lt;em&gt;creating&lt;/em&gt;
       * the child transaction record will incur a remote call--as a result, this
       * should only be done when the child transaction id is to be generated.
       *
       * When the child transaction id (and begin timestamp) are known &lt;em&gt;before&lt;/em&gt; the
       * network call, then this method may be called against the child transaction's region,
       * which will incude a possible network &lt;em&gt;read&lt;/em&gt; of the parent transaction
       * if additional information is needed (i.e. if it inherits from the parent)
       * </pre>
       */
      public abstract void beginChildTransaction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest request,
          com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.Txn> done);

      /**
       * <code>rpc lifecycleAction(.TxnLifecycleMessage) returns (.ActionResponse);</code>
       *
       * <pre>
       **
       * Perform a lifecycle action for the specified transaction.
       * </pre>
       */
      public abstract void lifecycleAction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage request,
          com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.ActionResponse> done);

      /**
       * <code>rpc getTransaction(.TxnRequest) returns (.Txn);</code>
       */
      public abstract void getTransaction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.TxnRequest request,
          com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.Txn> done);

      /**
       * <code>rpc getActiveTransactionIds(.ActiveTxnRequest) returns (.ActiveTxnIdResponse);</code>
       */
      public abstract void getActiveTransactionIds(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest request,
          com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse> done);

      /**
       * <code>rpc getActiveTransactions(.ActiveTxnRequest) returns (.ActiveTxnResponse);</code>
       */
      public abstract void getActiveTransactions(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest request,
          com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse> done);

    }

    public static com.google.protobuf.Service newReflectiveService(
        final Interface impl) {
      return new TxnLifecycleService() {
        @java.lang.Override
        public  void beginTransaction(
            com.google.protobuf.RpcController controller,
            com.splicemachine.si.coprocessor.TxnMessage.TxnInfo request,
            com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.VoidResponse> done) {
          impl.beginTransaction(controller, request, done);
        }

        @java.lang.Override
        public  void elevateTransaction(
            com.google.protobuf.RpcController controller,
            com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest request,
            com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.VoidResponse> done) {
          impl.elevateTransaction(controller, request, done);
        }

        @java.lang.Override
        public  void beginChildTransaction(
            com.google.protobuf.RpcController controller,
            com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest request,
            com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.Txn> done) {
          impl.beginChildTransaction(controller, request, done);
        }

        @java.lang.Override
        public  void lifecycleAction(
            com.google.protobuf.RpcController controller,
            com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage request,
            com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.ActionResponse> done) {
          impl.lifecycleAction(controller, request, done);
        }

        @java.lang.Override
        public  void getTransaction(
            com.google.protobuf.RpcController controller,
            com.splicemachine.si.coprocessor.TxnMessage.TxnRequest request,
            com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.Txn> done) {
          impl.getTransaction(controller, request, done);
        }

        @java.lang.Override
        public  void getActiveTransactionIds(
            com.google.protobuf.RpcController controller,
            com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest request,
            com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse> done) {
          impl.getActiveTransactionIds(controller, request, done);
        }

        @java.lang.Override
        public  void getActiveTransactions(
            com.google.protobuf.RpcController controller,
            com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest request,
            com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse> done) {
          impl.getActiveTransactions(controller, request, done);
        }

      };
    }

    public static com.google.protobuf.BlockingService
        newReflectiveBlockingService(final BlockingInterface impl) {
      return new com.google.protobuf.BlockingService() {
        public final com.google.protobuf.Descriptors.ServiceDescriptor
            getDescriptorForType() {
          return getDescriptor();
        }

        public final com.google.protobuf.Message callBlockingMethod(
            com.google.protobuf.Descriptors.MethodDescriptor method,
            com.google.protobuf.RpcController controller,
            com.google.protobuf.Message request)
            throws com.google.protobuf.ServiceException {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.callBlockingMethod() given method descriptor for " +
              "wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return impl.beginTransaction(controller, (com.splicemachine.si.coprocessor.TxnMessage.TxnInfo)request);
            case 1:
              return impl.elevateTransaction(controller, (com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest)request);
            case 2:
              return impl.beginChildTransaction(controller, (com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest)request);
            case 3:
              return impl.lifecycleAction(controller, (com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage)request);
            case 4:
              return impl.getTransaction(controller, (com.splicemachine.si.coprocessor.TxnMessage.TxnRequest)request);
            case 5:
              return impl.getActiveTransactionIds(controller, (com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest)request);
            case 6:
              return impl.getActiveTransactions(controller, (com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest)request);
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }

        public final com.google.protobuf.Message
            getRequestPrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getRequestPrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.getDefaultInstance();
            case 1:
              return com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest.getDefaultInstance();
            case 2:
              return com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest.getDefaultInstance();
            case 3:
              return com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage.getDefaultInstance();
            case 4:
              return com.splicemachine.si.coprocessor.TxnMessage.TxnRequest.getDefaultInstance();
            case 5:
              return com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest.getDefaultInstance();
            case 6:
              return com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }

        public final com.google.protobuf.Message
            getResponsePrototype(
            com.google.protobuf.Descriptors.MethodDescriptor method) {
          if (method.getService() != getDescriptor()) {
            throw new java.lang.IllegalArgumentException(
              "Service.getResponsePrototype() given method " +
              "descriptor for wrong service type.");
          }
          switch(method.getIndex()) {
            case 0:
              return com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.getDefaultInstance();
            case 1:
              return com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.getDefaultInstance();
            case 2:
              return com.splicemachine.si.coprocessor.TxnMessage.Txn.getDefaultInstance();
            case 3:
              return com.splicemachine.si.coprocessor.TxnMessage.ActionResponse.getDefaultInstance();
            case 4:
              return com.splicemachine.si.coprocessor.TxnMessage.Txn.getDefaultInstance();
            case 5:
              return com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse.getDefaultInstance();
            case 6:
              return com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse.getDefaultInstance();
            default:
              throw new java.lang.AssertionError("Can't get here.");
          }
        }

      };
    }

    /**
     * <code>rpc beginTransaction(.TxnInfo) returns (.VoidResponse);</code>
     *
     * <pre>
     **
     * Begin a top-level &lt;em&gt;writable&lt;/em&gt; transaction. The
     * returned transaction will be recorded on the transaction
     * table and will be in the ACTIVE state (able to be committed,
     * rolled back etc.)
     *
     * @param TxnInfo the information for the new transaction
     * </pre>
     */
    public abstract void beginTransaction(
        com.google.protobuf.RpcController controller,
        com.splicemachine.si.coprocessor.TxnMessage.TxnInfo request,
        com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.VoidResponse> done);

    /**
     * <code>rpc elevateTransaction(.ElevateRequest) returns (.VoidResponse);</code>
     *
     * <pre>
     **
     * Elevate a transaction from read-only to writable.
     *
     * @param ElevateRequest the request for the elevation
     * </pre>
     */
    public abstract void elevateTransaction(
        com.google.protobuf.RpcController controller,
        com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest request,
        com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.VoidResponse> done);

    /**
     * <code>rpc beginChildTransaction(.CreateChildRequest) returns (.Txn);</code>
     *
     * <pre>
     **
     * Create a &lt;em&gt;writable&lt;/em&gt; child transaction.
     *
     * Because the Transaction table consists of multiple regions spread
     * across multiple nodes, the semantics of this call depend greatly
     * on what row this is called against(in particular, which region
     * its called against). In particular, if this method is called
     * against the &lt;em&gt;parent transaction's&lt;/em&gt; row, then &lt;em&gt;creating&lt;/em&gt;
     * the child transaction record will incur a remote call--as a result, this
     * should only be done when the child transaction id is to be generated.
     *
     * When the child transaction id (and begin timestamp) are known &lt;em&gt;before&lt;/em&gt; the
     * network call, then this method may be called against the child transaction's region,
     * which will incude a possible network &lt;em&gt;read&lt;/em&gt; of the parent transaction
     * if additional information is needed (i.e. if it inherits from the parent)
     * </pre>
     */
    public abstract void beginChildTransaction(
        com.google.protobuf.RpcController controller,
        com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest request,
        com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.Txn> done);

    /**
     * <code>rpc lifecycleAction(.TxnLifecycleMessage) returns (.ActionResponse);</code>
     *
     * <pre>
     **
     * Perform a lifecycle action for the specified transaction.
     * </pre>
     */
    public abstract void lifecycleAction(
        com.google.protobuf.RpcController controller,
        com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage request,
        com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.ActionResponse> done);

    /**
     * <code>rpc getTransaction(.TxnRequest) returns (.Txn);</code>
     */
    public abstract void getTransaction(
        com.google.protobuf.RpcController controller,
        com.splicemachine.si.coprocessor.TxnMessage.TxnRequest request,
        com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.Txn> done);

    /**
     * <code>rpc getActiveTransactionIds(.ActiveTxnRequest) returns (.ActiveTxnIdResponse);</code>
     */
    public abstract void getActiveTransactionIds(
        com.google.protobuf.RpcController controller,
        com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest request,
        com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse> done);

    /**
     * <code>rpc getActiveTransactions(.ActiveTxnRequest) returns (.ActiveTxnResponse);</code>
     */
    public abstract void getActiveTransactions(
        com.google.protobuf.RpcController controller,
        com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest request,
        com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse> done);

    public static final
        com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptor() {
      return com.splicemachine.si.coprocessor.TxnMessage.getDescriptor().getServices().get(0);
    }
    public final com.google.protobuf.Descriptors.ServiceDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }

    public final void callMethod(
        com.google.protobuf.Descriptors.MethodDescriptor method,
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Message request,
        com.google.protobuf.RpcCallback<
          com.google.protobuf.Message> done) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.callMethod() given method descriptor for wrong " +
          "service type.");
      }
      switch(method.getIndex()) {
        case 0:
          this.beginTransaction(controller, (com.splicemachine.si.coprocessor.TxnMessage.TxnInfo)request,
            com.google.protobuf.RpcUtil.<com.splicemachine.si.coprocessor.TxnMessage.VoidResponse>specializeCallback(
              done));
          return;
        case 1:
          this.elevateTransaction(controller, (com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest)request,
            com.google.protobuf.RpcUtil.<com.splicemachine.si.coprocessor.TxnMessage.VoidResponse>specializeCallback(
              done));
          return;
        case 2:
          this.beginChildTransaction(controller, (com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest)request,
            com.google.protobuf.RpcUtil.<com.splicemachine.si.coprocessor.TxnMessage.Txn>specializeCallback(
              done));
          return;
        case 3:
          this.lifecycleAction(controller, (com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage)request,
            com.google.protobuf.RpcUtil.<com.splicemachine.si.coprocessor.TxnMessage.ActionResponse>specializeCallback(
              done));
          return;
        case 4:
          this.getTransaction(controller, (com.splicemachine.si.coprocessor.TxnMessage.TxnRequest)request,
            com.google.protobuf.RpcUtil.<com.splicemachine.si.coprocessor.TxnMessage.Txn>specializeCallback(
              done));
          return;
        case 5:
          this.getActiveTransactionIds(controller, (com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest)request,
            com.google.protobuf.RpcUtil.<com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse>specializeCallback(
              done));
          return;
        case 6:
          this.getActiveTransactions(controller, (com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest)request,
            com.google.protobuf.RpcUtil.<com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse>specializeCallback(
              done));
          return;
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }

    public final com.google.protobuf.Message
        getRequestPrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getRequestPrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return com.splicemachine.si.coprocessor.TxnMessage.TxnInfo.getDefaultInstance();
        case 1:
          return com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest.getDefaultInstance();
        case 2:
          return com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest.getDefaultInstance();
        case 3:
          return com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage.getDefaultInstance();
        case 4:
          return com.splicemachine.si.coprocessor.TxnMessage.TxnRequest.getDefaultInstance();
        case 5:
          return com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest.getDefaultInstance();
        case 6:
          return com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }

    public final com.google.protobuf.Message
        getResponsePrototype(
        com.google.protobuf.Descriptors.MethodDescriptor method) {
      if (method.getService() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "Service.getResponsePrototype() given method " +
          "descriptor for wrong service type.");
      }
      switch(method.getIndex()) {
        case 0:
          return com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.getDefaultInstance();
        case 1:
          return com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.getDefaultInstance();
        case 2:
          return com.splicemachine.si.coprocessor.TxnMessage.Txn.getDefaultInstance();
        case 3:
          return com.splicemachine.si.coprocessor.TxnMessage.ActionResponse.getDefaultInstance();
        case 4:
          return com.splicemachine.si.coprocessor.TxnMessage.Txn.getDefaultInstance();
        case 5:
          return com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse.getDefaultInstance();
        case 6:
          return com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse.getDefaultInstance();
        default:
          throw new java.lang.AssertionError("Can't get here.");
      }
    }

    public static Stub newStub(
        com.google.protobuf.RpcChannel channel) {
      return new Stub(channel);
    }

    public static final class Stub extends com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleService implements Interface {
      private Stub(com.google.protobuf.RpcChannel channel) {
        this.channel = channel;
      }

      private final com.google.protobuf.RpcChannel channel;

      public com.google.protobuf.RpcChannel getChannel() {
        return channel;
      }

      public  void beginTransaction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.TxnInfo request,
          com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.VoidResponse> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.class,
            com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.getDefaultInstance()));
      }

      public  void elevateTransaction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest request,
          com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.VoidResponse> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(1),
          controller,
          request,
          com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.class,
            com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.getDefaultInstance()));
      }

      public  void beginChildTransaction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest request,
          com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.Txn> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(2),
          controller,
          request,
          com.splicemachine.si.coprocessor.TxnMessage.Txn.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.splicemachine.si.coprocessor.TxnMessage.Txn.class,
            com.splicemachine.si.coprocessor.TxnMessage.Txn.getDefaultInstance()));
      }

      public  void lifecycleAction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage request,
          com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.ActionResponse> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(3),
          controller,
          request,
          com.splicemachine.si.coprocessor.TxnMessage.ActionResponse.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.splicemachine.si.coprocessor.TxnMessage.ActionResponse.class,
            com.splicemachine.si.coprocessor.TxnMessage.ActionResponse.getDefaultInstance()));
      }

      public  void getTransaction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.TxnRequest request,
          com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.Txn> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(4),
          controller,
          request,
          com.splicemachine.si.coprocessor.TxnMessage.Txn.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.splicemachine.si.coprocessor.TxnMessage.Txn.class,
            com.splicemachine.si.coprocessor.TxnMessage.Txn.getDefaultInstance()));
      }

      public  void getActiveTransactionIds(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest request,
          com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(5),
          controller,
          request,
          com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse.class,
            com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse.getDefaultInstance()));
      }

      public  void getActiveTransactions(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest request,
          com.google.protobuf.RpcCallback<com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse> done) {
        channel.callMethod(
          getDescriptor().getMethods().get(6),
          controller,
          request,
          com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse.getDefaultInstance(),
          com.google.protobuf.RpcUtil.generalizeCallback(
            done,
            com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse.class,
            com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse.getDefaultInstance()));
      }
    }

    public static BlockingInterface newBlockingStub(
        com.google.protobuf.BlockingRpcChannel channel) {
      return new BlockingStub(channel);
    }

    public interface BlockingInterface {
      public com.splicemachine.si.coprocessor.TxnMessage.VoidResponse beginTransaction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.TxnInfo request)
          throws com.google.protobuf.ServiceException;

      public com.splicemachine.si.coprocessor.TxnMessage.VoidResponse elevateTransaction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest request)
          throws com.google.protobuf.ServiceException;

      public com.splicemachine.si.coprocessor.TxnMessage.Txn beginChildTransaction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest request)
          throws com.google.protobuf.ServiceException;

      public com.splicemachine.si.coprocessor.TxnMessage.ActionResponse lifecycleAction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage request)
          throws com.google.protobuf.ServiceException;

      public com.splicemachine.si.coprocessor.TxnMessage.Txn getTransaction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.TxnRequest request)
          throws com.google.protobuf.ServiceException;

      public com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse getActiveTransactionIds(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest request)
          throws com.google.protobuf.ServiceException;

      public com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse getActiveTransactions(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest request)
          throws com.google.protobuf.ServiceException;
    }

    private static final class BlockingStub implements BlockingInterface {
      private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
        this.channel = channel;
      }

      private final com.google.protobuf.BlockingRpcChannel channel;

      public com.splicemachine.si.coprocessor.TxnMessage.VoidResponse beginTransaction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.TxnInfo request)
          throws com.google.protobuf.ServiceException {
        return (com.splicemachine.si.coprocessor.TxnMessage.VoidResponse) channel.callBlockingMethod(
          getDescriptor().getMethods().get(0),
          controller,
          request,
          com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.getDefaultInstance());
      }


      public com.splicemachine.si.coprocessor.TxnMessage.VoidResponse elevateTransaction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.ElevateRequest request)
          throws com.google.protobuf.ServiceException {
        return (com.splicemachine.si.coprocessor.TxnMessage.VoidResponse) channel.callBlockingMethod(
          getDescriptor().getMethods().get(1),
          controller,
          request,
          com.splicemachine.si.coprocessor.TxnMessage.VoidResponse.getDefaultInstance());
      }


      public com.splicemachine.si.coprocessor.TxnMessage.Txn beginChildTransaction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.CreateChildRequest request)
          throws com.google.protobuf.ServiceException {
        return (com.splicemachine.si.coprocessor.TxnMessage.Txn) channel.callBlockingMethod(
          getDescriptor().getMethods().get(2),
          controller,
          request,
          com.splicemachine.si.coprocessor.TxnMessage.Txn.getDefaultInstance());
      }


      public com.splicemachine.si.coprocessor.TxnMessage.ActionResponse lifecycleAction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.TxnLifecycleMessage request)
          throws com.google.protobuf.ServiceException {
        return (com.splicemachine.si.coprocessor.TxnMessage.ActionResponse) channel.callBlockingMethod(
          getDescriptor().getMethods().get(3),
          controller,
          request,
          com.splicemachine.si.coprocessor.TxnMessage.ActionResponse.getDefaultInstance());
      }


      public com.splicemachine.si.coprocessor.TxnMessage.Txn getTransaction(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.TxnRequest request)
          throws com.google.protobuf.ServiceException {
        return (com.splicemachine.si.coprocessor.TxnMessage.Txn) channel.callBlockingMethod(
          getDescriptor().getMethods().get(4),
          controller,
          request,
          com.splicemachine.si.coprocessor.TxnMessage.Txn.getDefaultInstance());
      }


      public com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse getActiveTransactionIds(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest request)
          throws com.google.protobuf.ServiceException {
        return (com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse) channel.callBlockingMethod(
          getDescriptor().getMethods().get(5),
          controller,
          request,
          com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnIdResponse.getDefaultInstance());
      }


      public com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse getActiveTransactions(
          com.google.protobuf.RpcController controller,
          com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnRequest request)
          throws com.google.protobuf.ServiceException {
        return (com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse) channel.callBlockingMethod(
          getDescriptor().getMethods().get(6),
          controller,
          request,
          com.splicemachine.si.coprocessor.TxnMessage.ActiveTxnResponse.getDefaultInstance());
      }

    }

    // @@protoc_insertion_point(class_scope:TxnLifecycleService)
  }

  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_TxnInfo_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_TxnInfo_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_Txn_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_Txn_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_VoidResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_VoidResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ElevateRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ElevateRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_CreateChildRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_CreateChildRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ActionResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ActionResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_TxnLifecycleMessage_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_TxnLifecycleMessage_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_TxnRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_TxnRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ActiveTxnIdResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ActiveTxnIdResponse_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ActiveTxnRequest_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ActiveTxnRequest_fieldAccessorTable;
  private static com.google.protobuf.Descriptors.Descriptor
    internal_static_ActiveTxnResponse_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_ActiveTxnResponse_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\tTxn.proto\032\014Client.proto\"\243\001\n\007TxnInfo\022\021\n" +
      "\005txnId\030\001 \002(\003:\002-1\022\017\n\007beginTs\030\002 \002(\004\022\026\n\016iso" +
      "lationLevel\030\003 \002(\r\022\027\n\013parentTxnid\030\004 \001(\003:\002" +
      "-1\022\024\n\014allowsWrites\030\005 \001(\010\022\022\n\nisAdditive\030\006" +
      " \001(\010\022\031\n\021destinationTables\030\007 \001(\014\"y\n\003Txn\022\026" +
      "\n\004info\030\001 \002(\0132\010.TxnInfo\022\r\n\005state\030\002 \002(\r\022\024\n" +
      "\010commitTs\030\003 \001(\003:\002-1\022\032\n\016globalCommitTs\030\004 " +
      "\001(\003:\002-1\022\031\n\021lastKeepAliveTime\030\005 \001(\003\"\016\n\014Vo" +
      "idResponse\"<\n\016ElevateRequest\022\r\n\005txnId\030\001 " +
      "\002(\004\022\033\n\023newDestinationTable\030\002 \002(\014\"A\n\022Crea",
      "teChildRequest\022\023\n\013parentTxnId\030\001 \002(\004\022\026\n\004i" +
      "nfo\030\002 \002(\0132\010.TxnInfo\"4\n\016ActionResponse\022\020\n" +
      "\010commitTs\030\001 \001(\004\022\020\n\010continue\030\002 \001(\010\"F\n\023Txn" +
      "LifecycleMessage\022\r\n\005txnId\030\001 \002(\004\022 \n\006actio" +
      "n\030\002 \002(\0162\020.LifecycleAction\"=\n\nTxnRequest\022" +
      "\r\n\005txnId\030\001 \002(\004\022 \n\030includeDestinationTabl" +
      "es\030\002 \001(\010\"+\n\023ActiveTxnIdResponse\022\024\n\014activ" +
      "eTxnIds\030\001 \003(\004\"[\n\020ActiveTxnRequest\022\026\n\nsta" +
      "rtTxnId\030\001 \001(\003:\002-1\022\024\n\010endTxnId\030\002 \001(\003:\002-1\022" +
      "\031\n\021destinationTables\030\003 \001(\014\"\'\n\021ActiveTxnR",
      "esponse\022\022\n\004txns\030\001 \003(\0132\004.Txn*G\n\017Lifecycle" +
      "Action\022\n\n\006COMMIT\020\001\022\014\n\010ROLLBACk\020\002\022\013\n\007TIME" +
      "OUT\020\003\022\r\n\tKEEPALIVE\020\0042\217\003\n\023TxnLifecycleSer" +
      "vice\022+\n\020beginTransaction\022\010.TxnInfo\032\r.Voi" +
      "dResponse\0224\n\022elevateTransaction\022\017.Elevat" +
      "eRequest\032\r.VoidResponse\0222\n\025beginChildTra" +
      "nsaction\022\023.CreateChildRequest\032\004.Txn\0228\n\017l" +
      "ifecycleAction\022\024.TxnLifecycleMessage\032\017.A" +
      "ctionResponse\022#\n\016getTransaction\022\013.TxnReq" +
      "uest\032\004.Txn\022B\n\027getActiveTransactionIds\022\021.",
      "ActiveTxnRequest\032\024.ActiveTxnIdResponse\022>" +
      "\n\025getActiveTransactions\022\021.ActiveTxnReque" +
      "st\032\022.ActiveTxnResponseB6\n com.splicemach" +
      "ine.si.coprocessorB\nTxnMessageH\001\210\001\001\240\001\001"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
      new com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner() {
        public com.google.protobuf.ExtensionRegistry assignDescriptors(
            com.google.protobuf.Descriptors.FileDescriptor root) {
          descriptor = root;
          internal_static_TxnInfo_descriptor =
            getDescriptor().getMessageTypes().get(0);
          internal_static_TxnInfo_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_TxnInfo_descriptor,
              new java.lang.String[] { "TxnId", "BeginTs", "IsolationLevel", "ParentTxnid", "AllowsWrites", "IsAdditive", "DestinationTables", });
          internal_static_Txn_descriptor =
            getDescriptor().getMessageTypes().get(1);
          internal_static_Txn_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_Txn_descriptor,
              new java.lang.String[] { "Info", "State", "CommitTs", "GlobalCommitTs", "LastKeepAliveTime", });
          internal_static_VoidResponse_descriptor =
            getDescriptor().getMessageTypes().get(2);
          internal_static_VoidResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_VoidResponse_descriptor,
              new java.lang.String[] { });
          internal_static_ElevateRequest_descriptor =
            getDescriptor().getMessageTypes().get(3);
          internal_static_ElevateRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ElevateRequest_descriptor,
              new java.lang.String[] { "TxnId", "NewDestinationTable", });
          internal_static_CreateChildRequest_descriptor =
            getDescriptor().getMessageTypes().get(4);
          internal_static_CreateChildRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_CreateChildRequest_descriptor,
              new java.lang.String[] { "ParentTxnId", "Info", });
          internal_static_ActionResponse_descriptor =
            getDescriptor().getMessageTypes().get(5);
          internal_static_ActionResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ActionResponse_descriptor,
              new java.lang.String[] { "CommitTs", "Continue", });
          internal_static_TxnLifecycleMessage_descriptor =
            getDescriptor().getMessageTypes().get(6);
          internal_static_TxnLifecycleMessage_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_TxnLifecycleMessage_descriptor,
              new java.lang.String[] { "TxnId", "Action", });
          internal_static_TxnRequest_descriptor =
            getDescriptor().getMessageTypes().get(7);
          internal_static_TxnRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_TxnRequest_descriptor,
              new java.lang.String[] { "TxnId", "IncludeDestinationTables", });
          internal_static_ActiveTxnIdResponse_descriptor =
            getDescriptor().getMessageTypes().get(8);
          internal_static_ActiveTxnIdResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ActiveTxnIdResponse_descriptor,
              new java.lang.String[] { "ActiveTxnIds", });
          internal_static_ActiveTxnRequest_descriptor =
            getDescriptor().getMessageTypes().get(9);
          internal_static_ActiveTxnRequest_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ActiveTxnRequest_descriptor,
              new java.lang.String[] { "StartTxnId", "EndTxnId", "DestinationTables", });
          internal_static_ActiveTxnResponse_descriptor =
            getDescriptor().getMessageTypes().get(10);
          internal_static_ActiveTxnResponse_fieldAccessorTable = new
            com.google.protobuf.GeneratedMessage.FieldAccessorTable(
              internal_static_ActiveTxnResponse_descriptor,
              new java.lang.String[] { "Txns", });
          return null;
        }
      };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          org.apache.hadoop.hbase.protobuf.generated.ClientProtos.getDescriptor(),
        }, assigner);
  }

  // @@protoc_insertion_point(outer_class_scope)
}
