option java_package = "com.splicemachine.coprocessor";
option java_outer_classname = "SpliceMessage";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

message SpliceSchedulerRequest {
	optional bytes taskStart = 1;
	optional bytes taskEnd = 2;
	optional string className = 3;
	optional bytes classBytes = 4;
    optional bool allowSplits = 5;
}

message TaskFutureResponse {
	required string taskNode = 1;
	required bytes taskId = 2;
	optional double estimatedCost = 3;
    required bytes startRow = 4;
}

message SchedulerResponse{
    repeated TaskFutureResponse response = 1;
}

message ConstraintContext {
	optional string tableName = 1;
	optional string constraintName = 2;
}

message AllocateFilterMessage {
	optional bytes addressMatch = 1;
}

message SuccessFilterMessage {
	repeated bytes failedTasks = 1;
}

message SkippingScanFilterMessage {
    repeated bytes startKeys = 1;
    repeated bytes stopKeys = 2;
    repeated bytes predicates = 3;
}

message ActiveTxnFilterMessage {
    required int64 beforeTs = 1;
    required int64 afterTs = 2;
    optional bytes destinationTable = 3;
}

message HbaseAttributeHolderMessage {
    message Attribute {
        required string name = 1;
        required bytes value = 2;
    }
    repeated Attribute attributes = 1;
}

message WriteResult {
  enum Code {
    FAILED = 0;
    WRITE_CONFLICT = 1;
    SUCCESS = 2;
    PRIMARY_KEY_VIOLATION = 3;
    UNIQUE_VIOLATION = 4;
    FOREIGN_KEY_VIOLATION = 5;
    CHECK_VIOLATION = 6;
    NOT_SERVING_REGION = 7;
    WRONG_REGION = 8;
    REGION_TOO_BUSY = 9;
    NOT_RUN = 10;
    NOT_NULL = 11;
  }
  optional Code code = 1;
  optional string errorMessage = 2;
  optional ConstraintContext constraintContext = 3;
}

message BulkWriteResponse {
    /*
     * We have to make this optional because HBase will attempt to
     * build a Response regardless of whether or not an error is thrown, which
     * causes the original BulkWrite error to be lost in the Protobuf messaging error.
     */
	optional bytes bytes = 1;
}

message BulkWriteRequest {
	required bytes bytes = 1;
}

message DropIndexRequest {
	optional uint64 indexConglomId = 1;
	optional uint64 baseConglomId = 2;
    required int64 txnId = 3;
}

message DropIndexResponse {

}

service SpliceIndexService {
	rpc bulkWrite(BulkWriteRequest)
	  returns (BulkWriteResponse);
}

service MultiRowService {
    rpc bulkWrite(MultiRowRequest) returns (MultiRowResponse);
}

message MultiRowRequest {
    repeated KV kvs = 1;
    required uint64 timestamp = 2;
}

message MultiRowResponse {
    repeated bool successFlags = 1;
}

message KV {
    required bytes key = 1;
    required bytes row = 2;
}

service SpliceIndexManagementService {
	rpc dropIndex(DropIndexRequest) 
	  returns (DropIndexResponse);	
}

service SpliceSchedulerService {
	rpc submit(SpliceSchedulerRequest)
	  returns (SchedulerResponse);
}

service SpliceDerbyCoprocessorService {
	rpc computeSplits(SpliceSplitServiceRequest)
		returns (SpliceSplitServiceResponse);
	rpc computeRegionSize(SpliceRegionSizeRequest)
		returns (SpliceRegionSizeResponse);
}

message SpliceSplitServiceRequest {
    optional bytes beginKey = 1;
    optional bytes endKey = 2;
    optional int32 requestedSplits = 3;
    optional int64 bytesPerSplit = 4;
}

message SpliceSplitServiceResponse {
    repeated bytes cutPoint = 1;
    required string hostName = 2;
}


message SpliceRegionSizeRequest {
}

message SpliceRegionSizeResponse {
    required string encodedName = 1;
    required int64 sizeInBytes = 2;
}

service BackupCoprocessorService {
  rpc prepareBackup(PrepareBackupRequest)
  returns (PrepareBackupResponse);
}

message PrepareBackupRequest {
    optional bytes startKey=1;
    optional bytes endKey=2;
    optional int64 backupId=3;
}

message PrepareBackupResponse {
  optional bool readyForBackup = 1;
}

message BlockingProbeRequest {
    required bool doBlock = 1;
}

message BlockingProbeResponse {
    required bool didBlock = 1;
}

service BlockingProbeEndpoint {
    rpc blockPreCompact(BlockingProbeRequest)
        returns (BlockingProbeResponse);

    rpc blockPostCompact(BlockingProbeRequest)
        returns (BlockingProbeResponse);

    rpc blockPreSplit(BlockingProbeRequest)
        returns (BlockingProbeResponse);

    rpc blockPostSplit(BlockingProbeRequest)
        returns (BlockingProbeResponse);

    rpc blockPreFlush(BlockingProbeRequest)
        returns (BlockingProbeResponse);

    rpc blockPostFlush(BlockingProbeRequest)
        returns (BlockingProbeResponse);
}
