option java_package = "com.splicemachine.ddl";
option java_outer_classname = "DDLMessage";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;
import "Derby.proto";

message AlterTable {
        repeated UUID tableId = 1;
}

message RenameTable {
        required UUID tableId = 1;
}

message RenameColumn {
        required UUID tableId = 1;
        required string columnName = 2;
}

message RenameIndex{
        required UUID tableId = 1;
}

message CreateTrigger {
        required UUID tableId = 1;
}

message CreateTable {
}

message CreateSchema {
}

message CreateView {
}

message DropView {
        required UUID tableId = 1;
}

message CreateAlias {
}

message DropAlias {
    required string schemaName = 1;
    required string aliasName = 2;
    required string namespace = 3;
}

message DropTrigger {
        required UUID tableId = 1;
        required UUID triggerId = 2;
        required UUID spsDescriptorUUID = 3;
}

message AlterStats {
        repeated UUID tableId = 1;
}

message RefreshEnterpriseFeatures {
}


message DropIndex {
        required int64 baseConglomerate = 1;
        required int64 conglomerate = 2;
        required UUID tableUUID = 3;
        required string schemaName = 4;
        required string indexName = 5;
}

message DropSchema {
        optional int64 baseConglomerate = 1;
        optional int64 conglomerate = 2;
        required string schemaName = 3;
        required UUID schemaUUID = 4;
}

message DropTable {
        optional int64 baseConglomerate = 1;
        optional int64 conglomerate = 2;
        optional UUID tableId = 3;
}

message DropSequence {
        required string schemaName = 1;
        required string sequenceName = 2;
}

message DropRole {
        optional string roleName = 1;
}

message CreateRole {
    optional string roleName = 1;
}

message TruncateTable {
        optional UUID tableId = 1;
}

message RevokeSchemaPrivilege {
        required UUID schemaId = 1;
        required string selectPerm = 2;
        required string deletePerm = 3;
        required string insertPerm = 4;
        required string updatePerm = 5;
        required string referencesPerm = 6;
        required string triggerPerm = 7;
        required string grantor = 8;
        required string grantee = 9;
        required UUID permObjectId = 10;
        optional string modifyPerm=11;
        optional string accessPerm=12;
}

message RevokeTablePrivilege {
        required UUID tableId = 1;
        required string selectPerm = 2;
        required string deletePerm = 3;
        required string insertPerm = 4;
        required string updatePerm = 5;
        required string referencesPerm = 6;
        required string triggerPerm = 7;
        required string grantor = 8;
        required string grantee = 9;
        required UUID permObjectId = 10;
}

message RevokeColumnPrivilege {
        required UUID tableId = 1;
        required string type = 2;
        optional bytes columns = 3;
        required string grantor = 4;
        required string grantee = 5;
        optional UUID permObjectId = 6;
}

message RevokeRoutinePrivilege {
        required UUID rountineId = 1;
        required string grantor = 2;
        required string grantee = 3;
        required UUID permObjectId = 4;
}

message RevokeGenericPrivilege {
        required UUID id = 1;
        required string objectType = 2;
        required UUID permObjectId = 3;
        required string permission = 4;
        required string grantor = 5;
        required string grantee = 6;
        required bool grantable = 7;
        required bool restrict = 8;
}

message RevokePrivilege {
        enum Type {
            REVOKE_TABLE_PRIVILEGE = 0;
            REVOKE_COLUMN_PRIVILEGE = 1;
            REVOKE_ROUTINE_PRIVILEGE = 2;
            REVOKE_GENERIC_PRIVILEGE = 3;
            REVOKE_SCHEMA_PRIVILEGE = 4;
        }
        enum OpType {
            GRANT_OP = 0;
            REVOKE_OP = 1;
        }
        required Type type = 1;
        optional RevokeTablePrivilege   revokeTablePrivilege = 2;
        optional RevokeColumnPrivilege  revokeColumnPrivilege = 3;
        optional RevokeRoutinePrivilege revokeRoutinePrivilege = 4;
        optional RevokeGenericPrivilege revokeGenericPrivilege = 5;
        optional RevokeSchemaPrivilege  revokeSchemaPrivilege = 6;
        required OpType op = 7;
}

message UpdateSchemaOwner {
        required string schemaName = 1;
        required string ownerName = 2;
        required UUID schemaUUID = 3;
}

message GrantRevokeRole {
        enum Type {
            GRANT_OP = 0;
            REVOKE_OP = 1;
        }
        required Type type = 1;
        required string roleName = 2;
        required string granteeName = 3;
        required string grantorName = 4;
}

message SetDatabaseProperty {
        required string propertyName = 1;
}
message TentativeFK {
        optional int64 baseConglomerate = 1;
        optional int64 conglomerate = 2;
        /* Info about the constraint that is ultimately used in constraint violation error messages */
        optional FKConstraintInfo fkConstraintInfo = 3;
        /* formatIds for the backing index of the FK we are creating */
        repeated int32 backingIndexFormatIds = 4;
       /* conglom number of unique index or base table primary key our FK references */
        optional int64 referencedConglomerateNumber = 5;
        /* conglom number of the backing-index associated with the FK */
        optional int64 referencingConglomerateNumber = 6;
        /* users visible name of the table new FK references */
        optional string referencedTableName = 7;
        /* Referenced table's encoding version ('1.0', '2.0', etc) */
        optional string referencedTableVersion = 8;
        optional int64 backingIndexConglomerateId = 9;
}

message TentativeAddColumn {
        optional int64 baseConglomerate = 1;
        optional int64 conglomerate = 2;
        optional string tableVersion = 3;
        optional int64 newConglomId = 4;
        optional int64 oldConglomId = 5;
        repeated int32 columnOrdering = 6;
        required bytes columnInfo = 7;
}

message TentativeAddConstraint {
        optional string tableVersion = 1;
        optional int64 newConglomId = 2;
        optional int64 oldConglomId = 3;
        optional int64 indexConglomerateId = 4;
        repeated int32 srcColumnOrdering = 5;
        repeated int32 targetColumnOrdering = 6;
        required bytes columnInfos = 7;
}

message TentativeDropConstraint {
        optional string tableVersion = 1;
        optional int64 oldConglomId = 2;
        optional int64 indexConglomerateId = 4;
        repeated int32 srcColumnOrdering = 5;
        repeated int32 targetColumnOrdering = 6;
        required bytes columnInfos = 7;
}


message TentativeDropColumn {
        optional int64 oldConglomId = 1;
        optional int64 newConglomId = 2;
        optional string tableVersion = 3;
        repeated int32 oldColumnOrdering = 4;
        repeated int32 newColumnOrdering = 5;
        required bytes columnInfos = 6;
        optional int32 droppedColumnPosition = 7;
}

message TentativeDropPKConstraint {
        optional int64 newConglomId = 1;
        optional int64 oldConglomId = 2;
        optional string tableVersion = 3;
        repeated int32 srcColumnOrdering = 4;
        repeated int32 targetColumnOrdering = 5;
        required bytes columnInfos = 6;
}

message Index {
        required int64 conglomerate = 1; // Index Conglomerate
        repeated int32 indexColsToMainColMap = 2; // Map from index cols to maint table columns
        optional bool unique = 3; // Is the Index Unique
        optional bool uniqueWithDuplicateNulls = 4; // Does the unique index support duplicate nullls
        repeated bool descColumns = 5; // Whether the columns are descending
        optional bool excludeNulls = 6; // Exclude Values where the first column is null
        optional bool excludeDefaults = 7; // Exclude Values where the first column is the default value
        optional bytes defaultValues = 8; // Default values for the index to validate for writing...
}

message Table {
        required int64 conglomerate = 1; // Table Conglomerate
        repeated int32 formatIds = 2; // Format ids
        repeated int32 columnOrdering = 3; // The ordering of the columns in the table
        repeated bool descColumns = 4; // The source tables columnSort, all ascending right now
        required string tableVersion = 5; // Table Version for SerDe
        optional UUID tableUuid = 6; //the derby UUID
}

message TentativeIndex {
    required Index index = 1;
    required Table table = 2;
}

message FKConstraintInfo {
    optional string constraintName = 1;
    optional string tableName = 2;
    optional string columnNames = 3;
    optional string parentTableVersion = 4;
    repeated int32 formatIds = 5;
}

message NotifyJarLoader {
    optional bool reload = 1;
    optional bool drop = 2;
    optional string schemaName = 3;
    optional string sqlName = 4;
}

message NotifyModifyClasspath {
    optional string classpath = 1;
}

message UpdateSystemProcedures{
}

enum DDLChangeType {
    CHANGE_PK = 0;
    ADD_CHECK = 1;
    ADD_FOREIGN_KEY = 2;
    CREATE_INDEX = 3;
    ADD_NOT_NULL = 4;
    ADD_COLUMN = 5;
    ADD_PRIMARY_KEY = 6;
    ADD_UNIQUE_CONSTRAINT = 7;
    DROP_COLUMN = 8;
    DROP_CONSTRAINT = 9;
    DROP_PRIMARY_KEY = 10;
    DROP_TABLE = 11;
    DROP_SCHEMA = 12;
    DROP_INDEX = 13;
    DROP_FOREIGN_KEY = 14;
    ALTER_STATS = 15;
    ENTER_RESTORE_MODE = 16;
    DICTIONARY_UPDATE = 17;
    RENAME_TABLE = 18;
    RENAME_COLUMN = 19;
    RENAME_INDEX = 20;
    ALTER_TABLE = 21;
    CREATE_TRIGGER = 22;
    DROP_TRIGGER = 23;
    DROP_ROLE = 24;
    TRUNCATE_TABLE = 25;
    REVOKE_PRIVILEGE = 26;
    CREATE_TABLE = 27;
    CREATE_SCHEMA = 28;
    CREATE_ALIAS = 29;
    DROP_ALIAS = 30;
    CREATE_VIEW = 31;
    DROP_VIEW = 32;
    DROP_SEQUENCE = 33;
    NOTIFY_JAR_LOADER = 34;
    NOTIFY_MODIFY_CLASSPATH = 35;
    REFRESH_ENTRPRISE_FEATURES = 36;
    CREATE_ROLE = 37;
    UPDATE_SCHEMA_OWNER=38;
    GRANT_REVOKE_ROLE = 39;
    SET_DATABASE_PROPERTY = 40;
    UPDATE_SYSTEM_PROCEDURES = 41;
}

message DDLChange {
    required DDLChangeType ddlChangeType = 1;
    optional string changeId = 2;
    required int64 txnId = 3;
    optional AlterTable alterTable = 4;
    optional AlterStats alterStats = 5;
    optional DropIndex dropIndex = 6;
    optional DropSchema dropSchema = 7;
    optional DropTable dropTable = 8;
    optional TentativeFK tentativeFK = 9;
    optional TentativeAddColumn tentativeAddColumn = 10;
    optional TentativeAddConstraint tentativeAddConstraint = 11;
    optional TentativeDropColumn tentativeDropColumn = 12;
    optional TentativeDropPKConstraint tentativeDropPKConstraint = 13;
    optional TentativeIndex tentativeIndex = 14;
    optional TentativeDropConstraint tentativeDropConstraint = 15;
    optional RenameTable renameTable = 16;
    optional RenameColumn renameColumn = 17;
    optional RenameIndex renameIndex = 18;
    optional CreateTrigger createTrigger = 19;
    optional DropTrigger dropTrigger = 20;
    optional DropRole dropRole = 21;
    optional TruncateTable truncateTable = 22;
    optional RevokePrivilege revokePrivilege = 23;
    optional CreateTable createTable = 24;
    optional CreateSchema createSchema = 25;
    optional CreateAlias createAlias = 26;
    optional DropAlias dropAlias = 27;
    optional CreateView createView = 28;
    optional DropView dropView = 29;
    optional DropSequence dropSequence = 30;
    optional NotifyJarLoader notifyJarLoader = 31;
    optional NotifyModifyClasspath notifyModifyClasspath = 32;
    optional RefreshEnterpriseFeatures refreshEnterpriseFeatures = 33;
    optional CreateRole createRole = 34;
    optional UpdateSchemaOwner updateSchemaOwner = 35;
    optional GrantRevokeRole grantRevokeRole = 36;
    optional SetDatabaseProperty setDatabaseProperty = 37;
    optional UpdateSystemProcedures updateSystemProcedures = 38;
}
