option java_package = "com.splicemachine.si.coprocessor";
option java_outer_classname = "TxnMessage";
option java_generic_services = true;
option java_generate_equals_and_hash = true;
option optimize_for = SPEED;

/*
 * Represents the information which is stored on the transaction
 * but which never changes (transaction id, isolation level, and so forth)
 */
message TxnInfo{
    required int64 txnId = 1 [default = -1];
    required uint64 beginTs = 2;
    /*
     * use a varint to represent the isolation level. This
     * code corresponds to the byte state in Txn.IsolationLevel
     */
    required uint32 isolationLevel = 3;
    /*
     * If not present, or -1 then this is a top-level transaction; otherwise,
     * the transaction id of the parent.
     */
    optional int64 parentTxnid = 4 [default = -1];

    /*
     * If not present, then inherit allowsWrites from the parent
     */
    optional bool allowsWrites = 5;
    /*
     * If not present, then inherit additivity from the parent transaction
     */
    optional bool isAdditive = 6;

    //list of encoded destination tables
    optional bytes destinationTables = 7;
}

message Txn {
    //the dropTxn information for this transaction
    required TxnInfo info = 1;
    /*
     * use a varint to represent the state. This state
     * code corresponds to Txn.State's encode()/decode()
     * methods.
     */
    required uint32 state = 2;


    //if not present, then state should NOT be committed
    optional int64 commitTs = 3 [default = -1];
    //if not present, effectiveCommitTimestamp() will inherit from parent
    optional int64 globalCommitTs = 4 [default = -1];

    optional int64 lastKeepAliveTime = 5;

    repeated int64 rollbackSubIds = 6;
}

/*
 * A Filler response that is returned when you don't want to
 * actually return anything from the message
 */
message VoidResponse{

}

message ElevateRequest{
    required uint64 txnId = 1;
    required bytes newDestinationTable = 2;
}

message CreateChildRequest{
    required uint64 parentTxnId = 1;
    required TxnInfo info = 2;
}

enum LifecycleAction {
    /**
     * Indicate that a commit action is requested.
     *
     * If the transaction is read-only, then no transaction record is required to exist. In this case,
     * a call to this method will perform a lookup to find the transaction, but otherwise will perform
     * no activities.
     *
     * If the transaction has been rolled back or timed out, performing the action will throw an exception.
     *
     * If the transaction has already been committed, this will perform no action, and will return the
     * previously created transaction id.
     *
     * This call is atomic; it either wholly succeeds or wholly fails. If it succeeds, then the transaction
     * is considered committed; otherwise, it's left in its previous state. However, this does not prevent
     * network actions from causing difficulty--if the network fails while returning data, the transaction
     * may have been committed. However, in this case retrying the operation is acceptable, because
     * committing a second time performs no actions
     *
     */
    COMMIT = 1;
    /**
     * Indicate that the transaction should be rolled back.
     *
     * If the transaction is read-only, then no transaction record is required to exist; this call may perform
     * I/O to find the missing row, but will otherwise perform no actions in this case.
     *
     * If the transaction has already been committed, then this call will do nothing.
     *
     * If the transaction has already been rolled back or timed out, then this call will do nothing.
     *
     * This call is atomic--it either succeeds, or the transaction is left in its prior state. However,
     * this does not prevent network calls from failing after the rollback has completed successfully. In
     * this case, calling this method again is safe, as it will perform no action (i.e. it is idempotent)
     *
     */
    ROLLBACk = 2;
    /**
     * Indicate that the transaction should be timed out.
     *
     * This is functionally equivalent to rolling back the transaction--in fact, returned transactions
     * will have ROLLED_BACK as their state. However, the physically stored value may be different, in order
     * to allow for debugging cluster difficulties
     */
    TIMEOUT = 3;
    /**
     * Indicate that this transaction is still alive.
     */
    KEEPALIVE = 4;
    ROLLBACK_SUBTRANSACTIONS = 5;
}

message ActionResponse{
    optional uint64 commitTs = 1;
    optional bool continue = 2;
}
message TxnLifecycleMessage{
    required uint64 txnId = 1;
    required LifecycleAction action = 2;
    repeated uint64 rolledbackSubTxns = 3;
}

message TxnRequest{
    required uint64 txnId = 1;
    optional bool includeDestinationTables = 2;
}

message ActiveTxnIdResponse{
    repeated uint64 activeTxnIds = 1;
}

message ActiveTxnRequest{
    optional int64 startTxnId = 1 [default = -1];
    optional int64 endTxnId = 2 [default = -1];
    optional bytes destinationTables = 3;
}

message ActiveTxnResponse{
    repeated Txn txns = 1;
}

service TxnLifecycleService{
    /**
     * Begin a top-level <em>writable</em> transaction. The
     * returned transaction will be recorded on the transaction
     * table and will be in the ACTIVE state (able to be committed,
     * rolled back etc.)
     *
     * @param TxnInfo the information for the new transaction
     */
    rpc beginTransaction(TxnInfo) returns (VoidResponse);

    /**
     * Elevate a transaction from read-only to writable.
     *
     * @param ElevateRequest the request for the elevation
     */
    rpc elevateTransaction(ElevateRequest) returns (VoidResponse);

    /**
     * Create a <em>writable</em> child transaction.
     *
     * Because the Transaction table consists of multiple regions spread
     * across multiple nodes, the semantics of this call depend greatly
     * on what row this is called against(in particular, which region
     * its called against). In particular, if this method is called
     * against the <em>parent transaction's</em> row, then <em>creating</em>
     * the child transaction record will incur a remote call--as a result, this
     * should only be done when the child transaction id is to be generated.
     *
     * When the child transaction id (and begin timestamp) are known <em>before</em> the
     * network call, then this method may be called against the child transaction's region,
     * which will incude a possible network <em>read</em> of the parent transaction
     * if additional information is needed (i.e. if it inherits from the parent)
     */
    rpc beginChildTransaction(CreateChildRequest) returns (Txn);

    /**
     * Perform a lifecycle action for the specified transaction.
     */
    rpc lifecycleAction(TxnLifecycleMessage) returns (ActionResponse);

    rpc getTransaction(TxnRequest) returns (Txn);

    rpc getActiveTransactionIds(ActiveTxnRequest) returns (ActiveTxnIdResponse);

    rpc getActiveTransactions(ActiveTxnRequest) returns (ActiveTxnResponse);

    rpc rollbackTransactionsAfter(TxnRequest) returns (VoidResponse);
}