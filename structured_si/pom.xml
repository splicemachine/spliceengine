<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<artifactId>structured_si</artifactId>
	<packaging>jar</packaging>
	<name>structured_si</name>
	<description>Splice Machine Snapshot Isolation</description>
	<parent>
		<artifactId>spliceengine</artifactId>
		<groupId>com.splicemachine</groupId>
		<version>FUJI.0-SNAPSHOT</version>
	</parent>
	<dependencies>

        <dependency>
            <groupId>com.splicemachine</groupId>
            <artifactId>utilities</artifactId>
            <version>${utilities.version}</version>
        </dependency>
		<dependency>
			<groupId>com.splicemachine</groupId>
			<artifactId>structured_constants</artifactId>
			<version>FUJI.0-SNAPSHOT</version>
			<classifier>${envClassifier}</classifier>
			<type>jar</type>
			<scope>compile</scope>
		</dependency>
		<dependency>
			<groupId>com.github.stephenc.high-scale-lib</groupId>
			<artifactId>high-scale-lib</artifactId>
			<version>1.1.1</version>
		</dependency>
        <dependency>
            <groupId>org.hbase</groupId>
            <artifactId>asynchbase</artifactId>
            <version>${asynchbase.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>log4j-over-slf4j</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.google.protobuf</groupId>
                    <artifactId>protobuf-java</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>com.stumbleupon</groupId>
                    <artifactId>async</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.apache.zookeeper</groupId>
                    <artifactId>zookeeper</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.stumbleupon</groupId>
            <artifactId>async</artifactId>
            <version>${stumbleasync.version}</version>
            <exclusions>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-api</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>slf4j-log4j12</artifactId>
                </exclusion>
                <exclusion>
                    <groupId>org.slf4j</groupId>
                    <artifactId>log4j-over-slf4j</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
	</dependencies>
	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<version>1.2</version>
				<executions>
					<execution>
						<phase>validate</phase>
						<goals>
							<goal>create</goal>
						</goals>
					</execution>
				</executions>
				<configuration>
					<shortRevisionLength>10</shortRevisionLength>
					<doCheck>false</doCheck>
					<doUpdate>false</doUpdate>
				</configuration>
			</plugin>
		</plugins>
	</build>
	<profiles>
		<profile>
			<id>obfuscate</id>
			<activation>
				<property>
					<name>obfuscate</name>
					<value>true</value>
				</property>
			</activation>
			<properties>
				<obfuscate.si>-obfuscated</obfuscate.si>
			</properties>
			<build>
				<plugins>
					<plugin>
						<groupId>com.github.wvengen</groupId>
						<artifactId>proguard-maven-plugin</artifactId>
						<version>2.0.7</version>
						<configuration>
							<proguardVersion>4.11</proguardVersion>
							<obfuscate>true</obfuscate>
							<injar>${project.build.finalName}-${envClassifier}.jar</injar>
							<attach>true</attach>
							<attachArtifactClassifier>${envClassifier}${obfuscate.si}</attachArtifactClassifier>
							<injarNotExistsSkip>true</injarNotExistsSkip>
							<includeDependency>true</includeDependency>
							<outputDirectory>${project.build.directory}</outputDirectory>
							<options>
								<!-- This has to be set or all generics are lost.  -->
								<option>-keepattributes Signature</option>
								<option>-keepattributes Exceptions</option>
								<!-- # Write out an obfuscation mapping file for de-obfuscating any stack traces. -->
								<!-- # Or for incremental obfuscation of extensions... this will allow for patching obfuscated code if needed. -->
								<option>-printmapping ${project.build.directory}/${project.build.finalName}-${envClassifier}.map</option>
								<!-- # Kick-ass option to list all classes and class members that match the various -keep options. -->
								<!-- # Awesome for debugging config files. -->
								<option>-printseeds ${project.build.directory}/${project.build.finalName}-${envClassifier}.keep</option>
								<!-- ################################################# -->
								<!-- ### From the example for a typical library... ### -->
								<!-- ################################################# -->
								<!-- # SourceFile and LineNumberTable are needed for useful obfuscated stack traces.  Without these, the stack traces cannot be deciphered later on. -->
								<!-- # *Annotation* is needed to preserve @MXBean annotations for TransactionStatus. -->
								<option>-renamesourcefileattribute SourceFile</option>
								<option>-keepattributes SourceFile,LineNumberTable,*Annotation*.</option>
								<!-- # Needed to keep enumerations working. -->
								<option>-keepclassmembers,allowoptimization enum * {
									public static **[] values();
									public static ** valueOf(java.lang.String);
									}</option>
								<!-- # Preserves methods and members for Serializable classes that are actually used. -->
								<!-- # TODO: Do we need to add Formattable too? -->
								<option>-keepclassmembers class * implements java.io.Serializable {
									static final long serialVersionUID;
									private static final java.io.ObjectStreamField[] serialPersistentFields;
									private void writeObject(java.io.ObjectOutputStream);
									private void readObject(java.io.ObjectInputStream);
									java.lang.Object writeReplace();
									java.lang.Object readResolve();
									}</option>
								<!-- ################################################################ -->
								<!-- ### From the example of obfuscating the ProGuard jar file... ### -->
								<!-- ################################################################ -->
								<!-- # Allow methods with the same signature, except for the return type, to get the same obfuscation name. -->
								<option>-overloadaggressively</option>
								<!-- # Put all obfuscated classes into the nameless root package. -->
								<option>-repackageclasses ''</option>
								<!-- # Allow classes and class members to be made public. -->
								<option>-allowaccessmodification</option>
								<!-- ################################### -->
								<!-- ### Overrides for structured_si ### -->
								<!-- ################################### -->
								<!-- # Just ignore the duplicate class definitions for now.  Our class path is crazy long and probably needs to be cleaned up.-->
								<option>-dontnote</option>
								<!-- # Ignore bogus warnings that are being generated from the Apache Derby java/stubs source code.-->
								<!-- # I believe these files could just be deleted from our repo.  This should be confirmed before deletion.-->
								<option>-ignorewarnings</option>
								<!-- ################################### -->
								<!-- ### Overrides for structured_si ### -->
								<!-- ################################### -->
								<!-- # Preserve the classes accessed externally. -->
								<option>-keep public class com.splicemachine.si.impl.WriteConflict { public *; }</option>
								<option>-keep public class com.splicemachine.si.impl.DDLFilter { public *; }</option>
								<option>-keep public class com.splicemachine.si.impl.FilterStatePacked { public *; }</option>
								<option>-keep public class com.splicemachine.si.impl.PushBackIterator { public *; }</option>
								<option>-keep public class com.splicemachine.si.impl.Transaction { public *; }</option>
								<option>-keep public class com.splicemachine.si.impl.TransactionStore { public *; }</option>
								<option>-keep public class com.splicemachine.si.impl.RowAccumulator { public *; }</option>
								<option>-keep public class com.splicemachine.si.data.hbase.HRowAccumulator { public *; }</option>
								<option>-keep public class com.splicemachine.si.data.hbase.IHTable { public *; } </option>
								<option>-keep public class com.splicemachine.si.coprocessors.SIObserver { public *; }</option>
								<option>-keep public class com.splicemachine.si.coprocessors.SIFilter { public *; }</option>
								<option>-keep public class com.splicemachine.si.coprocessors.RollForwardQueueMap { public *; }</option>
                                                                <option>-keep public class com.splicemachine.si.coprocessors.TimestampMasterObserver { public *; }</option>
                                                                <option>-keep public class com.splicemachine.si.impl.timestamp.TimestampMasterManagement { public *; }</option>
                                                                <option>-keep public class com.splicemachine.si.impl.timestamp.TimestampRegionManagement { public *; }</option>
								<option>-keep public class com.splicemachine.si.impl.Tracer { public *; }</option>
                                                                <option>-keep public class com.splicemachine.si.api.Transactor { public *; }</option>
								<option>-keep public class com.splicemachine.si.api.TransactionalFilter { public *; } </option>
								<option>-keep public class com.splicemachine.si.api.TransactionReadController { public *; }</option>
								<option>-keep public class com.splicemachine.si.impl.rollforward.AbstractProcessingQueue { public *; }</option>
								<option>-keep public class com.splicemachine.si.impl.rollforward.DelayedRollForwardAction { public *; }</option>
								<option>-keep public class com.splicemachine.si.impl.rollforward.DelayedRollForwardQueue { public *; }</option>
								<option>-keep public class com.splicemachine.si.impl.rollforward.PushForwardAction { public *; }</option>
								<option>-keep public class com.splicemachine.si.impl.rollforward.PushForwardQueue { public *; }</option>
								<option>-keep public class com.splicemachine.si.impl.rollforward.RollForwardEvent { public *; }</option>
								<option>-keep public class com.splicemachine.si.impl.rollforward.RollForwardEventFactory { public *; }</option>
								<option>-keep public class com.splicemachine.si.impl.rollforward.SIRollForwardQueue { public *; }</option>
								<option>-keep public class com.splicemachine.si.api.ClientTransactor { public *; }</option>
								<option>-keep public class com.splicemachine.si.api.ConstraintChecker { public *; }</option>
								<!-- ### Method: beginTransaction ### -->
								<option>-keep public class com.splicemachine.si.api.TransactionManager { public *; }</option>
								<!-- ### Needed for SpliceDriver.registerJMX() during database booting. ### -->
								<option>-keep public class com.splicemachine.si.api.HTransactorFactory { public *; }</option>
								<!-- ### Method: beginTransaction ### -->
								<option>-keep public class com.splicemachine.si.impl.SITransactionManager { public *; }</option>
								<!-- ### Needed as return value from TransactionManager.beginTransaction() ### -->
								<option>-keep public class com.splicemachine.si.impl.TransactionId { public *; }</option>
								<!-- ### Needed as return value from HTransactorFactory.getTransactorStatus() in SpliceDriver.registerJMX(). ### -->
								<option>-keep public class com.splicemachine.si.jmx.ManagedTransactor { public *; }</option>
								<!-- ### Needed as return value from HTransactorFactory.getTransactorStatus() in SpliceDriver.registerJMX(). ### -->
								<option>-keep public class com.splicemachine.si.jmx.TransactorStatus { public *; }</option>
								<!-- ### Needed by ij for SELECT queries. ### -->
								<option>-keep public class com.splicemachine.si.impl.RowAccumulator { public *; } </option>
								<!-- ### Method, newFilterState, needed by ij for SELECT queries. TODO: only need method? ### -->
								<option>-keep public class com.splicemachine.si.api.TransactionReadController { public *; }</option>
								<!-- ### Method, newFilterState, needs this as a parameter. ### -->
								<option>-keep public class com.splicemachine.si.api.RollForwardQueue { public *; }</option>
								<!-- ### Method, newFilterState, needs this as a parameter. ### -->
								<option>-keep public class com.splicemachine.si.impl.IFilterState { public *; }</option>
								<!-- ### Method, newFilterState, needs this as a parameter. ### -->
								<option>-keep public class com.splicemachine.si.impl.FilterState { public *; }</option>
								<!-- ### Needed by ij for INSERT statements. ### -->
								<option>-keep public class com.splicemachine.si.data.hbase.HbRegion { public *; }</option>
								<!-- ### Needed for ITs. ### -->
								<option>-keep public class com.splicemachine.si.api.TransactionStatus { public *; }</option>
								<option>-keep public class com.splicemachine.si.api.TransactorListener { public *; }</option>
								<option>-keep public class com.splicemachine.si.api.SIFilter { public *; }</option>
							</options>
							<libs>
								<lib>${java.home}/lib/rt.jar</lib>
								<lib>${java.home}/lib/jsse.jar</lib>
								<lib>${java.home}/lib/jce.jar</lib>
								<lib>${java.home}/lib/charsets.jar</lib>
							</libs>
						</configuration>
						<executions>
							<execution>
								<phase>package</phase>
								<goals>
									<goal>proguard</goal>
								</goals>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>net.sf.proguard</groupId>
								<artifactId>proguard-base</artifactId>
								<version>4.11</version>
								<scope>runtime</scope>
							</dependency>
						</dependencies>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>
</project>
